
DualUART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005390  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  08005560  08005560  00015560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056a0  080056a0  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  080056a0  080056a0  000156a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056a8  080056a8  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056a8  080056a8  000156a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056ac  080056ac  000156ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  080056b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  20000040  080056f0  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000411c  080056f0  0002411c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016215  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003351  00000000  00000000  00036285  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000013a0  00000000  00000000  000395d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001218  00000000  00000000  0003a978  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b4b  00000000  00000000  0003bb90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fe40  00000000  00000000  0005f6db  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dc5fa  00000000  00000000  0006f51b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014bb15  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000050e8  00000000  00000000  0014bb90  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000040 	.word	0x20000040
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005548 	.word	0x08005548

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000044 	.word	0x20000044
 800020c:	08005548 	.word	0x08005548

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <vApplicationGetIdleTaskMemory+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x30>)
 8000536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000005c 	.word	0x2000005c
 8000550:	200000b0 	.word	0x200000b0

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b09c      	sub	sp, #112	; 0x70
 8000558:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fc9d 	bl	8000e98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f88b 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f971 	bl	8000848 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f945 	bl	80007f4 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800056a:	f000 f8f3 	bl	8000754 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADC_Start(&hadc1);
 800056e:	4836      	ldr	r0, [pc, #216]	; (8000648 <main+0xf4>)
 8000570:	f000 fcf8 	bl	8000f64 <HAL_ADC_Start>

  /* Initialize LCD 20 cols x 4 rows */
  TM_HD44780_Init(16, 2);
 8000574:	2102      	movs	r1, #2
 8000576:	2010      	movs	r0, #16
 8000578:	f004 fdb4 	bl	80050e4 <TM_HD44780_Init>
  /* Put string to LCD */
  TM_HD44780_Puts(0, 0, "Fernando");
 800057c:	4a33      	ldr	r2, [pc, #204]	; (800064c <main+0xf8>)
 800057e:	2100      	movs	r1, #0
 8000580:	2000      	movs	r0, #0
 8000582:	f004 fe23 	bl	80051cc <TM_HD44780_Puts>
  TM_HD44780_Puts(0, 1, "16x2 HD44780 LCD");
 8000586:	4a32      	ldr	r2, [pc, #200]	; (8000650 <main+0xfc>)
 8000588:	2101      	movs	r1, #1
 800058a:	2000      	movs	r0, #0
 800058c:	f004 fe1e 	bl	80051cc <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(3000);
 8000590:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000594:	f004 fc7c 	bl	8004e90 <HAL_Delay>
  /* Clear LCD */
  TM_HD44780_Clear();
 8000598:	f004 fe0c 	bl	80051b4 <TM_HD44780_Clear>
  /* Write new text */
  TM_HD44780_Puts(6, 1, "CLEARED!");
 800059c:	4a2d      	ldr	r2, [pc, #180]	; (8000654 <main+0x100>)
 800059e:	2101      	movs	r1, #1
 80005a0:	2006      	movs	r0, #6
 80005a2:	f004 fe13 	bl	80051cc <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(1000);
 80005a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005aa:	f004 fc71 	bl	8004e90 <HAL_Delay>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005ae:	4b2a      	ldr	r3, [pc, #168]	; (8000658 <main+0x104>)
 80005b0:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005b4:	461d      	mov	r5, r3
 80005b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005c2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005c6:	2100      	movs	r1, #0
 80005c8:	4618      	mov	r0, r3
 80005ca:	f003 f99c 	bl	8003906 <osThreadCreate>
 80005ce:	4602      	mov	r2, r0
 80005d0:	4b22      	ldr	r3, [pc, #136]	; (800065c <main+0x108>)
 80005d2:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2Init, osPriorityNormal, 0, 128);
 80005d4:	4b22      	ldr	r3, [pc, #136]	; (8000660 <main+0x10c>)
 80005d6:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005da:	461d      	mov	r5, r3
 80005dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005de:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005e4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80005e8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 f989 	bl	8003906 <osThreadCreate>
 80005f4:	4602      	mov	r2, r0
 80005f6:	4b1b      	ldr	r3, [pc, #108]	; (8000664 <main+0x110>)
 80005f8:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* TaskUARTProcess Creation */
  osThreadDef(TaskUARTProcess, TaskUARTProcessInit, osPriorityNormal, 0, 128);
 80005fa:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <main+0x114>)
 80005fc:	f107 041c 	add.w	r4, r7, #28
 8000600:	461d      	mov	r5, r3
 8000602:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000604:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000606:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800060a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUARTProcessHandler = osThreadCreate(osThread(TaskUARTProcess), NULL);
 800060e:	f107 031c 	add.w	r3, r7, #28
 8000612:	2100      	movs	r1, #0
 8000614:	4618      	mov	r0, r3
 8000616:	f003 f976 	bl	8003906 <osThreadCreate>
 800061a:	4602      	mov	r2, r0
 800061c:	4b13      	ldr	r3, [pc, #76]	; (800066c <main+0x118>)
 800061e:	601a      	str	r2, [r3, #0]

  /* TaskDisplay Creation */
  osThreadDef(TaskDisplay, TaskDisplayInit, osPriorityNormal, 0, 128);
 8000620:	4b13      	ldr	r3, [pc, #76]	; (8000670 <main+0x11c>)
 8000622:	463c      	mov	r4, r7
 8000624:	461d      	mov	r5, r3
 8000626:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000628:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800062e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandler = osThreadCreate(osThread(TaskDisplay), NULL);
 8000632:	463b      	mov	r3, r7
 8000634:	2100      	movs	r1, #0
 8000636:	4618      	mov	r0, r3
 8000638:	f003 f965 	bl	8003906 <osThreadCreate>
 800063c:	4602      	mov	r2, r0
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <main+0x120>)
 8000640:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000642:	f003 f959 	bl	80038f8 <osKernelStart>
  
  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000646:	e7fe      	b.n	8000646 <main+0xf2>
 8000648:	2000404c 	.word	0x2000404c
 800064c:	08005560 	.word	0x08005560
 8000650:	0800556c 	.word	0x0800556c
 8000654:	08005580 	.word	0x08005580
 8000658:	08005598 	.word	0x08005598
 800065c:	20004044 	.word	0x20004044
 8000660:	080055bc 	.word	0x080055bc
 8000664:	20004098 	.word	0x20004098
 8000668:	080055e8 	.word	0x080055e8
 800066c:	20004094 	.word	0x20004094
 8000670:	08005610 	.word	0x08005610
 8000674:	20004048 	.word	0x20004048

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 ff56 	bl	8005538 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800069c:	2300      	movs	r3, #0
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	4b2a      	ldr	r3, [pc, #168]	; (800074c <SystemClock_Config+0xd4>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a29      	ldr	r2, [pc, #164]	; (800074c <SystemClock_Config+0xd4>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b27      	ldr	r3, [pc, #156]	; (800074c <SystemClock_Config+0xd4>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	2300      	movs	r3, #0
 80006ba:	603b      	str	r3, [r7, #0]
 80006bc:	4b24      	ldr	r3, [pc, #144]	; (8000750 <SystemClock_Config+0xd8>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c4:	4a22      	ldr	r2, [pc, #136]	; (8000750 <SystemClock_Config+0xd8>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b20      	ldr	r3, [pc, #128]	; (8000750 <SystemClock_Config+0xd8>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d4:	603b      	str	r3, [r7, #0]
 80006d6:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006ec:	2310      	movs	r3, #16
 80006ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006f4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006f6:	2304      	movs	r3, #4
 80006f8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006fa:	2302      	movs	r3, #2
 80006fc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006fe:	2302      	movs	r3, #2
 8000700:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000702:	f107 031c 	add.w	r3, r7, #28
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fd5a 	bl	80021c0 <HAL_RCC_OscConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000712:	f000 fa31 	bl	8000b78 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000716:	230f      	movs	r3, #15
 8000718:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800071a:	2302      	movs	r3, #2
 800071c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800071e:	2300      	movs	r3, #0
 8000720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000728:	2300      	movs	r3, #0
 800072a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800072c:	f107 0308 	add.w	r3, r7, #8
 8000730:	2102      	movs	r1, #2
 8000732:	4618      	mov	r0, r3
 8000734:	f001 fa58 	bl	8001be8 <HAL_RCC_ClockConfig>
 8000738:	4603      	mov	r3, r0
 800073a:	2b00      	cmp	r3, #0
 800073c:	d001      	beq.n	8000742 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800073e:	f000 fa1b 	bl	8000b78 <Error_Handler>
  }
}
 8000742:	bf00      	nop
 8000744:	3750      	adds	r7, #80	; 0x50
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	40023800 	.word	0x40023800
 8000750:	40007000 	.word	0x40007000

08000754 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b084      	sub	sp, #16
 8000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800075a:	463b      	mov	r3, r7
 800075c:	2200      	movs	r2, #0
 800075e:	601a      	str	r2, [r3, #0]
 8000760:	605a      	str	r2, [r3, #4]
 8000762:	609a      	str	r2, [r3, #8]
 8000764:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000766:	4b21      	ldr	r3, [pc, #132]	; (80007ec <MX_ADC1_Init+0x98>)
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <MX_ADC1_Init+0x9c>)
 800076a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800076c:	4b1f      	ldr	r3, [pc, #124]	; (80007ec <MX_ADC1_Init+0x98>)
 800076e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000772:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000774:	4b1d      	ldr	r3, [pc, #116]	; (80007ec <MX_ADC1_Init+0x98>)
 8000776:	2200      	movs	r2, #0
 8000778:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800077a:	4b1c      	ldr	r3, [pc, #112]	; (80007ec <MX_ADC1_Init+0x98>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000780:	4b1a      	ldr	r3, [pc, #104]	; (80007ec <MX_ADC1_Init+0x98>)
 8000782:	2201      	movs	r2, #1
 8000784:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000786:	4b19      	ldr	r3, [pc, #100]	; (80007ec <MX_ADC1_Init+0x98>)
 8000788:	2200      	movs	r2, #0
 800078a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800078e:	4b17      	ldr	r3, [pc, #92]	; (80007ec <MX_ADC1_Init+0x98>)
 8000790:	2200      	movs	r2, #0
 8000792:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T1_CC1;
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <MX_ADC1_Init+0x98>)
 8000796:	2200      	movs	r2, #0
 8000798:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800079a:	4b14      	ldr	r3, [pc, #80]	; (80007ec <MX_ADC1_Init+0x98>)
 800079c:	2200      	movs	r2, #0
 800079e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007a0:	4b12      	ldr	r3, [pc, #72]	; (80007ec <MX_ADC1_Init+0x98>)
 80007a2:	2201      	movs	r2, #1
 80007a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007a6:	4b11      	ldr	r3, [pc, #68]	; (80007ec <MX_ADC1_Init+0x98>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007ae:	4b0f      	ldr	r3, [pc, #60]	; (80007ec <MX_ADC1_Init+0x98>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007b4:	480d      	ldr	r0, [pc, #52]	; (80007ec <MX_ADC1_Init+0x98>)
 80007b6:	f000 fb91 	bl	8000edc <HAL_ADC_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007c0:	f000 f9da 	bl	8000b78 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007c4:	2300      	movs	r3, #0
 80007c6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007c8:	2301      	movs	r3, #1
 80007ca:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80007cc:	2307      	movs	r3, #7
 80007ce:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007d0:	463b      	mov	r3, r7
 80007d2:	4619      	mov	r1, r3
 80007d4:	4805      	ldr	r0, [pc, #20]	; (80007ec <MX_ADC1_Init+0x98>)
 80007d6:	f000 fd1d 	bl	8001214 <HAL_ADC_ConfigChannel>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80007e0:	f000 f9ca 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	2000404c 	.word	0x2000404c
 80007f0:	40012000 	.word	0x40012000

080007f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80007f8:	4b11      	ldr	r3, [pc, #68]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 80007fa:	4a12      	ldr	r2, [pc, #72]	; (8000844 <MX_USART2_UART_Init+0x50>)
 80007fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80007fe:	4b10      	ldr	r3, [pc, #64]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000800:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000804:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000808:	2200      	movs	r2, #0
 800080a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800080c:	4b0c      	ldr	r3, [pc, #48]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800080e:	2200      	movs	r2, #0
 8000810:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000812:	4b0b      	ldr	r3, [pc, #44]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000818:	4b09      	ldr	r3, [pc, #36]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800081a:	220c      	movs	r2, #12
 800081c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800081e:	4b08      	ldr	r3, [pc, #32]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000824:	4b06      	ldr	r3, [pc, #24]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 8000826:	2200      	movs	r2, #0
 8000828:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800082a:	4805      	ldr	r0, [pc, #20]	; (8000840 <MX_USART2_UART_Init+0x4c>)
 800082c:	f002 f960 	bl	8002af0 <HAL_UART_Init>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000836:	f000 f99f 	bl	8000b78 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800083a:	bf00      	nop
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	2000409c 	.word	0x2000409c
 8000844:	40004400 	.word	0x40004400

08000848 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b08a      	sub	sp, #40	; 0x28
 800084c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800084e:	f107 0314 	add.w	r3, r7, #20
 8000852:	2200      	movs	r2, #0
 8000854:	601a      	str	r2, [r3, #0]
 8000856:	605a      	str	r2, [r3, #4]
 8000858:	609a      	str	r2, [r3, #8]
 800085a:	60da      	str	r2, [r3, #12]
 800085c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	613b      	str	r3, [r7, #16]
 8000862:	4b2d      	ldr	r3, [pc, #180]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	4a2c      	ldr	r2, [pc, #176]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000868:	f043 0304 	orr.w	r3, r3, #4
 800086c:	6313      	str	r3, [r2, #48]	; 0x30
 800086e:	4b2a      	ldr	r3, [pc, #168]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	f003 0304 	and.w	r3, r3, #4
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	60fb      	str	r3, [r7, #12]
 800087e:	4b26      	ldr	r3, [pc, #152]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a25      	ldr	r2, [pc, #148]	; (8000918 <MX_GPIO_Init+0xd0>)
 8000884:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b23      	ldr	r3, [pc, #140]	; (8000918 <MX_GPIO_Init+0xd0>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	60bb      	str	r3, [r7, #8]
 800089a:	4b1f      	ldr	r3, [pc, #124]	; (8000918 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	4a1e      	ldr	r2, [pc, #120]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008a0:	f043 0301 	orr.w	r3, r3, #1
 80008a4:	6313      	str	r3, [r2, #48]	; 0x30
 80008a6:	4b1c      	ldr	r3, [pc, #112]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008aa:	f003 0301 	and.w	r3, r3, #1
 80008ae:	60bb      	str	r3, [r7, #8]
 80008b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	607b      	str	r3, [r7, #4]
 80008b6:	4b18      	ldr	r3, [pc, #96]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a17      	ldr	r2, [pc, #92]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008bc:	f043 0302 	orr.w	r3, r3, #2
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b15      	ldr	r3, [pc, #84]	; (8000918 <MX_GPIO_Init+0xd0>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0302 	and.w	r3, r3, #2
 80008ca:	607b      	str	r3, [r7, #4]
 80008cc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008ce:	2200      	movs	r2, #0
 80008d0:	2120      	movs	r1, #32
 80008d2:	4812      	ldr	r0, [pc, #72]	; (800091c <MX_GPIO_Init+0xd4>)
 80008d4:	f001 f96e 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008d8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008dc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008de:	4b10      	ldr	r3, [pc, #64]	; (8000920 <MX_GPIO_Init+0xd8>)
 80008e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 0314 	add.w	r3, r7, #20
 80008ea:	4619      	mov	r1, r3
 80008ec:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_GPIO_Init+0xdc>)
 80008ee:	f000 ffcf 	bl	8001890 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80008f2:	2320      	movs	r3, #32
 80008f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f6:	2301      	movs	r3, #1
 80008f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fa:	2300      	movs	r3, #0
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fe:	2300      	movs	r3, #0
 8000900:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	4619      	mov	r1, r3
 8000908:	4804      	ldr	r0, [pc, #16]	; (800091c <MX_GPIO_Init+0xd4>)
 800090a:	f000 ffc1 	bl	8001890 <HAL_GPIO_Init>

}
 800090e:	bf00      	nop
 8000910:	3728      	adds	r7, #40	; 0x28
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40023800 	.word	0x40023800
 800091c:	40020000 	.word	0x40020000
 8000920:	10210000 	.word	0x10210000
 8000924:	40020800 	.word	0x40020800

08000928 <uart_send>:

/* USER CODE BEGIN 4 */

void uart_send(uint8_t *data)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b084      	sub	sp, #16
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
	uint16_t size = (uint16_t)strlen((const char *)data);
 8000930:	6878      	ldr	r0, [r7, #4]
 8000932:	f7ff fc6d 	bl	8000210 <strlen>
 8000936:	4603      	mov	r3, r0
 8000938:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 800093a:	89fa      	ldrh	r2, [r7, #14]
 800093c:	f04f 33ff 	mov.w	r3, #4294967295
 8000940:	6879      	ldr	r1, [r7, #4]
 8000942:	4803      	ldr	r0, [pc, #12]	; (8000950 <uart_send+0x28>)
 8000944:	f002 f921 	bl	8002b8a <HAL_UART_Transmit>
}
 8000948:	bf00      	nop
 800094a:	3710      	adds	r7, #16
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000409c 	.word	0x2000409c

08000954 <TaskUARTProcessInit>:


void TaskUARTProcessInit(void const * argument)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 800095c:	2001      	movs	r0, #1
 800095e:	f003 f81e 	bl	800399e <osDelay>
 8000962:	e7fb      	b.n	800095c <TaskUARTProcessInit+0x8>

08000964 <TaskDisplayInit>:
  }
}

void TaskDisplayInit(void const * argument)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b084      	sub	sp, #16
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  for(;;)
  {
	uint16_t ADCValuebefore;

	HAL_ADC_PollForConversion(&hadc1, 100);
 800096c:	2164      	movs	r1, #100	; 0x64
 800096e:	4864      	ldr	r0, [pc, #400]	; (8000b00 <TaskDisplayInit+0x19c>)
 8000970:	f000 fbbe 	bl	80010f0 <HAL_ADC_PollForConversion>

	if ((HAL_ADC_GetState(&hadc1) & HAL_ADC_STATE_EOC_REG) == HAL_ADC_STATE_EOC_REG)
 8000974:	4862      	ldr	r0, [pc, #392]	; (8000b00 <TaskDisplayInit+0x19c>)
 8000976:	f000 fd7f 	bl	8001478 <HAL_ADC_GetState>
 800097a:	4603      	mov	r3, r0
 800097c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000980:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000984:	d107      	bne.n	8000996 <TaskDisplayInit+0x32>
	{
		ADCValue = HAL_ADC_GetValue(&hadc1);
 8000986:	485e      	ldr	r0, [pc, #376]	; (8000b00 <TaskDisplayInit+0x19c>)
 8000988:	f000 fc36 	bl	80011f8 <HAL_ADC_GetValue>
 800098c:	4603      	mov	r3, r0
 800098e:	b29a      	uxth	r2, r3
 8000990:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000992:	801a      	strh	r2, [r3, #0]
 8000994:	e001      	b.n	800099a <TaskDisplayInit+0x36>
	}
	else Error_Handler();
 8000996:	f000 f8ef 	bl	8000b78 <Error_Handler>
	/*
	 * Description: This part must detect the button press. To do so, it must debounce the button,
	 * and and consider the ADC error.
	 */

	if( !((ADCValue < (ADCValuebefore + KEY_ERROR)) && (ADCValue > (ADCValuebefore - KEY_ERROR))) )
 800099a:	4b5a      	ldr	r3, [pc, #360]	; (8000b04 <TaskDisplayInit+0x1a0>)
 800099c:	881b      	ldrh	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	461a      	mov	r2, r3
 80009a2:	89fb      	ldrh	r3, [r7, #14]
 80009a4:	3332      	adds	r3, #50	; 0x32
 80009a6:	429a      	cmp	r2, r3
 80009a8:	da08      	bge.n	80009bc <TaskDisplayInit+0x58>
 80009aa:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <TaskDisplayInit+0x1a0>)
 80009ac:	881b      	ldrh	r3, [r3, #0]
 80009ae:	b29b      	uxth	r3, r3
 80009b0:	461a      	mov	r2, r3
 80009b2:	89fb      	ldrh	r3, [r7, #14]
 80009b4:	3b32      	subs	r3, #50	; 0x32
 80009b6:	429a      	cmp	r2, r3
 80009b8:	f300 8098 	bgt.w	8000aec <TaskDisplayInit+0x188>
	{

		if ( (ADCValue > KEY_UP_LOWER) && (ADCValue < KEY_UP_UPPER) )
 80009bc:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <TaskDisplayInit+0x1a0>)
 80009be:	881b      	ldrh	r3, [r3, #0]
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80009c6:	d917      	bls.n	80009f8 <TaskDisplayInit+0x94>
 80009c8:	4b4e      	ldr	r3, [pc, #312]	; (8000b04 <TaskDisplayInit+0x1a0>)
 80009ca:	881b      	ldrh	r3, [r3, #0]
 80009cc:	b29b      	uxth	r3, r3
 80009ce:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80009d2:	d211      	bcs.n	80009f8 <TaskDisplayInit+0x94>
		{
			sprintf(usart_buffer,"UP\r\n");
 80009d4:	4b4c      	ldr	r3, [pc, #304]	; (8000b08 <TaskDisplayInit+0x1a4>)
 80009d6:	4a4d      	ldr	r2, [pc, #308]	; (8000b0c <TaskDisplayInit+0x1a8>)
 80009d8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009dc:	6018      	str	r0, [r3, #0]
 80009de:	3304      	adds	r3, #4
 80009e0:	7019      	strb	r1, [r3, #0]
			uart_send(usart_buffer);
 80009e2:	4849      	ldr	r0, [pc, #292]	; (8000b08 <TaskDisplayInit+0x1a4>)
 80009e4:	f7ff ffa0 	bl	8000928 <uart_send>
			TM_HD44780_Clear();
 80009e8:	f004 fbe4 	bl	80051b4 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "UP");
 80009ec:	4a48      	ldr	r2, [pc, #288]	; (8000b10 <TaskDisplayInit+0x1ac>)
 80009ee:	2100      	movs	r1, #0
 80009f0:	2000      	movs	r0, #0
 80009f2:	f004 fbeb 	bl	80051cc <TM_HD44780_Puts>
		{
 80009f6:	e079      	b.n	8000aec <TaskDisplayInit+0x188>
		}
		else if (( (ADCValue > KEY_DOWN_LOWER) && (ADCValue < KEY_DOWN_UPPER) ))
 80009f8:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <TaskDisplayInit+0x1a0>)
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d91a      	bls.n	8000a3c <TaskDisplayInit+0xd8>
 8000a06:	4b3f      	ldr	r3, [pc, #252]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	b29b      	uxth	r3, r3
 8000a0c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000a10:	d214      	bcs.n	8000a3c <TaskDisplayInit+0xd8>
		{
			sprintf(usart_buffer,"DOWN\r\n");
 8000a12:	4b3d      	ldr	r3, [pc, #244]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a14:	4a3f      	ldr	r2, [pc, #252]	; (8000b14 <TaskDisplayInit+0x1b0>)
 8000a16:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1a:	6018      	str	r0, [r3, #0]
 8000a1c:	3304      	adds	r3, #4
 8000a1e:	8019      	strh	r1, [r3, #0]
 8000a20:	3302      	adds	r3, #2
 8000a22:	0c0a      	lsrs	r2, r1, #16
 8000a24:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000a26:	4838      	ldr	r0, [pc, #224]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a28:	f7ff ff7e 	bl	8000928 <uart_send>
			TM_HD44780_Clear();
 8000a2c:	f004 fbc2 	bl	80051b4 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "DOWN");
 8000a30:	4a39      	ldr	r2, [pc, #228]	; (8000b18 <TaskDisplayInit+0x1b4>)
 8000a32:	2100      	movs	r1, #0
 8000a34:	2000      	movs	r0, #0
 8000a36:	f004 fbc9 	bl	80051cc <TM_HD44780_Puts>
		{
 8000a3a:	e057      	b.n	8000aec <TaskDisplayInit+0x188>
		}
		else if (( (ADCValue > KEY_RIGHT_LOWER) && (ADCValue < KEY_RIGHT_UPPER) ))
 8000a3c:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000a3e:	881b      	ldrh	r3, [r3, #0]
 8000a40:	4b30      	ldr	r3, [pc, #192]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000a42:	881b      	ldrh	r3, [r3, #0]
 8000a44:	b29b      	uxth	r3, r3
 8000a46:	2b31      	cmp	r3, #49	; 0x31
 8000a48:	d810      	bhi.n	8000a6c <TaskDisplayInit+0x108>
		{
			sprintf(usart_buffer,"RIGHT\r\n");
 8000a4a:	4b2f      	ldr	r3, [pc, #188]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a4c:	4a33      	ldr	r2, [pc, #204]	; (8000b1c <TaskDisplayInit+0x1b8>)
 8000a4e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a52:	e883 0003 	stmia.w	r3, {r0, r1}
			uart_send(usart_buffer);
 8000a56:	482c      	ldr	r0, [pc, #176]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a58:	f7ff ff66 	bl	8000928 <uart_send>
			TM_HD44780_Clear();
 8000a5c:	f004 fbaa 	bl	80051b4 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "RIGHT");
 8000a60:	4a2f      	ldr	r2, [pc, #188]	; (8000b20 <TaskDisplayInit+0x1bc>)
 8000a62:	2100      	movs	r1, #0
 8000a64:	2000      	movs	r0, #0
 8000a66:	f004 fbb1 	bl	80051cc <TM_HD44780_Puts>
		{
 8000a6a:	e03f      	b.n	8000aec <TaskDisplayInit+0x188>
		}
		else if (( (ADCValue > KEY_LEFT_LOWER) && (ADCValue < KEY_LEFT_UPPER) ))
 8000a6c:	4b25      	ldr	r3, [pc, #148]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000a6e:	881b      	ldrh	r3, [r3, #0]
 8000a70:	b29b      	uxth	r3, r3
 8000a72:	f640 126a 	movw	r2, #2410	; 0x96a
 8000a76:	4293      	cmp	r3, r2
 8000a78:	d91b      	bls.n	8000ab2 <TaskDisplayInit+0x14e>
 8000a7a:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000a7c:	881b      	ldrh	r3, [r3, #0]
 8000a7e:	b29b      	uxth	r3, r3
 8000a80:	f640 12cd 	movw	r2, #2509	; 0x9cd
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d814      	bhi.n	8000ab2 <TaskDisplayInit+0x14e>
		{
			sprintf(usart_buffer,"LEFT\r\n");
 8000a88:	4b1f      	ldr	r3, [pc, #124]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a8a:	4a26      	ldr	r2, [pc, #152]	; (8000b24 <TaskDisplayInit+0x1c0>)
 8000a8c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a90:	6018      	str	r0, [r3, #0]
 8000a92:	3304      	adds	r3, #4
 8000a94:	8019      	strh	r1, [r3, #0]
 8000a96:	3302      	adds	r3, #2
 8000a98:	0c0a      	lsrs	r2, r1, #16
 8000a9a:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000a9c:	481a      	ldr	r0, [pc, #104]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000a9e:	f7ff ff43 	bl	8000928 <uart_send>
			TM_HD44780_Clear();
 8000aa2:	f004 fb87 	bl	80051b4 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "LEFT");
 8000aa6:	4a20      	ldr	r2, [pc, #128]	; (8000b28 <TaskDisplayInit+0x1c4>)
 8000aa8:	2100      	movs	r1, #0
 8000aaa:	2000      	movs	r0, #0
 8000aac:	f004 fb8e 	bl	80051cc <TM_HD44780_Puts>
		{
 8000ab0:	e01c      	b.n	8000aec <TaskDisplayInit+0x188>
		}
		else if (( (ADCValue > KEY_SELECT_LOWER) && (ADCValue < KEY_SELECT_UPPER) ))
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000ab4:	881b      	ldrh	r3, [r3, #0]
 8000ab6:	b29b      	uxth	r3, r3
 8000ab8:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000abc:	4293      	cmp	r3, r2
 8000abe:	d915      	bls.n	8000aec <TaskDisplayInit+0x188>
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000ac2:	881b      	ldrh	r3, [r3, #0]
 8000ac4:	b29b      	uxth	r3, r3
 8000ac6:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000aca:	4293      	cmp	r3, r2
 8000acc:	d80e      	bhi.n	8000aec <TaskDisplayInit+0x188>
		{
			sprintf(usart_buffer,"SELECT\r\n");
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000ad0:	4a16      	ldr	r2, [pc, #88]	; (8000b2c <TaskDisplayInit+0x1c8>)
 8000ad2:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad4:	c303      	stmia	r3!, {r0, r1}
 8000ad6:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000ad8:	480b      	ldr	r0, [pc, #44]	; (8000b08 <TaskDisplayInit+0x1a4>)
 8000ada:	f7ff ff25 	bl	8000928 <uart_send>
			TM_HD44780_Clear();
 8000ade:	f004 fb69 	bl	80051b4 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "SELECT");
 8000ae2:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <TaskDisplayInit+0x1cc>)
 8000ae4:	2100      	movs	r1, #0
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	f004 fb70 	bl	80051cc <TM_HD44780_Puts>
		}
	}
	HAL_ADC_Start(&hadc1);
 8000aec:	4804      	ldr	r0, [pc, #16]	; (8000b00 <TaskDisplayInit+0x19c>)
 8000aee:	f000 fa39 	bl	8000f64 <HAL_ADC_Start>

	ADCValuebefore = ADCValue;
 8000af2:	4b04      	ldr	r3, [pc, #16]	; (8000b04 <TaskDisplayInit+0x1a0>)
 8000af4:	881b      	ldrh	r3, [r3, #0]
 8000af6:	81fb      	strh	r3, [r7, #14]

    osDelay(1);
 8000af8:	2001      	movs	r0, #1
 8000afa:	f002 ff50 	bl	800399e <osDelay>
  {
 8000afe:	e735      	b.n	800096c <TaskDisplayInit+0x8>
 8000b00:	2000404c 	.word	0x2000404c
 8000b04:	200002b0 	.word	0x200002b0
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	0800562c 	.word	0x0800562c
 8000b10:	08005634 	.word	0x08005634
 8000b14:	08005638 	.word	0x08005638
 8000b18:	08005640 	.word	0x08005640
 8000b1c:	08005648 	.word	0x08005648
 8000b20:	08005650 	.word	0x08005650
 8000b24:	08005658 	.word	0x08005658
 8000b28:	08005660 	.word	0x08005660
 8000b2c:	08005668 	.word	0x08005668
 8000b30:	08005674 	.word	0x08005674

08000b34 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f002 ff2e 	bl	800399e <osDelay>
 8000b42:	e7fb      	b.n	8000b3c <StartDefaultTask+0x8>

08000b44 <Task2Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2Init */
void Task2Init(void const * argument)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2Init */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000b4c:	2001      	movs	r0, #1
 8000b4e:	f002 ff26 	bl	800399e <osDelay>
 8000b52:	e7fb      	b.n	8000b4c <Task2Init+0x8>

08000b54 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	4a04      	ldr	r2, [pc, #16]	; (8000b74 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b62:	4293      	cmp	r3, r2
 8000b64:	d101      	bne.n	8000b6a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b66:	f004 f90d 	bl	8004d84 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	40001000 	.word	0x40001000

08000b78 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
	...

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b12      	ldr	r3, [pc, #72]	; (8000bdc <HAL_MspInit+0x54>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b96:	4a11      	ldr	r2, [pc, #68]	; (8000bdc <HAL_MspInit+0x54>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000b9e:	4b0f      	ldr	r3, [pc, #60]	; (8000bdc <HAL_MspInit+0x54>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b0b      	ldr	r3, [pc, #44]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb2:	4a0a      	ldr	r2, [pc, #40]	; (8000bdc <HAL_MspInit+0x54>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bba:	4b08      	ldr	r3, [pc, #32]	; (8000bdc <HAL_MspInit+0x54>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	210f      	movs	r1, #15
 8000bca:	f06f 0001 	mvn.w	r0, #1
 8000bce:	f000 fe13 	bl	80017f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	3708      	adds	r7, #8
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40023800 	.word	0x40023800

08000be0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b08a      	sub	sp, #40	; 0x28
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be8:	f107 0314 	add.w	r3, r7, #20
 8000bec:	2200      	movs	r2, #0
 8000bee:	601a      	str	r2, [r3, #0]
 8000bf0:	605a      	str	r2, [r3, #4]
 8000bf2:	609a      	str	r2, [r3, #8]
 8000bf4:	60da      	str	r2, [r3, #12]
 8000bf6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	4a17      	ldr	r2, [pc, #92]	; (8000c5c <HAL_ADC_MspInit+0x7c>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d127      	bne.n	8000c52 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	613b      	str	r3, [r7, #16]
 8000c06:	4b16      	ldr	r3, [pc, #88]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0a:	4a15      	ldr	r2, [pc, #84]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c10:	6453      	str	r3, [r2, #68]	; 0x44
 8000c12:	4b13      	ldr	r3, [pc, #76]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1a:	613b      	str	r3, [r7, #16]
 8000c1c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60fb      	str	r3, [r7, #12]
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_ADC_MspInit+0x80>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_ADC_MspInit+0x84>)
 8000c4e:	f000 fe1f 	bl	8001890 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a1d      	ldr	r2, [pc, #116]	; (8000cfc <HAL_UART_MspInit+0x94>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d133      	bne.n	8000cf2 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c8a:	2300      	movs	r3, #0
 8000c8c:	613b      	str	r3, [r7, #16]
 8000c8e:	4b1c      	ldr	r3, [pc, #112]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c92:	4a1b      	ldr	r2, [pc, #108]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c98:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9a:	4b19      	ldr	r3, [pc, #100]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	613b      	str	r3, [r7, #16]
 8000ca4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60fb      	str	r3, [r7, #12]
 8000caa:	4b15      	ldr	r3, [pc, #84]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	4a14      	ldr	r2, [pc, #80]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb0:	f043 0301 	orr.w	r3, r3, #1
 8000cb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cb6:	4b12      	ldr	r3, [pc, #72]	; (8000d00 <HAL_UART_MspInit+0x98>)
 8000cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cba:	f003 0301 	and.w	r3, r3, #1
 8000cbe:	60fb      	str	r3, [r7, #12]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cc2:	230c      	movs	r3, #12
 8000cc4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cce:	2303      	movs	r3, #3
 8000cd0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cd2:	2307      	movs	r3, #7
 8000cd4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd6:	f107 0314 	add.w	r3, r7, #20
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4809      	ldr	r0, [pc, #36]	; (8000d04 <HAL_UART_MspInit+0x9c>)
 8000cde:	f000 fdd7 	bl	8001890 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	2105      	movs	r1, #5
 8000ce6:	2026      	movs	r0, #38	; 0x26
 8000ce8:	f000 fd86 	bl	80017f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000cec:	2026      	movs	r0, #38	; 0x26
 8000cee:	f000 fd9f 	bl	8001830 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cf2:	bf00      	nop
 8000cf4:	3728      	adds	r7, #40	; 0x28
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	40004400 	.word	0x40004400
 8000d00:	40023800 	.word	0x40023800
 8000d04:	40020000 	.word	0x40020000

08000d08 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b08c      	sub	sp, #48	; 0x30
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d14:	2300      	movs	r3, #0
 8000d16:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d18:	2200      	movs	r2, #0
 8000d1a:	6879      	ldr	r1, [r7, #4]
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f000 fd6b 	bl	80017f8 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d22:	2036      	movs	r0, #54	; 0x36
 8000d24:	f000 fd84 	bl	8001830 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60fb      	str	r3, [r7, #12]
 8000d2c:	4b1f      	ldr	r3, [pc, #124]	; (8000dac <HAL_InitTick+0xa4>)
 8000d2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d30:	4a1e      	ldr	r2, [pc, #120]	; (8000dac <HAL_InitTick+0xa4>)
 8000d32:	f043 0310 	orr.w	r3, r3, #16
 8000d36:	6413      	str	r3, [r2, #64]	; 0x40
 8000d38:	4b1c      	ldr	r3, [pc, #112]	; (8000dac <HAL_InitTick+0xa4>)
 8000d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d3c:	f003 0310 	and.w	r3, r3, #16
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d44:	f107 0210 	add.w	r2, r7, #16
 8000d48:	f107 0314 	add.w	r3, r7, #20
 8000d4c:	4611      	mov	r1, r2
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f001 f864 	bl	8001e1c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d54:	f001 f83a 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8000d58:	4603      	mov	r3, r0
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d60:	4a13      	ldr	r2, [pc, #76]	; (8000db0 <HAL_InitTick+0xa8>)
 8000d62:	fba2 2303 	umull	r2, r3, r2, r3
 8000d66:	0c9b      	lsrs	r3, r3, #18
 8000d68:	3b01      	subs	r3, #1
 8000d6a:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d6c:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_InitTick+0xac>)
 8000d6e:	4a12      	ldr	r2, [pc, #72]	; (8000db8 <HAL_InitTick+0xb0>)
 8000d70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000d72:	4b10      	ldr	r3, [pc, #64]	; (8000db4 <HAL_InitTick+0xac>)
 8000d74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d7a:	4a0e      	ldr	r2, [pc, #56]	; (8000db4 <HAL_InitTick+0xac>)
 8000d7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d80:	4b0c      	ldr	r3, [pc, #48]	; (8000db4 <HAL_InitTick+0xac>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_InitTick+0xac>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000d8c:	4809      	ldr	r0, [pc, #36]	; (8000db4 <HAL_InitTick+0xac>)
 8000d8e:	f001 fc71 	bl	8002674 <HAL_TIM_Base_Init>
 8000d92:	4603      	mov	r3, r0
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d104      	bne.n	8000da2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000d98:	4806      	ldr	r0, [pc, #24]	; (8000db4 <HAL_InitTick+0xac>)
 8000d9a:	f001 fca0 	bl	80026de <HAL_TIM_Base_Start_IT>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	e000      	b.n	8000da4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000da2:	2301      	movs	r3, #1
}
 8000da4:	4618      	mov	r0, r3
 8000da6:	3730      	adds	r7, #48	; 0x30
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}
 8000dac:	40023800 	.word	0x40023800
 8000db0:	431bde83 	.word	0x431bde83
 8000db4:	200040dc 	.word	0x200040dc
 8000db8:	40001000 	.word	0x40001000

08000dbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <USART2_IRQHandler+0x10>)
 8000df6:	f001 ff61 	bl	8002cbc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000409c 	.word	0x2000409c

08000e04 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e08:	4802      	ldr	r0, [pc, #8]	; (8000e14 <TIM6_DAC_IRQHandler+0x10>)
 8000e0a:	f001 fc8c 	bl	8002726 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e0e:	bf00      	nop
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	bf00      	nop
 8000e14:	200040dc 	.word	0x200040dc

08000e18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <SystemInit+0x28>)
 8000e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e22:	4a07      	ldr	r2, [pc, #28]	; (8000e40 <SystemInit+0x28>)
 8000e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e2c:	4b04      	ldr	r3, [pc, #16]	; (8000e40 <SystemInit+0x28>)
 8000e2e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e32:	609a      	str	r2, [r3, #8]
#endif
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	e000ed00 	.word	0xe000ed00

08000e44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e7c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e48:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e4a:	e003      	b.n	8000e54 <LoopCopyDataInit>

08000e4c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000e4c:	4b0c      	ldr	r3, [pc, #48]	; (8000e80 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000e4e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000e50:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000e52:	3104      	adds	r1, #4

08000e54 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000e56:	4b0c      	ldr	r3, [pc, #48]	; (8000e88 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000e58:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000e5a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000e5c:	d3f6      	bcc.n	8000e4c <CopyDataInit>
  ldr  r2, =_sbss
 8000e5e:	4a0b      	ldr	r2, [pc, #44]	; (8000e8c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000e60:	e002      	b.n	8000e68 <LoopFillZerobss>

08000e62 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000e62:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000e64:	f842 3b04 	str.w	r3, [r2], #4

08000e68 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000e68:	4b09      	ldr	r3, [pc, #36]	; (8000e90 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000e6a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000e6c:	d3f9      	bcc.n	8000e62 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000e6e:	f7ff ffd3 	bl	8000e18 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e72:	f004 fb3d 	bl	80054f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e76:	f7ff fb6d 	bl	8000554 <main>
  bx  lr    
 8000e7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e7c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000e80:	080056b0 	.word	0x080056b0
  ldr  r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000e88:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8000e8c:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8000e90:	2000411c 	.word	0x2000411c

08000e94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e94:	e7fe      	b.n	8000e94 <ADC_IRQHandler>
	...

08000e98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ed8 <HAL_Init+0x40>)
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	4a0d      	ldr	r2, [pc, #52]	; (8000ed8 <HAL_Init+0x40>)
 8000ea2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000ea6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000ea8:	4b0b      	ldr	r3, [pc, #44]	; (8000ed8 <HAL_Init+0x40>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a0a      	ldr	r2, [pc, #40]	; (8000ed8 <HAL_Init+0x40>)
 8000eae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb4:	4b08      	ldr	r3, [pc, #32]	; (8000ed8 <HAL_Init+0x40>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	4a07      	ldr	r2, [pc, #28]	; (8000ed8 <HAL_Init+0x40>)
 8000eba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ebe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec0:	2003      	movs	r0, #3
 8000ec2:	f000 fc8e 	bl	80017e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ec6:	2000      	movs	r0, #0
 8000ec8:	f7ff ff1e 	bl	8000d08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ecc:	f7ff fe5c 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023c00 	.word	0x40023c00

08000edc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e033      	b.n	8000f5a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d109      	bne.n	8000f0e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f7ff fe70 	bl	8000be0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f12:	f003 0310 	and.w	r3, r3, #16
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d118      	bne.n	8000f4c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f1e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f22:	f023 0302 	bic.w	r3, r3, #2
 8000f26:	f043 0202 	orr.w	r2, r3, #2
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f000 faae 	bl	8001490 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	2200      	movs	r2, #0
 8000f38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3e:	f023 0303 	bic.w	r3, r3, #3
 8000f42:	f043 0201 	orr.w	r2, r3, #1
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	641a      	str	r2, [r3, #64]	; 0x40
 8000f4a:	e001      	b.n	8000f50 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	2200      	movs	r2, #0
 8000f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	3710      	adds	r7, #16
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
	...

08000f64 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d101      	bne.n	8000f7e <HAL_ADC_Start+0x1a>
 8000f7a:	2302      	movs	r3, #2
 8000f7c:	e0a5      	b.n	80010ca <HAL_ADC_Start+0x166>
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	2201      	movs	r2, #1
 8000f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	2b01      	cmp	r3, #1
 8000f92:	d018      	beq.n	8000fc6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	689a      	ldr	r2, [r3, #8]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f042 0201 	orr.w	r2, r2, #1
 8000fa2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000fa4:	4b4c      	ldr	r3, [pc, #304]	; (80010d8 <HAL_ADC_Start+0x174>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a4c      	ldr	r2, [pc, #304]	; (80010dc <HAL_ADC_Start+0x178>)
 8000faa:	fba2 2303 	umull	r2, r3, r2, r3
 8000fae:	0c9a      	lsrs	r2, r3, #18
 8000fb0:	4613      	mov	r3, r2
 8000fb2:	005b      	lsls	r3, r3, #1
 8000fb4:	4413      	add	r3, r2
 8000fb6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fb8:	e002      	b.n	8000fc0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000fba:	68bb      	ldr	r3, [r7, #8]
 8000fbc:	3b01      	subs	r3, #1
 8000fbe:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d1f9      	bne.n	8000fba <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d179      	bne.n	80010c8 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000fdc:	f023 0301 	bic.w	r3, r3, #1
 8000fe0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	685b      	ldr	r3, [r3, #4]
 8000fee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d007      	beq.n	8001006 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ffe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800100e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001012:	d106      	bne.n	8001022 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001018:	f023 0206 	bic.w	r2, r3, #6
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	645a      	str	r2, [r3, #68]	; 0x44
 8001020:	e002      	b.n	8001028 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	2200      	movs	r2, #0
 8001026:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2200      	movs	r2, #0
 800102c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001030:	4b2b      	ldr	r3, [pc, #172]	; (80010e0 <HAL_ADC_Start+0x17c>)
 8001032:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800103c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f003 031f 	and.w	r3, r3, #31
 8001046:	2b00      	cmp	r3, #0
 8001048:	d12a      	bne.n	80010a0 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4a25      	ldr	r2, [pc, #148]	; (80010e4 <HAL_ADC_Start+0x180>)
 8001050:	4293      	cmp	r3, r2
 8001052:	d015      	beq.n	8001080 <HAL_ADC_Start+0x11c>
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	4a23      	ldr	r2, [pc, #140]	; (80010e8 <HAL_ADC_Start+0x184>)
 800105a:	4293      	cmp	r3, r2
 800105c:	d105      	bne.n	800106a <HAL_ADC_Start+0x106>
 800105e:	4b20      	ldr	r3, [pc, #128]	; (80010e0 <HAL_ADC_Start+0x17c>)
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	f003 031f 	and.w	r3, r3, #31
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4a1f      	ldr	r2, [pc, #124]	; (80010ec <HAL_ADC_Start+0x188>)
 8001070:	4293      	cmp	r3, r2
 8001072:	d129      	bne.n	80010c8 <HAL_ADC_Start+0x164>
 8001074:	4b1a      	ldr	r3, [pc, #104]	; (80010e0 <HAL_ADC_Start+0x17c>)
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	f003 031f 	and.w	r3, r3, #31
 800107c:	2b0f      	cmp	r3, #15
 800107e:	d823      	bhi.n	80010c8 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800108a:	2b00      	cmp	r3, #0
 800108c:	d11c      	bne.n	80010c8 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	689a      	ldr	r2, [r3, #8]
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800109c:	609a      	str	r2, [r3, #8]
 800109e:	e013      	b.n	80010c8 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4a0f      	ldr	r2, [pc, #60]	; (80010e4 <HAL_ADC_Start+0x180>)
 80010a6:	4293      	cmp	r3, r2
 80010a8:	d10e      	bne.n	80010c8 <HAL_ADC_Start+0x164>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	689b      	ldr	r3, [r3, #8]
 80010b0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d107      	bne.n	80010c8 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	689a      	ldr	r2, [r3, #8]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010c6:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3714      	adds	r7, #20
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	20000034 	.word	0x20000034
 80010dc:	431bde83 	.word	0x431bde83
 80010e0:	40012300 	.word	0x40012300
 80010e4:	40012000 	.word	0x40012000
 80010e8:	40012100 	.word	0x40012100
 80010ec:	40012200 	.word	0x40012200

080010f0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b084      	sub	sp, #16
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80010fa:	2300      	movs	r3, #0
 80010fc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001108:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800110c:	d113      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001118:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800111c:	d10b      	bne.n	8001136 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f043 0220 	orr.w	r2, r3, #32
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2200      	movs	r2, #0
 800112e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	e05c      	b.n	80011f0 <HAL_ADC_PollForConversion+0x100>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001136:	f003 fed5 	bl	8004ee4 <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800113c:	e01a      	b.n	8001174 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001144:	d016      	beq.n	8001174 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d007      	beq.n	800115c <HAL_ADC_PollForConversion+0x6c>
 800114c:	f003 feca 	bl	8004ee4 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	1ad3      	subs	r3, r2, r3
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	429a      	cmp	r2, r3
 800115a:	d20b      	bcs.n	8001174 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001160:	f043 0204 	orr.w	r2, r3, #4
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8001170:	2303      	movs	r3, #3
 8001172:	e03d      	b.n	80011f0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b02      	cmp	r3, #2
 8001180:	d1dd      	bne.n	800113e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f06f 0212 	mvn.w	r2, #18
 800118a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001190:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	689b      	ldr	r3, [r3, #8]
 800119e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d123      	bne.n	80011ee <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d11f      	bne.n	80011ee <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d006      	beq.n	80011ca <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d111      	bne.n	80011ee <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d105      	bne.n	80011ee <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e6:	f043 0201 	orr.w	r2, r3, #1
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80011ee:	2300      	movs	r3, #0
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3710      	adds	r7, #16
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001206:	4618      	mov	r0, r3
 8001208:	370c      	adds	r7, #12
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr
	...

08001214 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
 800121c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800121e:	2300      	movs	r3, #0
 8001220:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001228:	2b01      	cmp	r3, #1
 800122a:	d101      	bne.n	8001230 <HAL_ADC_ConfigChannel+0x1c>
 800122c:	2302      	movs	r3, #2
 800122e:	e113      	b.n	8001458 <HAL_ADC_ConfigChannel+0x244>
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2201      	movs	r2, #1
 8001234:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b09      	cmp	r3, #9
 800123e:	d925      	bls.n	800128c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	68d9      	ldr	r1, [r3, #12]
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	b29b      	uxth	r3, r3
 800124c:	461a      	mov	r2, r3
 800124e:	4613      	mov	r3, r2
 8001250:	005b      	lsls	r3, r3, #1
 8001252:	4413      	add	r3, r2
 8001254:	3b1e      	subs	r3, #30
 8001256:	2207      	movs	r2, #7
 8001258:	fa02 f303 	lsl.w	r3, r2, r3
 800125c:	43da      	mvns	r2, r3
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	400a      	ands	r2, r1
 8001264:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	68d9      	ldr	r1, [r3, #12]
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	689a      	ldr	r2, [r3, #8]
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	b29b      	uxth	r3, r3
 8001276:	4618      	mov	r0, r3
 8001278:	4603      	mov	r3, r0
 800127a:	005b      	lsls	r3, r3, #1
 800127c:	4403      	add	r3, r0
 800127e:	3b1e      	subs	r3, #30
 8001280:	409a      	lsls	r2, r3
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	681b      	ldr	r3, [r3, #0]
 8001286:	430a      	orrs	r2, r1
 8001288:	60da      	str	r2, [r3, #12]
 800128a:	e022      	b.n	80012d2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	6919      	ldr	r1, [r3, #16]
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	b29b      	uxth	r3, r3
 8001298:	461a      	mov	r2, r3
 800129a:	4613      	mov	r3, r2
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	4413      	add	r3, r2
 80012a0:	2207      	movs	r2, #7
 80012a2:	fa02 f303 	lsl.w	r3, r2, r3
 80012a6:	43da      	mvns	r2, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	400a      	ands	r2, r1
 80012ae:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6919      	ldr	r1, [r3, #16]
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	689a      	ldr	r2, [r3, #8]
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	b29b      	uxth	r3, r3
 80012c0:	4618      	mov	r0, r3
 80012c2:	4603      	mov	r3, r0
 80012c4:	005b      	lsls	r3, r3, #1
 80012c6:	4403      	add	r3, r0
 80012c8:	409a      	lsls	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	2b06      	cmp	r3, #6
 80012d8:	d824      	bhi.n	8001324 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	4613      	mov	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4413      	add	r3, r2
 80012ea:	3b05      	subs	r3, #5
 80012ec:	221f      	movs	r2, #31
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43da      	mvns	r2, r3
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	400a      	ands	r2, r1
 80012fa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	b29b      	uxth	r3, r3
 8001308:	4618      	mov	r0, r3
 800130a:	683b      	ldr	r3, [r7, #0]
 800130c:	685a      	ldr	r2, [r3, #4]
 800130e:	4613      	mov	r3, r2
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	4413      	add	r3, r2
 8001314:	3b05      	subs	r3, #5
 8001316:	fa00 f203 	lsl.w	r2, r0, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	635a      	str	r2, [r3, #52]	; 0x34
 8001322:	e04c      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001324:	683b      	ldr	r3, [r7, #0]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	2b0c      	cmp	r3, #12
 800132a:	d824      	bhi.n	8001376 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685a      	ldr	r2, [r3, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	3b23      	subs	r3, #35	; 0x23
 800133e:	221f      	movs	r2, #31
 8001340:	fa02 f303 	lsl.w	r3, r2, r3
 8001344:	43da      	mvns	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	400a      	ands	r2, r1
 800134c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001354:	683b      	ldr	r3, [r7, #0]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	b29b      	uxth	r3, r3
 800135a:	4618      	mov	r0, r3
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685a      	ldr	r2, [r3, #4]
 8001360:	4613      	mov	r3, r2
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	4413      	add	r3, r2
 8001366:	3b23      	subs	r3, #35	; 0x23
 8001368:	fa00 f203 	lsl.w	r2, r0, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	631a      	str	r2, [r3, #48]	; 0x30
 8001374:	e023      	b.n	80013be <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	685a      	ldr	r2, [r3, #4]
 8001380:	4613      	mov	r3, r2
 8001382:	009b      	lsls	r3, r3, #2
 8001384:	4413      	add	r3, r2
 8001386:	3b41      	subs	r3, #65	; 0x41
 8001388:	221f      	movs	r2, #31
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	43da      	mvns	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	400a      	ands	r2, r1
 8001396:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	b29b      	uxth	r3, r3
 80013a4:	4618      	mov	r0, r3
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	685a      	ldr	r2, [r3, #4]
 80013aa:	4613      	mov	r3, r2
 80013ac:	009b      	lsls	r3, r3, #2
 80013ae:	4413      	add	r3, r2
 80013b0:	3b41      	subs	r3, #65	; 0x41
 80013b2:	fa00 f203 	lsl.w	r2, r0, r3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	430a      	orrs	r2, r1
 80013bc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013be:	4b29      	ldr	r3, [pc, #164]	; (8001464 <HAL_ADC_ConfigChannel+0x250>)
 80013c0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a28      	ldr	r2, [pc, #160]	; (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d10f      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b12      	cmp	r3, #18
 80013d2:	d10b      	bne.n	80013ec <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	685b      	ldr	r3, [r3, #4]
 80013d8:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a1d      	ldr	r2, [pc, #116]	; (8001468 <HAL_ADC_ConfigChannel+0x254>)
 80013f2:	4293      	cmp	r3, r2
 80013f4:	d12b      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a1c      	ldr	r2, [pc, #112]	; (800146c <HAL_ADC_ConfigChannel+0x258>)
 80013fc:	4293      	cmp	r3, r2
 80013fe:	d003      	beq.n	8001408 <HAL_ADC_ConfigChannel+0x1f4>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	2b11      	cmp	r3, #17
 8001406:	d122      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4a11      	ldr	r2, [pc, #68]	; (800146c <HAL_ADC_ConfigChannel+0x258>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d111      	bne.n	800144e <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800142a:	4b11      	ldr	r3, [pc, #68]	; (8001470 <HAL_ADC_ConfigChannel+0x25c>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a11      	ldr	r2, [pc, #68]	; (8001474 <HAL_ADC_ConfigChannel+0x260>)
 8001430:	fba2 2303 	umull	r2, r3, r2, r3
 8001434:	0c9a      	lsrs	r2, r3, #18
 8001436:	4613      	mov	r3, r2
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	4413      	add	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001440:	e002      	b.n	8001448 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001442:	68bb      	ldr	r3, [r7, #8]
 8001444:	3b01      	subs	r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001448:	68bb      	ldr	r3, [r7, #8]
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f9      	bne.n	8001442 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3714      	adds	r7, #20
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	40012300 	.word	0x40012300
 8001468:	40012000 	.word	0x40012000
 800146c:	10000012 	.word	0x10000012
 8001470:	20000034 	.word	0x20000034
 8001474:	431bde83 	.word	0x431bde83

08001478 <HAL_ADC_GetState>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL state
  */
uint32_t HAL_ADC_GetState(ADC_HandleTypeDef* hadc)
{
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  /* Return ADC state */
  return hadc->State;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001484:	4618      	mov	r0, r3
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001498:	4b79      	ldr	r3, [pc, #484]	; (8001680 <ADC_Init+0x1f0>)
 800149a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	431a      	orrs	r2, r3
 80014b2:	68fb      	ldr	r3, [r7, #12]
 80014b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	685a      	ldr	r2, [r3, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6859      	ldr	r1, [r3, #4]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	691b      	ldr	r3, [r3, #16]
 80014d0:	021a      	lsls	r2, r3, #8
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	430a      	orrs	r2, r1
 80014d8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	685a      	ldr	r2, [r3, #4]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80014e8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6859      	ldr	r1, [r3, #4]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	689a      	ldr	r2, [r3, #8]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	430a      	orrs	r2, r1
 80014fa:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800150a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6899      	ldr	r1, [r3, #8]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68da      	ldr	r2, [r3, #12]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	430a      	orrs	r2, r1
 800151c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001522:	4a58      	ldr	r2, [pc, #352]	; (8001684 <ADC_Init+0x1f4>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d022      	beq.n	800156e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001536:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	6899      	ldr	r1, [r3, #8]
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	430a      	orrs	r2, r1
 8001548:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	689a      	ldr	r2, [r3, #8]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001558:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	6899      	ldr	r1, [r3, #8]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	e00f      	b.n	800158e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800157c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689a      	ldr	r2, [r3, #8]
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800158c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	689a      	ldr	r2, [r3, #8]
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f022 0202 	bic.w	r2, r2, #2
 800159c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6899      	ldr	r1, [r3, #8]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	7e1b      	ldrb	r3, [r3, #24]
 80015a8:	005a      	lsls	r2, r3, #1
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	430a      	orrs	r2, r1
 80015b0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d01b      	beq.n	80015f4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80015ca:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	685a      	ldr	r2, [r3, #4]
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80015da:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6859      	ldr	r1, [r3, #4]
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	3b01      	subs	r3, #1
 80015e8:	035a      	lsls	r2, r3, #13
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	605a      	str	r2, [r3, #4]
 80015f2:	e007      	b.n	8001604 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001602:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001612:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	3b01      	subs	r3, #1
 8001620:	051a      	lsls	r2, r3, #20
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	430a      	orrs	r2, r1
 8001628:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	689a      	ldr	r2, [r3, #8]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001638:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	6899      	ldr	r1, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001646:	025a      	lsls	r2, r3, #9
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	430a      	orrs	r2, r1
 800164e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	689a      	ldr	r2, [r3, #8]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800165e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	6899      	ldr	r1, [r3, #8]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	695b      	ldr	r3, [r3, #20]
 800166a:	029a      	lsls	r2, r3, #10
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	430a      	orrs	r2, r1
 8001672:	609a      	str	r2, [r3, #8]
}
 8001674:	bf00      	nop
 8001676:	3714      	adds	r7, #20
 8001678:	46bd      	mov	sp, r7
 800167a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167e:	4770      	bx	lr
 8001680:	40012300 	.word	0x40012300
 8001684:	0f000001 	.word	0x0f000001

08001688 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	f003 0307 	and.w	r3, r3, #7
 8001696:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001698:	4b0c      	ldr	r3, [pc, #48]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 800169a:	68db      	ldr	r3, [r3, #12]
 800169c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800169e:	68ba      	ldr	r2, [r7, #8]
 80016a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016a4:	4013      	ands	r3, r2
 80016a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016ba:	4a04      	ldr	r2, [pc, #16]	; (80016cc <__NVIC_SetPriorityGrouping+0x44>)
 80016bc:	68bb      	ldr	r3, [r7, #8]
 80016be:	60d3      	str	r3, [r2, #12]
}
 80016c0:	bf00      	nop
 80016c2:	3714      	adds	r7, #20
 80016c4:	46bd      	mov	sp, r7
 80016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ca:	4770      	bx	lr
 80016cc:	e000ed00 	.word	0xe000ed00

080016d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016d4:	4b04      	ldr	r3, [pc, #16]	; (80016e8 <__NVIC_GetPriorityGrouping+0x18>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	0a1b      	lsrs	r3, r3, #8
 80016da:	f003 0307 	and.w	r3, r3, #7
}
 80016de:	4618      	mov	r0, r3
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ec:	b480      	push	{r7}
 80016ee:	b083      	sub	sp, #12
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	4603      	mov	r3, r0
 80016f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	db0b      	blt.n	8001716 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	f003 021f 	and.w	r2, r3, #31
 8001704:	4907      	ldr	r1, [pc, #28]	; (8001724 <__NVIC_EnableIRQ+0x38>)
 8001706:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800170a:	095b      	lsrs	r3, r3, #5
 800170c:	2001      	movs	r0, #1
 800170e:	fa00 f202 	lsl.w	r2, r0, r2
 8001712:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001716:	bf00      	nop
 8001718:	370c      	adds	r7, #12
 800171a:	46bd      	mov	sp, r7
 800171c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001720:	4770      	bx	lr
 8001722:	bf00      	nop
 8001724:	e000e100 	.word	0xe000e100

08001728 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001728:	b480      	push	{r7}
 800172a:	b083      	sub	sp, #12
 800172c:	af00      	add	r7, sp, #0
 800172e:	4603      	mov	r3, r0
 8001730:	6039      	str	r1, [r7, #0]
 8001732:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001734:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001738:	2b00      	cmp	r3, #0
 800173a:	db0a      	blt.n	8001752 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	b2da      	uxtb	r2, r3
 8001740:	490c      	ldr	r1, [pc, #48]	; (8001774 <__NVIC_SetPriority+0x4c>)
 8001742:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001746:	0112      	lsls	r2, r2, #4
 8001748:	b2d2      	uxtb	r2, r2
 800174a:	440b      	add	r3, r1
 800174c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001750:	e00a      	b.n	8001768 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4908      	ldr	r1, [pc, #32]	; (8001778 <__NVIC_SetPriority+0x50>)
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	f003 030f 	and.w	r3, r3, #15
 800175e:	3b04      	subs	r3, #4
 8001760:	0112      	lsls	r2, r2, #4
 8001762:	b2d2      	uxtb	r2, r2
 8001764:	440b      	add	r3, r1
 8001766:	761a      	strb	r2, [r3, #24]
}
 8001768:	bf00      	nop
 800176a:	370c      	adds	r7, #12
 800176c:	46bd      	mov	sp, r7
 800176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001772:	4770      	bx	lr
 8001774:	e000e100 	.word	0xe000e100
 8001778:	e000ed00 	.word	0xe000ed00

0800177c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800177c:	b480      	push	{r7}
 800177e:	b089      	sub	sp, #36	; 0x24
 8001780:	af00      	add	r7, sp, #0
 8001782:	60f8      	str	r0, [r7, #12]
 8001784:	60b9      	str	r1, [r7, #8]
 8001786:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 0307 	and.w	r3, r3, #7
 800178e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	f1c3 0307 	rsb	r3, r3, #7
 8001796:	2b04      	cmp	r3, #4
 8001798:	bf28      	it	cs
 800179a:	2304      	movcs	r3, #4
 800179c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800179e:	69fb      	ldr	r3, [r7, #28]
 80017a0:	3304      	adds	r3, #4
 80017a2:	2b06      	cmp	r3, #6
 80017a4:	d902      	bls.n	80017ac <NVIC_EncodePriority+0x30>
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	3b03      	subs	r3, #3
 80017aa:	e000      	b.n	80017ae <NVIC_EncodePriority+0x32>
 80017ac:	2300      	movs	r3, #0
 80017ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b0:	f04f 32ff 	mov.w	r2, #4294967295
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	43da      	mvns	r2, r3
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	401a      	ands	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017c4:	f04f 31ff 	mov.w	r1, #4294967295
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	fa01 f303 	lsl.w	r3, r1, r3
 80017ce:	43d9      	mvns	r1, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d4:	4313      	orrs	r3, r2
         );
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3724      	adds	r7, #36	; 0x24
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017e2:	b580      	push	{r7, lr}
 80017e4:	b082      	sub	sp, #8
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f7ff ff4c 	bl	8001688 <__NVIC_SetPriorityGrouping>
}
 80017f0:	bf00      	nop
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b086      	sub	sp, #24
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	60b9      	str	r1, [r7, #8]
 8001802:	607a      	str	r2, [r7, #4]
 8001804:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001806:	2300      	movs	r3, #0
 8001808:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800180a:	f7ff ff61 	bl	80016d0 <__NVIC_GetPriorityGrouping>
 800180e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	68b9      	ldr	r1, [r7, #8]
 8001814:	6978      	ldr	r0, [r7, #20]
 8001816:	f7ff ffb1 	bl	800177c <NVIC_EncodePriority>
 800181a:	4602      	mov	r2, r0
 800181c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001820:	4611      	mov	r1, r2
 8001822:	4618      	mov	r0, r3
 8001824:	f7ff ff80 	bl	8001728 <__NVIC_SetPriority>
}
 8001828:	bf00      	nop
 800182a:	3718      	adds	r7, #24
 800182c:	46bd      	mov	sp, r7
 800182e:	bd80      	pop	{r7, pc}

08001830 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800183a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff ff54 	bl	80016ec <__NVIC_EnableIRQ>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800184c:	b480      	push	{r7}
 800184e:	b083      	sub	sp, #12
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800185a:	b2db      	uxtb	r3, r3
 800185c:	2b02      	cmp	r3, #2
 800185e:	d004      	beq.n	800186a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2280      	movs	r2, #128	; 0x80
 8001864:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e00c      	b.n	8001884 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2205      	movs	r2, #5
 800186e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	681a      	ldr	r2, [r3, #0]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f022 0201 	bic.w	r2, r2, #1
 8001880:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	370c      	adds	r7, #12
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr

08001890 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001890:	b480      	push	{r7}
 8001892:	b089      	sub	sp, #36	; 0x24
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
 8001898:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800189e:	2300      	movs	r3, #0
 80018a0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
 80018aa:	e165      	b.n	8001b78 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80018ac:	2201      	movs	r2, #1
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	fa02 f303 	lsl.w	r3, r2, r3
 80018b4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	697a      	ldr	r2, [r7, #20]
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80018c0:	693a      	ldr	r2, [r7, #16]
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	429a      	cmp	r2, r3
 80018c6:	f040 8154 	bne.w	8001b72 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d00b      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	2b02      	cmp	r3, #2
 80018d8:	d007      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d003      	beq.n	80018ea <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	2b12      	cmp	r3, #18
 80018e8:	d130      	bne.n	800194c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	689b      	ldr	r3, [r3, #8]
 80018ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80018f0:	69fb      	ldr	r3, [r7, #28]
 80018f2:	005b      	lsls	r3, r3, #1
 80018f4:	2203      	movs	r2, #3
 80018f6:	fa02 f303 	lsl.w	r3, r2, r3
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	69fb      	ldr	r3, [r7, #28]
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	fa02 f303 	lsl.w	r3, r2, r3
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	4313      	orrs	r3, r2
 8001912:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	69ba      	ldr	r2, [r7, #24]
 8001918:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	685b      	ldr	r3, [r3, #4]
 800191e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	091b      	lsrs	r3, r3, #4
 8001936:	f003 0201 	and.w	r2, r3, #1
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	fa02 f303 	lsl.w	r3, r2, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4313      	orrs	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001952:	69fb      	ldr	r3, [r7, #28]
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	2203      	movs	r2, #3
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	43db      	mvns	r3, r3
 800195e:	69ba      	ldr	r2, [r7, #24]
 8001960:	4013      	ands	r3, r2
 8001962:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	689a      	ldr	r2, [r3, #8]
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	fa02 f303 	lsl.w	r3, r2, r3
 8001970:	69ba      	ldr	r2, [r7, #24]
 8001972:	4313      	orrs	r3, r2
 8001974:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69ba      	ldr	r2, [r7, #24]
 800197a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0xfc>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b12      	cmp	r3, #18
 800198a:	d123      	bne.n	80019d4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001998:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	f003 0307 	and.w	r3, r3, #7
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	fa02 f303 	lsl.w	r3, r2, r3
 80019a8:	43db      	mvns	r3, r3
 80019aa:	69ba      	ldr	r2, [r7, #24]
 80019ac:	4013      	ands	r3, r2
 80019ae:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691a      	ldr	r2, [r3, #16]
 80019b4:	69fb      	ldr	r3, [r7, #28]
 80019b6:	f003 0307 	and.w	r3, r3, #7
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80019c6:	69fb      	ldr	r3, [r7, #28]
 80019c8:	08da      	lsrs	r2, r3, #3
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	3208      	adds	r2, #8
 80019ce:	69b9      	ldr	r1, [r7, #24]
 80019d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80019da:	69fb      	ldr	r3, [r7, #28]
 80019dc:	005b      	lsls	r3, r3, #1
 80019de:	2203      	movs	r2, #3
 80019e0:	fa02 f303 	lsl.w	r3, r2, r3
 80019e4:	43db      	mvns	r3, r3
 80019e6:	69ba      	ldr	r2, [r7, #24]
 80019e8:	4013      	ands	r3, r2
 80019ea:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f003 0203 	and.w	r2, r3, #3
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	fa02 f303 	lsl.w	r3, r2, r3
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	4313      	orrs	r3, r2
 8001a00:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	69ba      	ldr	r2, [r7, #24]
 8001a06:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	f000 80ae 	beq.w	8001b72 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a16:	2300      	movs	r3, #0
 8001a18:	60fb      	str	r3, [r7, #12]
 8001a1a:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a1e:	4a5b      	ldr	r2, [pc, #364]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a20:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a24:	6453      	str	r3, [r2, #68]	; 0x44
 8001a26:	4b59      	ldr	r3, [pc, #356]	; (8001b8c <HAL_GPIO_Init+0x2fc>)
 8001a28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a2e:	60fb      	str	r3, [r7, #12]
 8001a30:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001a32:	4a57      	ldr	r2, [pc, #348]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	089b      	lsrs	r3, r3, #2
 8001a38:	3302      	adds	r3, #2
 8001a3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001a40:	69fb      	ldr	r3, [r7, #28]
 8001a42:	f003 0303 	and.w	r3, r3, #3
 8001a46:	009b      	lsls	r3, r3, #2
 8001a48:	220f      	movs	r2, #15
 8001a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4e:	43db      	mvns	r3, r3
 8001a50:	69ba      	ldr	r2, [r7, #24]
 8001a52:	4013      	ands	r3, r2
 8001a54:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4a4e      	ldr	r2, [pc, #312]	; (8001b94 <HAL_GPIO_Init+0x304>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d025      	beq.n	8001aaa <HAL_GPIO_Init+0x21a>
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	4a4d      	ldr	r2, [pc, #308]	; (8001b98 <HAL_GPIO_Init+0x308>)
 8001a62:	4293      	cmp	r3, r2
 8001a64:	d01f      	beq.n	8001aa6 <HAL_GPIO_Init+0x216>
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_GPIO_Init+0x30c>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d019      	beq.n	8001aa2 <HAL_GPIO_Init+0x212>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	4a4b      	ldr	r2, [pc, #300]	; (8001ba0 <HAL_GPIO_Init+0x310>)
 8001a72:	4293      	cmp	r3, r2
 8001a74:	d013      	beq.n	8001a9e <HAL_GPIO_Init+0x20e>
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	4a4a      	ldr	r2, [pc, #296]	; (8001ba4 <HAL_GPIO_Init+0x314>)
 8001a7a:	4293      	cmp	r3, r2
 8001a7c:	d00d      	beq.n	8001a9a <HAL_GPIO_Init+0x20a>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4a49      	ldr	r2, [pc, #292]	; (8001ba8 <HAL_GPIO_Init+0x318>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d007      	beq.n	8001a96 <HAL_GPIO_Init+0x206>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4a48      	ldr	r2, [pc, #288]	; (8001bac <HAL_GPIO_Init+0x31c>)
 8001a8a:	4293      	cmp	r3, r2
 8001a8c:	d101      	bne.n	8001a92 <HAL_GPIO_Init+0x202>
 8001a8e:	2306      	movs	r3, #6
 8001a90:	e00c      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a92:	2307      	movs	r3, #7
 8001a94:	e00a      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a96:	2305      	movs	r3, #5
 8001a98:	e008      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	e006      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001a9e:	2303      	movs	r3, #3
 8001aa0:	e004      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa2:	2302      	movs	r3, #2
 8001aa4:	e002      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_GPIO_Init+0x21c>
 8001aaa:	2300      	movs	r3, #0
 8001aac:	69fa      	ldr	r2, [r7, #28]
 8001aae:	f002 0203 	and.w	r2, r2, #3
 8001ab2:	0092      	lsls	r2, r2, #2
 8001ab4:	4093      	lsls	r3, r2
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	4313      	orrs	r3, r2
 8001aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001abc:	4934      	ldr	r1, [pc, #208]	; (8001b90 <HAL_GPIO_Init+0x300>)
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	089b      	lsrs	r3, r3, #2
 8001ac2:	3302      	adds	r3, #2
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001aca:	4b39      	ldr	r3, [pc, #228]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ad0:	693b      	ldr	r3, [r7, #16]
 8001ad2:	43db      	mvns	r3, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4013      	ands	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	685b      	ldr	r3, [r3, #4]
 8001ade:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001ae6:	69ba      	ldr	r2, [r7, #24]
 8001ae8:	693b      	ldr	r3, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001aee:	4a30      	ldr	r2, [pc, #192]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001af0:	69bb      	ldr	r3, [r7, #24]
 8001af2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	43db      	mvns	r3, r3
 8001afe:	69ba      	ldr	r2, [r7, #24]
 8001b00:	4013      	ands	r3, r2
 8001b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d003      	beq.n	8001b18 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001b10:	69ba      	ldr	r2, [r7, #24]
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b1e:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b20:	689b      	ldr	r3, [r3, #8]
 8001b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	43db      	mvns	r3, r3
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	4013      	ands	r3, r2
 8001b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d003      	beq.n	8001b42 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001b3a:	69ba      	ldr	r2, [r7, #24]
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001b42:	4a1b      	ldr	r2, [pc, #108]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001b48:	4b19      	ldr	r3, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b4a:	68db      	ldr	r3, [r3, #12]
 8001b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	43db      	mvns	r3, r3
 8001b52:	69ba      	ldr	r2, [r7, #24]
 8001b54:	4013      	ands	r3, r2
 8001b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d003      	beq.n	8001b6c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001b6c:	4a10      	ldr	r2, [pc, #64]	; (8001bb0 <HAL_GPIO_Init+0x320>)
 8001b6e:	69bb      	ldr	r3, [r7, #24]
 8001b70:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	3301      	adds	r3, #1
 8001b76:	61fb      	str	r3, [r7, #28]
 8001b78:	69fb      	ldr	r3, [r7, #28]
 8001b7a:	2b0f      	cmp	r3, #15
 8001b7c:	f67f ae96 	bls.w	80018ac <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001b80:	bf00      	nop
 8001b82:	3724      	adds	r7, #36	; 0x24
 8001b84:	46bd      	mov	sp, r7
 8001b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8a:	4770      	bx	lr
 8001b8c:	40023800 	.word	0x40023800
 8001b90:	40013800 	.word	0x40013800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40020400 	.word	0x40020400
 8001b9c:	40020800 	.word	0x40020800
 8001ba0:	40020c00 	.word	0x40020c00
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40021400 	.word	0x40021400
 8001bac:	40021800 	.word	0x40021800
 8001bb0:	40013c00 	.word	0x40013c00

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	619a      	str	r2, [r3, #24]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr
	...

08001be8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
 8001bf0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d101      	bne.n	8001bfc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0cc      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b68      	ldr	r3, [pc, #416]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d90c      	bls.n	8001c24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b65      	ldr	r3, [pc, #404]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b63      	ldr	r3, [pc, #396]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e0b8      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0302 	and.w	r3, r3, #2
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d020      	beq.n	8001c72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f003 0304 	and.w	r3, r3, #4
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d005      	beq.n	8001c48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c3c:	4b59      	ldr	r3, [pc, #356]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4a58      	ldr	r2, [pc, #352]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c42:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c46:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d005      	beq.n	8001c60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c54:	4b53      	ldr	r3, [pc, #332]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	4a52      	ldr	r2, [pc, #328]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c60:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	494d      	ldr	r1, [pc, #308]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6e:	4313      	orrs	r3, r2
 8001c70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d044      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d107      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c86:	4b47      	ldr	r3, [pc, #284]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d119      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e07f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	2b02      	cmp	r3, #2
 8001c9c:	d003      	beq.n	8001ca6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ca2:	2b03      	cmp	r3, #3
 8001ca4:	d107      	bne.n	8001cb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ca6:	4b3f      	ldr	r3, [pc, #252]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d109      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e06f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001cb6:	4b3b      	ldr	r3, [pc, #236]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d101      	bne.n	8001cc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e067      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001cc6:	4b37      	ldr	r3, [pc, #220]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f023 0203 	bic.w	r2, r3, #3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	4934      	ldr	r1, [pc, #208]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cd8:	f003 f904 	bl	8004ee4 <HAL_GetTick>
 8001cdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cde:	e00a      	b.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ce0:	f003 f900 	bl	8004ee4 <HAL_GetTick>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d901      	bls.n	8001cf6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e04f      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cf6:	4b2b      	ldr	r3, [pc, #172]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	f003 020c 	and.w	r2, r3, #12
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d1eb      	bne.n	8001ce0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d08:	4b25      	ldr	r3, [pc, #148]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d20c      	bcs.n	8001d30 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d16:	4b22      	ldr	r3, [pc, #136]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	b2d2      	uxtb	r2, r2
 8001d1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d1e:	4b20      	ldr	r3, [pc, #128]	; (8001da0 <HAL_RCC_ClockConfig+0x1b8>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f003 030f 	and.w	r3, r3, #15
 8001d26:	683a      	ldr	r2, [r7, #0]
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d001      	beq.n	8001d30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001d2c:	2301      	movs	r3, #1
 8001d2e:	e032      	b.n	8001d96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	f003 0304 	and.w	r3, r3, #4
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d008      	beq.n	8001d4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d3c:	4b19      	ldr	r3, [pc, #100]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	68db      	ldr	r3, [r3, #12]
 8001d48:	4916      	ldr	r1, [pc, #88]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4a:	4313      	orrs	r3, r2
 8001d4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	f003 0308 	and.w	r3, r3, #8
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d009      	beq.n	8001d6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d5a:	4b12      	ldr	r3, [pc, #72]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d5c:	689b      	ldr	r3, [r3, #8]
 8001d5e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	490e      	ldr	r1, [pc, #56]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001d6e:	f000 f887 	bl	8001e80 <HAL_RCC_GetSysClockFreq>
 8001d72:	4601      	mov	r1, r0
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <HAL_RCC_ClockConfig+0x1bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 030f 	and.w	r3, r3, #15
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <HAL_RCC_ClockConfig+0x1c0>)
 8001d80:	5cd3      	ldrb	r3, [r2, r3]
 8001d82:	fa21 f303 	lsr.w	r3, r1, r3
 8001d86:	4a09      	ldr	r2, [pc, #36]	; (8001dac <HAL_RCC_ClockConfig+0x1c4>)
 8001d88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001d8a:	4b09      	ldr	r3, [pc, #36]	; (8001db0 <HAL_RCC_ClockConfig+0x1c8>)
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7fe ffba 	bl	8000d08 <HAL_InitTick>

  return HAL_OK;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	3710      	adds	r7, #16
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	40023c00 	.word	0x40023c00
 8001da4:	40023800 	.word	0x40023800
 8001da8:	08005688 	.word	0x08005688
 8001dac:	20000034 	.word	0x20000034
 8001db0:	20000038 	.word	0x20000038

08001db4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001db8:	4b03      	ldr	r3, [pc, #12]	; (8001dc8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dba:	681b      	ldr	r3, [r3, #0]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
 8001dc6:	bf00      	nop
 8001dc8:	20000034 	.word	0x20000034

08001dcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001dd0:	f7ff fff0 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dd4:	4601      	mov	r1, r0
 8001dd6:	4b05      	ldr	r3, [pc, #20]	; (8001dec <HAL_RCC_GetPCLK1Freq+0x20>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	0a9b      	lsrs	r3, r3, #10
 8001ddc:	f003 0307 	and.w	r3, r3, #7
 8001de0:	4a03      	ldr	r2, [pc, #12]	; (8001df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001de2:	5cd3      	ldrb	r3, [r2, r3]
 8001de4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	40023800 	.word	0x40023800
 8001df0:	08005698 	.word	0x08005698

08001df4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001df8:	f7ff ffdc 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 8001dfc:	4601      	mov	r1, r0
 8001dfe:	4b05      	ldr	r3, [pc, #20]	; (8001e14 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0b5b      	lsrs	r3, r3, #13
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4a03      	ldr	r2, [pc, #12]	; (8001e18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e0a:	5cd3      	ldrb	r3, [r2, r3]
 8001e0c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	bd80      	pop	{r7, pc}
 8001e14:	40023800 	.word	0x40023800
 8001e18:	08005698 	.word	0x08005698

08001e1c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
 8001e24:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	220f      	movs	r2, #15
 8001e2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001e2c:	4b12      	ldr	r3, [pc, #72]	; (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f003 0203 	and.w	r2, r3, #3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001e38:	4b0f      	ldr	r3, [pc, #60]	; (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e3a:	689b      	ldr	r3, [r3, #8]
 8001e3c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e46:	689b      	ldr	r3, [r3, #8]
 8001e48:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001e50:	4b09      	ldr	r3, [pc, #36]	; (8001e78 <HAL_RCC_GetClockConfig+0x5c>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	08db      	lsrs	r3, r3, #3
 8001e56:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001e5e:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <HAL_RCC_GetClockConfig+0x60>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 020f 	and.w	r2, r3, #15
 8001e66:	683b      	ldr	r3, [r7, #0]
 8001e68:	601a      	str	r2, [r3, #0]
}
 8001e6a:	bf00      	nop
 8001e6c:	370c      	adds	r7, #12
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40023800 	.word	0x40023800
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e82:	b087      	sub	sp, #28
 8001e84:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e86:	2300      	movs	r3, #0
 8001e88:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8001e92:	2300      	movs	r3, #0
 8001e94:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001e96:	2300      	movs	r3, #0
 8001e98:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001e9a:	4bc6      	ldr	r3, [pc, #792]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f003 030c 	and.w	r3, r3, #12
 8001ea2:	2b0c      	cmp	r3, #12
 8001ea4:	f200 817e 	bhi.w	80021a4 <HAL_RCC_GetSysClockFreq+0x324>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <HAL_RCC_GetSysClockFreq+0x30>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08001ee5 	.word	0x08001ee5
 8001eb4:	080021a5 	.word	0x080021a5
 8001eb8:	080021a5 	.word	0x080021a5
 8001ebc:	080021a5 	.word	0x080021a5
 8001ec0:	08001eeb 	.word	0x08001eeb
 8001ec4:	080021a5 	.word	0x080021a5
 8001ec8:	080021a5 	.word	0x080021a5
 8001ecc:	080021a5 	.word	0x080021a5
 8001ed0:	08001ef1 	.word	0x08001ef1
 8001ed4:	080021a5 	.word	0x080021a5
 8001ed8:	080021a5 	.word	0x080021a5
 8001edc:	080021a5 	.word	0x080021a5
 8001ee0:	0800204d 	.word	0x0800204d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ee4:	4bb4      	ldr	r3, [pc, #720]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x338>)
 8001ee6:	613b      	str	r3, [r7, #16]
       break;
 8001ee8:	e15f      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001eea:	4bb4      	ldr	r3, [pc, #720]	; (80021bc <HAL_RCC_GetSysClockFreq+0x33c>)
 8001eec:	613b      	str	r3, [r7, #16]
      break;
 8001eee:	e15c      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ef0:	4bb0      	ldr	r3, [pc, #704]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001ef2:	685b      	ldr	r3, [r3, #4]
 8001ef4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ef8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001efa:	4bae      	ldr	r3, [pc, #696]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001efc:	685b      	ldr	r3, [r3, #4]
 8001efe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d04a      	beq.n	8001f9c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f06:	4bab      	ldr	r3, [pc, #684]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	099b      	lsrs	r3, r3, #6
 8001f0c:	f04f 0400 	mov.w	r4, #0
 8001f10:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001f14:	f04f 0200 	mov.w	r2, #0
 8001f18:	ea03 0501 	and.w	r5, r3, r1
 8001f1c:	ea04 0602 	and.w	r6, r4, r2
 8001f20:	4629      	mov	r1, r5
 8001f22:	4632      	mov	r2, r6
 8001f24:	f04f 0300 	mov.w	r3, #0
 8001f28:	f04f 0400 	mov.w	r4, #0
 8001f2c:	0154      	lsls	r4, r2, #5
 8001f2e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001f32:	014b      	lsls	r3, r1, #5
 8001f34:	4619      	mov	r1, r3
 8001f36:	4622      	mov	r2, r4
 8001f38:	1b49      	subs	r1, r1, r5
 8001f3a:	eb62 0206 	sbc.w	r2, r2, r6
 8001f3e:	f04f 0300 	mov.w	r3, #0
 8001f42:	f04f 0400 	mov.w	r4, #0
 8001f46:	0194      	lsls	r4, r2, #6
 8001f48:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001f4c:	018b      	lsls	r3, r1, #6
 8001f4e:	1a5b      	subs	r3, r3, r1
 8001f50:	eb64 0402 	sbc.w	r4, r4, r2
 8001f54:	f04f 0100 	mov.w	r1, #0
 8001f58:	f04f 0200 	mov.w	r2, #0
 8001f5c:	00e2      	lsls	r2, r4, #3
 8001f5e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001f62:	00d9      	lsls	r1, r3, #3
 8001f64:	460b      	mov	r3, r1
 8001f66:	4614      	mov	r4, r2
 8001f68:	195b      	adds	r3, r3, r5
 8001f6a:	eb44 0406 	adc.w	r4, r4, r6
 8001f6e:	f04f 0100 	mov.w	r1, #0
 8001f72:	f04f 0200 	mov.w	r2, #0
 8001f76:	0262      	lsls	r2, r4, #9
 8001f78:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001f7c:	0259      	lsls	r1, r3, #9
 8001f7e:	460b      	mov	r3, r1
 8001f80:	4614      	mov	r4, r2
 8001f82:	4618      	mov	r0, r3
 8001f84:	4621      	mov	r1, r4
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f04f 0400 	mov.w	r4, #0
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4623      	mov	r3, r4
 8001f90:	f7fe f946 	bl	8000220 <__aeabi_uldivmod>
 8001f94:	4603      	mov	r3, r0
 8001f96:	460c      	mov	r4, r1
 8001f98:	617b      	str	r3, [r7, #20]
 8001f9a:	e049      	b.n	8002030 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f9c:	4b85      	ldr	r3, [pc, #532]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	099b      	lsrs	r3, r3, #6
 8001fa2:	f04f 0400 	mov.w	r4, #0
 8001fa6:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001faa:	f04f 0200 	mov.w	r2, #0
 8001fae:	ea03 0501 	and.w	r5, r3, r1
 8001fb2:	ea04 0602 	and.w	r6, r4, r2
 8001fb6:	4629      	mov	r1, r5
 8001fb8:	4632      	mov	r2, r6
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	f04f 0400 	mov.w	r4, #0
 8001fc2:	0154      	lsls	r4, r2, #5
 8001fc4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001fc8:	014b      	lsls	r3, r1, #5
 8001fca:	4619      	mov	r1, r3
 8001fcc:	4622      	mov	r2, r4
 8001fce:	1b49      	subs	r1, r1, r5
 8001fd0:	eb62 0206 	sbc.w	r2, r2, r6
 8001fd4:	f04f 0300 	mov.w	r3, #0
 8001fd8:	f04f 0400 	mov.w	r4, #0
 8001fdc:	0194      	lsls	r4, r2, #6
 8001fde:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001fe2:	018b      	lsls	r3, r1, #6
 8001fe4:	1a5b      	subs	r3, r3, r1
 8001fe6:	eb64 0402 	sbc.w	r4, r4, r2
 8001fea:	f04f 0100 	mov.w	r1, #0
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	00e2      	lsls	r2, r4, #3
 8001ff4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001ff8:	00d9      	lsls	r1, r3, #3
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	195b      	adds	r3, r3, r5
 8002000:	eb44 0406 	adc.w	r4, r4, r6
 8002004:	f04f 0100 	mov.w	r1, #0
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	02a2      	lsls	r2, r4, #10
 800200e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002012:	0299      	lsls	r1, r3, #10
 8002014:	460b      	mov	r3, r1
 8002016:	4614      	mov	r4, r2
 8002018:	4618      	mov	r0, r3
 800201a:	4621      	mov	r1, r4
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	f04f 0400 	mov.w	r4, #0
 8002022:	461a      	mov	r2, r3
 8002024:	4623      	mov	r3, r4
 8002026:	f7fe f8fb 	bl	8000220 <__aeabi_uldivmod>
 800202a:	4603      	mov	r3, r0
 800202c:	460c      	mov	r4, r1
 800202e:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002030:	4b60      	ldr	r3, [pc, #384]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	0c1b      	lsrs	r3, r3, #16
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	3301      	adds	r3, #1
 800203c:	005b      	lsls	r3, r3, #1
 800203e:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8002040:	697a      	ldr	r2, [r7, #20]
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	fbb2 f3f3 	udiv	r3, r2, r3
 8002048:	613b      	str	r3, [r7, #16]
      break;
 800204a:	e0ae      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800204c:	4b59      	ldr	r3, [pc, #356]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002054:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002056:	4b57      	ldr	r3, [pc, #348]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800205e:	2b00      	cmp	r3, #0
 8002060:	d04a      	beq.n	80020f8 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002062:	4b54      	ldr	r3, [pc, #336]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	099b      	lsrs	r3, r3, #6
 8002068:	f04f 0400 	mov.w	r4, #0
 800206c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002070:	f04f 0200 	mov.w	r2, #0
 8002074:	ea03 0501 	and.w	r5, r3, r1
 8002078:	ea04 0602 	and.w	r6, r4, r2
 800207c:	4629      	mov	r1, r5
 800207e:	4632      	mov	r2, r6
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	f04f 0400 	mov.w	r4, #0
 8002088:	0154      	lsls	r4, r2, #5
 800208a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800208e:	014b      	lsls	r3, r1, #5
 8002090:	4619      	mov	r1, r3
 8002092:	4622      	mov	r2, r4
 8002094:	1b49      	subs	r1, r1, r5
 8002096:	eb62 0206 	sbc.w	r2, r2, r6
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	f04f 0400 	mov.w	r4, #0
 80020a2:	0194      	lsls	r4, r2, #6
 80020a4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80020a8:	018b      	lsls	r3, r1, #6
 80020aa:	1a5b      	subs	r3, r3, r1
 80020ac:	eb64 0402 	sbc.w	r4, r4, r2
 80020b0:	f04f 0100 	mov.w	r1, #0
 80020b4:	f04f 0200 	mov.w	r2, #0
 80020b8:	00e2      	lsls	r2, r4, #3
 80020ba:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80020be:	00d9      	lsls	r1, r3, #3
 80020c0:	460b      	mov	r3, r1
 80020c2:	4614      	mov	r4, r2
 80020c4:	195b      	adds	r3, r3, r5
 80020c6:	eb44 0406 	adc.w	r4, r4, r6
 80020ca:	f04f 0100 	mov.w	r1, #0
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	0262      	lsls	r2, r4, #9
 80020d4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80020d8:	0259      	lsls	r1, r3, #9
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	4618      	mov	r0, r3
 80020e0:	4621      	mov	r1, r4
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f04f 0400 	mov.w	r4, #0
 80020e8:	461a      	mov	r2, r3
 80020ea:	4623      	mov	r3, r4
 80020ec:	f7fe f898 	bl	8000220 <__aeabi_uldivmod>
 80020f0:	4603      	mov	r3, r0
 80020f2:	460c      	mov	r4, r1
 80020f4:	617b      	str	r3, [r7, #20]
 80020f6:	e049      	b.n	800218c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80020f8:	4b2e      	ldr	r3, [pc, #184]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	099b      	lsrs	r3, r3, #6
 80020fe:	f04f 0400 	mov.w	r4, #0
 8002102:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002106:	f04f 0200 	mov.w	r2, #0
 800210a:	ea03 0501 	and.w	r5, r3, r1
 800210e:	ea04 0602 	and.w	r6, r4, r2
 8002112:	4629      	mov	r1, r5
 8002114:	4632      	mov	r2, r6
 8002116:	f04f 0300 	mov.w	r3, #0
 800211a:	f04f 0400 	mov.w	r4, #0
 800211e:	0154      	lsls	r4, r2, #5
 8002120:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002124:	014b      	lsls	r3, r1, #5
 8002126:	4619      	mov	r1, r3
 8002128:	4622      	mov	r2, r4
 800212a:	1b49      	subs	r1, r1, r5
 800212c:	eb62 0206 	sbc.w	r2, r2, r6
 8002130:	f04f 0300 	mov.w	r3, #0
 8002134:	f04f 0400 	mov.w	r4, #0
 8002138:	0194      	lsls	r4, r2, #6
 800213a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800213e:	018b      	lsls	r3, r1, #6
 8002140:	1a5b      	subs	r3, r3, r1
 8002142:	eb64 0402 	sbc.w	r4, r4, r2
 8002146:	f04f 0100 	mov.w	r1, #0
 800214a:	f04f 0200 	mov.w	r2, #0
 800214e:	00e2      	lsls	r2, r4, #3
 8002150:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002154:	00d9      	lsls	r1, r3, #3
 8002156:	460b      	mov	r3, r1
 8002158:	4614      	mov	r4, r2
 800215a:	195b      	adds	r3, r3, r5
 800215c:	eb44 0406 	adc.w	r4, r4, r6
 8002160:	f04f 0100 	mov.w	r1, #0
 8002164:	f04f 0200 	mov.w	r2, #0
 8002168:	02a2      	lsls	r2, r4, #10
 800216a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800216e:	0299      	lsls	r1, r3, #10
 8002170:	460b      	mov	r3, r1
 8002172:	4614      	mov	r4, r2
 8002174:	4618      	mov	r0, r3
 8002176:	4621      	mov	r1, r4
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	f04f 0400 	mov.w	r4, #0
 800217e:	461a      	mov	r2, r3
 8002180:	4623      	mov	r3, r4
 8002182:	f7fe f84d 	bl	8000220 <__aeabi_uldivmod>
 8002186:	4603      	mov	r3, r0
 8002188:	460c      	mov	r4, r1
 800218a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800218c:	4b09      	ldr	r3, [pc, #36]	; (80021b4 <HAL_RCC_GetSysClockFreq+0x334>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	0f1b      	lsrs	r3, r3, #28
 8002192:	f003 0307 	and.w	r3, r3, #7
 8002196:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002198:	697a      	ldr	r2, [r7, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	fbb2 f3f3 	udiv	r3, r2, r3
 80021a0:	613b      	str	r3, [r7, #16]
      break;
 80021a2:	e002      	b.n	80021aa <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80021a4:	4b04      	ldr	r3, [pc, #16]	; (80021b8 <HAL_RCC_GetSysClockFreq+0x338>)
 80021a6:	613b      	str	r3, [r7, #16]
      break;
 80021a8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021aa:	693b      	ldr	r3, [r7, #16]
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	371c      	adds	r7, #28
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	00f42400 	.word	0x00f42400
 80021bc:	007a1200 	.word	0x007a1200

080021c0 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 0301 	and.w	r3, r3, #1
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 8083 	beq.w	80022e0 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021da:	4b95      	ldr	r3, [pc, #596]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d019      	beq.n	800221a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021e6:	4b92      	ldr	r3, [pc, #584]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80021ee:	2b08      	cmp	r3, #8
 80021f0:	d106      	bne.n	8002200 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80021f2:	4b8f      	ldr	r3, [pc, #572]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80021f4:	685b      	ldr	r3, [r3, #4]
 80021f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80021fe:	d00c      	beq.n	800221a <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002200:	4b8b      	ldr	r3, [pc, #556]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002208:	2b0c      	cmp	r3, #12
 800220a:	d112      	bne.n	8002232 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800220c:	4b88      	ldr	r3, [pc, #544]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002214:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002218:	d10b      	bne.n	8002232 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800221a:	4b85      	ldr	r3, [pc, #532]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d05b      	beq.n	80022de <HAL_RCC_OscConfig+0x11e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d157      	bne.n	80022de <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 800222e:	2301      	movs	r3, #1
 8002230:	e216      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800223a:	d106      	bne.n	800224a <HAL_RCC_OscConfig+0x8a>
 800223c:	4b7c      	ldr	r3, [pc, #496]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a7b      	ldr	r2, [pc, #492]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002242:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002246:	6013      	str	r3, [r2, #0]
 8002248:	e01d      	b.n	8002286 <HAL_RCC_OscConfig+0xc6>
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002252:	d10c      	bne.n	800226e <HAL_RCC_OscConfig+0xae>
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a75      	ldr	r2, [pc, #468]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800225a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800225e:	6013      	str	r3, [r2, #0]
 8002260:	4b73      	ldr	r3, [pc, #460]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4a72      	ldr	r2, [pc, #456]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002266:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800226a:	6013      	str	r3, [r2, #0]
 800226c:	e00b      	b.n	8002286 <HAL_RCC_OscConfig+0xc6>
 800226e:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a6f      	ldr	r2, [pc, #444]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002274:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	4b6d      	ldr	r3, [pc, #436]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	4a6c      	ldr	r2, [pc, #432]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002280:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002284:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b00      	cmp	r3, #0
 800228c:	d013      	beq.n	80022b6 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800228e:	f002 fe29 	bl	8004ee4 <HAL_GetTick>
 8002292:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002294:	e008      	b.n	80022a8 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002296:	f002 fe25 	bl	8004ee4 <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	1ad3      	subs	r3, r2, r3
 80022a0:	2b64      	cmp	r3, #100	; 0x64
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e1db      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a8:	4b61      	ldr	r3, [pc, #388]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0f0      	beq.n	8002296 <HAL_RCC_OscConfig+0xd6>
 80022b4:	e014      	b.n	80022e0 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022b6:	f002 fe15 	bl	8004ee4 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022bc:	e008      	b.n	80022d0 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80022be:	f002 fe11 	bl	8004ee4 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	2b64      	cmp	r3, #100	; 0x64
 80022ca:	d901      	bls.n	80022d0 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 80022cc:	2303      	movs	r3, #3
 80022ce:	e1c7      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022d0:	4b57      	ldr	r3, [pc, #348]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d1f0      	bne.n	80022be <HAL_RCC_OscConfig+0xfe>
 80022dc:	e000      	b.n	80022e0 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022de:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f003 0302 	and.w	r3, r3, #2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d06f      	beq.n	80023cc <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80022ec:	4b50      	ldr	r3, [pc, #320]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f003 030c 	and.w	r3, r3, #12
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d017      	beq.n	8002328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80022f8:	4b4d      	ldr	r3, [pc, #308]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80022fa:	689b      	ldr	r3, [r3, #8]
 80022fc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002300:	2b08      	cmp	r3, #8
 8002302:	d105      	bne.n	8002310 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002304:	4b4a      	ldr	r3, [pc, #296]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002306:	685b      	ldr	r3, [r3, #4]
 8002308:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d00b      	beq.n	8002328 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002310:	4b47      	ldr	r3, [pc, #284]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002318:	2b0c      	cmp	r3, #12
 800231a:	d11c      	bne.n	8002356 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800231c:	4b44      	ldr	r3, [pc, #272]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002328:	4b41      	ldr	r3, [pc, #260]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_OscConfig+0x180>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	68db      	ldr	r3, [r3, #12]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d001      	beq.n	8002340 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e18f      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002340:	4b3b      	ldr	r3, [pc, #236]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	691b      	ldr	r3, [r3, #16]
 800234c:	00db      	lsls	r3, r3, #3
 800234e:	4938      	ldr	r1, [pc, #224]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002350:	4313      	orrs	r3, r2
 8002352:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002354:	e03a      	b.n	80023cc <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68db      	ldr	r3, [r3, #12]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d020      	beq.n	80023a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800235e:	4b35      	ldr	r3, [pc, #212]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 8002360:	2201      	movs	r2, #1
 8002362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f002 fdbe 	bl	8004ee4 <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800236c:	f002 fdba 	bl	8004ee4 <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e170      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b2c      	ldr	r3, [pc, #176]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b29      	ldr	r3, [pc, #164]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4925      	ldr	r1, [pc, #148]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	e015      	b.n	80023cc <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a0:	4b24      	ldr	r3, [pc, #144]	; (8002434 <HAL_RCC_OscConfig+0x274>)
 80023a2:	2200      	movs	r2, #0
 80023a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a6:	f002 fd9d 	bl	8004ee4 <HAL_GetTick>
 80023aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ac:	e008      	b.n	80023c0 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ae:	f002 fd99 	bl	8004ee4 <HAL_GetTick>
 80023b2:	4602      	mov	r2, r0
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	1ad3      	subs	r3, r2, r3
 80023b8:	2b02      	cmp	r3, #2
 80023ba:	d901      	bls.n	80023c0 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e14f      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c0:	4b1b      	ldr	r3, [pc, #108]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f003 0302 	and.w	r3, r3, #2
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d1f0      	bne.n	80023ae <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f003 0308 	and.w	r3, r3, #8
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d037      	beq.n	8002448 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	695b      	ldr	r3, [r3, #20]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d016      	beq.n	800240e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <HAL_RCC_OscConfig+0x278>)
 80023e2:	2201      	movs	r2, #1
 80023e4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023e6:	f002 fd7d 	bl	8004ee4 <HAL_GetTick>
 80023ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023ec:	e008      	b.n	8002400 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80023ee:	f002 fd79 	bl	8004ee4 <HAL_GetTick>
 80023f2:	4602      	mov	r2, r0
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	1ad3      	subs	r3, r2, r3
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d901      	bls.n	8002400 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80023fc:	2303      	movs	r3, #3
 80023fe:	e12f      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <HAL_RCC_OscConfig+0x270>)
 8002402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d0f0      	beq.n	80023ee <HAL_RCC_OscConfig+0x22e>
 800240c:	e01c      	b.n	8002448 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800240e:	4b0a      	ldr	r3, [pc, #40]	; (8002438 <HAL_RCC_OscConfig+0x278>)
 8002410:	2200      	movs	r2, #0
 8002412:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002414:	f002 fd66 	bl	8004ee4 <HAL_GetTick>
 8002418:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800241a:	e00f      	b.n	800243c <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800241c:	f002 fd62 	bl	8004ee4 <HAL_GetTick>
 8002420:	4602      	mov	r2, r0
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	1ad3      	subs	r3, r2, r3
 8002426:	2b02      	cmp	r3, #2
 8002428:	d908      	bls.n	800243c <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 800242a:	2303      	movs	r3, #3
 800242c:	e118      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
 800242e:	bf00      	nop
 8002430:	40023800 	.word	0x40023800
 8002434:	42470000 	.word	0x42470000
 8002438:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800243c:	4b8a      	ldr	r3, [pc, #552]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800243e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002440:	f003 0302 	and.w	r3, r3, #2
 8002444:	2b00      	cmp	r3, #0
 8002446:	d1e9      	bne.n	800241c <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0304 	and.w	r3, r3, #4
 8002450:	2b00      	cmp	r3, #0
 8002452:	f000 8097 	beq.w	8002584 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002456:	2300      	movs	r3, #0
 8002458:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b83      	ldr	r3, [pc, #524]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10f      	bne.n	8002486 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	2300      	movs	r3, #0
 8002468:	60fb      	str	r3, [r7, #12]
 800246a:	4b7f      	ldr	r3, [pc, #508]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a7e      	ldr	r2, [pc, #504]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b7c      	ldr	r3, [pc, #496]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002486:	4b79      	ldr	r3, [pc, #484]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002492:	4b76      	ldr	r3, [pc, #472]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a75      	ldr	r2, [pc, #468]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f002 fd21 	bl	8004ee4 <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f002 fd1d 	bl	8004ee4 <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e0d3      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024b8:	4b6c      	ldr	r3, [pc, #432]	; (800266c <HAL_RCC_OscConfig+0x4ac>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x31a>
 80024cc:	4b66      	ldr	r3, [pc, #408]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a65      	ldr	r2, [pc, #404]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e01c      	b.n	8002514 <HAL_RCC_OscConfig+0x354>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b05      	cmp	r3, #5
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x33c>
 80024e2:	4b61      	ldr	r3, [pc, #388]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a60      	ldr	r2, [pc, #384]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024e8:	f043 0304 	orr.w	r3, r3, #4
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b5e      	ldr	r3, [pc, #376]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a5d      	ldr	r2, [pc, #372]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024f4:	f043 0301 	orr.w	r3, r3, #1
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0x354>
 80024fc:	4b5a      	ldr	r3, [pc, #360]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80024fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002500:	4a59      	ldr	r2, [pc, #356]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 8002502:	f023 0301 	bic.w	r3, r3, #1
 8002506:	6713      	str	r3, [r2, #112]	; 0x70
 8002508:	4b57      	ldr	r3, [pc, #348]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800250a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800250c:	4a56      	ldr	r2, [pc, #344]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800250e:	f023 0304 	bic.w	r3, r3, #4
 8002512:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d015      	beq.n	8002548 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251c:	f002 fce2 	bl	8004ee4 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002522:	e00a      	b.n	800253a <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002524:	f002 fcde 	bl	8004ee4 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002532:	4293      	cmp	r3, r2
 8002534:	d901      	bls.n	800253a <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002536:	2303      	movs	r3, #3
 8002538:	e092      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800253a:	4b4b      	ldr	r3, [pc, #300]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800253c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d0ee      	beq.n	8002524 <HAL_RCC_OscConfig+0x364>
 8002546:	e014      	b.n	8002572 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002548:	f002 fccc 	bl	8004ee4 <HAL_GetTick>
 800254c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254e:	e00a      	b.n	8002566 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002550:	f002 fcc8 	bl	8004ee4 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e07c      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002566:	4b40      	ldr	r3, [pc, #256]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 8002568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1ee      	bne.n	8002550 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002572:	7dfb      	ldrb	r3, [r7, #23]
 8002574:	2b01      	cmp	r3, #1
 8002576:	d105      	bne.n	8002584 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002578:	4b3b      	ldr	r3, [pc, #236]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800257a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257c:	4a3a      	ldr	r2, [pc, #232]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800257e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002582:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	699b      	ldr	r3, [r3, #24]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d068      	beq.n	800265e <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800258c:	4b36      	ldr	r3, [pc, #216]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800258e:	689b      	ldr	r3, [r3, #8]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	d060      	beq.n	800265a <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	699b      	ldr	r3, [r3, #24]
 800259c:	2b02      	cmp	r3, #2
 800259e:	d145      	bne.n	800262c <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025a0:	4b33      	ldr	r3, [pc, #204]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 80025a2:	2200      	movs	r2, #0
 80025a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a6:	f002 fc9d 	bl	8004ee4 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025ae:	f002 fc99 	bl	8004ee4 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e04f      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025c0:	4b29      	ldr	r3, [pc, #164]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69da      	ldr	r2, [r3, #28]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6a1b      	ldr	r3, [r3, #32]
 80025d4:	431a      	orrs	r2, r3
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025da:	019b      	lsls	r3, r3, #6
 80025dc:	431a      	orrs	r2, r3
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025e2:	085b      	lsrs	r3, r3, #1
 80025e4:	3b01      	subs	r3, #1
 80025e6:	041b      	lsls	r3, r3, #16
 80025e8:	431a      	orrs	r2, r3
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ee:	061b      	lsls	r3, r3, #24
 80025f0:	431a      	orrs	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025f6:	071b      	lsls	r3, r3, #28
 80025f8:	491b      	ldr	r1, [pc, #108]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025fe:	4b1c      	ldr	r3, [pc, #112]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 8002600:	2201      	movs	r2, #1
 8002602:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002604:	f002 fc6e 	bl	8004ee4 <HAL_GetTick>
 8002608:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800260a:	e008      	b.n	800261e <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800260c:	f002 fc6a 	bl	8004ee4 <HAL_GetTick>
 8002610:	4602      	mov	r2, r0
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	1ad3      	subs	r3, r2, r3
 8002616:	2b02      	cmp	r3, #2
 8002618:	d901      	bls.n	800261e <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 800261a:	2303      	movs	r3, #3
 800261c:	e020      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800261e:	4b12      	ldr	r3, [pc, #72]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002626:	2b00      	cmp	r3, #0
 8002628:	d0f0      	beq.n	800260c <HAL_RCC_OscConfig+0x44c>
 800262a:	e018      	b.n	800265e <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800262c:	4b10      	ldr	r3, [pc, #64]	; (8002670 <HAL_RCC_OscConfig+0x4b0>)
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002632:	f002 fc57 	bl	8004ee4 <HAL_GetTick>
 8002636:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002638:	e008      	b.n	800264c <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800263a:	f002 fc53 	bl	8004ee4 <HAL_GetTick>
 800263e:	4602      	mov	r2, r0
 8002640:	693b      	ldr	r3, [r7, #16]
 8002642:	1ad3      	subs	r3, r2, r3
 8002644:	2b02      	cmp	r3, #2
 8002646:	d901      	bls.n	800264c <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002648:	2303      	movs	r3, #3
 800264a:	e009      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800264c:	4b06      	ldr	r3, [pc, #24]	; (8002668 <HAL_RCC_OscConfig+0x4a8>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f0      	bne.n	800263a <HAL_RCC_OscConfig+0x47a>
 8002658:	e001      	b.n	800265e <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800265a:	2301      	movs	r3, #1
 800265c:	e000      	b.n	8002660 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800265e:	2300      	movs	r3, #0
}
 8002660:	4618      	mov	r0, r3
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	40023800 	.word	0x40023800
 800266c:	40007000 	.word	0x40007000
 8002670:	42470060 	.word	0x42470060

08002674 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d101      	bne.n	8002686 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e01d      	b.n	80026c2 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800268c:	b2db      	uxtb	r3, r3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d106      	bne.n	80026a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800269a:	6878      	ldr	r0, [r7, #4]
 800269c:	f000 f815 	bl	80026ca <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2202      	movs	r2, #2
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681a      	ldr	r2, [r3, #0]
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	3304      	adds	r3, #4
 80026b0:	4619      	mov	r1, r3
 80026b2:	4610      	mov	r0, r2
 80026b4:	f000 f968 	bl	8002988 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2201      	movs	r2, #1
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3708      	adds	r7, #8
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}

080026ca <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ca:	b480      	push	{r7}
 80026cc:	b083      	sub	sp, #12
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026de:	b480      	push	{r7}
 80026e0:	b085      	sub	sp, #20
 80026e2:	af00      	add	r7, sp, #0
 80026e4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f042 0201 	orr.w	r2, r2, #1
 80026f4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	f003 0307 	and.w	r3, r3, #7
 8002700:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d007      	beq.n	8002718 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f042 0201 	orr.w	r2, r2, #1
 8002716:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002718:	2300      	movs	r3, #0
}
 800271a:	4618      	mov	r0, r3
 800271c:	3714      	adds	r7, #20
 800271e:	46bd      	mov	sp, r7
 8002720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002724:	4770      	bx	lr

08002726 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002726:	b580      	push	{r7, lr}
 8002728:	b082      	sub	sp, #8
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	691b      	ldr	r3, [r3, #16]
 8002734:	f003 0302 	and.w	r3, r3, #2
 8002738:	2b02      	cmp	r3, #2
 800273a:	d122      	bne.n	8002782 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	f003 0302 	and.w	r3, r3, #2
 8002746:	2b02      	cmp	r3, #2
 8002748:	d11b      	bne.n	8002782 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f06f 0202 	mvn.w	r2, #2
 8002752:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	699b      	ldr	r3, [r3, #24]
 8002760:	f003 0303 	and.w	r3, r3, #3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d003      	beq.n	8002770 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8ee 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 800276e:	e005      	b.n	800277c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8e0 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002776:	6878      	ldr	r0, [r7, #4]
 8002778:	f000 f8f1 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	f003 0304 	and.w	r3, r3, #4
 800278c:	2b04      	cmp	r3, #4
 800278e:	d122      	bne.n	80027d6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	68db      	ldr	r3, [r3, #12]
 8002796:	f003 0304 	and.w	r3, r3, #4
 800279a:	2b04      	cmp	r3, #4
 800279c:	d11b      	bne.n	80027d6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f06f 0204 	mvn.w	r2, #4
 80027a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2202      	movs	r2, #2
 80027ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	699b      	ldr	r3, [r3, #24]
 80027b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d003      	beq.n	80027c4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8c4 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 80027c2:	e005      	b.n	80027d0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8b6 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	f000 f8c7 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	f003 0308 	and.w	r3, r3, #8
 80027e0:	2b08      	cmp	r3, #8
 80027e2:	d122      	bne.n	800282a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68db      	ldr	r3, [r3, #12]
 80027ea:	f003 0308 	and.w	r3, r3, #8
 80027ee:	2b08      	cmp	r3, #8
 80027f0:	d11b      	bne.n	800282a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f06f 0208 	mvn.w	r2, #8
 80027fa:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2204      	movs	r2, #4
 8002800:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69db      	ldr	r3, [r3, #28]
 8002808:	f003 0303 	and.w	r3, r3, #3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d003      	beq.n	8002818 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f89a 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 8002816:	e005      	b.n	8002824 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f88c 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	f000 f89d 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	691b      	ldr	r3, [r3, #16]
 8002830:	f003 0310 	and.w	r3, r3, #16
 8002834:	2b10      	cmp	r3, #16
 8002836:	d122      	bne.n	800287e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f003 0310 	and.w	r3, r3, #16
 8002842:	2b10      	cmp	r3, #16
 8002844:	d11b      	bne.n	800287e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f06f 0210 	mvn.w	r2, #16
 800284e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2208      	movs	r2, #8
 8002854:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	69db      	ldr	r3, [r3, #28]
 800285c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002864:	6878      	ldr	r0, [r7, #4]
 8002866:	f000 f870 	bl	800294a <HAL_TIM_IC_CaptureCallback>
 800286a:	e005      	b.n	8002878 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f862 	bl	8002936 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f000 f873 	bl	800295e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2200      	movs	r2, #0
 800287c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
 8002884:	f003 0301 	and.w	r3, r3, #1
 8002888:	2b01      	cmp	r3, #1
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0301 	and.w	r3, r3, #1
 8002896:	2b01      	cmp	r3, #1
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f06f 0201 	mvn.w	r2, #1
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f7fe f955 	bl	8000b54 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b4:	2b80      	cmp	r3, #128	; 0x80
 80028b6:	d10e      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028c2:	2b80      	cmp	r3, #128	; 0x80
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f903 	bl	8002adc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028e0:	2b40      	cmp	r3, #64	; 0x40
 80028e2:	d10e      	bne.n	8002902 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ee:	2b40      	cmp	r3, #64	; 0x40
 80028f0:	d107      	bne.n	8002902 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f838 	bl	8002972 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	691b      	ldr	r3, [r3, #16]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b20      	cmp	r3, #32
 800290e:	d10e      	bne.n	800292e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0320 	and.w	r3, r3, #32
 800291a:	2b20      	cmp	r3, #32
 800291c:	d107      	bne.n	800292e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f06f 0220 	mvn.w	r2, #32
 8002926:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f000 f8cd 	bl	8002ac8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800292e:	bf00      	nop
 8002930:	3708      	adds	r7, #8
 8002932:	46bd      	mov	sp, r7
 8002934:	bd80      	pop	{r7, pc}

08002936 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002936:	b480      	push	{r7}
 8002938:	b083      	sub	sp, #12
 800293a:	af00      	add	r7, sp, #0
 800293c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800293e:	bf00      	nop
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002952:	bf00      	nop
 8002954:	370c      	adds	r7, #12
 8002956:	46bd      	mov	sp, r7
 8002958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295c:	4770      	bx	lr

0800295e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800295e:	b480      	push	{r7}
 8002960:	b083      	sub	sp, #12
 8002962:	af00      	add	r7, sp, #0
 8002964:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002966:	bf00      	nop
 8002968:	370c      	adds	r7, #12
 800296a:	46bd      	mov	sp, r7
 800296c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002970:	4770      	bx	lr

08002972 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002972:	b480      	push	{r7}
 8002974:	b083      	sub	sp, #12
 8002976:	af00      	add	r7, sp, #0
 8002978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002984:	4770      	bx	lr
	...

08002988 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	4a40      	ldr	r2, [pc, #256]	; (8002a9c <TIM_Base_SetConfig+0x114>)
 800299c:	4293      	cmp	r3, r2
 800299e:	d013      	beq.n	80029c8 <TIM_Base_SetConfig+0x40>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d00f      	beq.n	80029c8 <TIM_Base_SetConfig+0x40>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	4a3d      	ldr	r2, [pc, #244]	; (8002aa0 <TIM_Base_SetConfig+0x118>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d00b      	beq.n	80029c8 <TIM_Base_SetConfig+0x40>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	4a3c      	ldr	r2, [pc, #240]	; (8002aa4 <TIM_Base_SetConfig+0x11c>)
 80029b4:	4293      	cmp	r3, r2
 80029b6:	d007      	beq.n	80029c8 <TIM_Base_SetConfig+0x40>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	4a3b      	ldr	r2, [pc, #236]	; (8002aa8 <TIM_Base_SetConfig+0x120>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d003      	beq.n	80029c8 <TIM_Base_SetConfig+0x40>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	4a3a      	ldr	r2, [pc, #232]	; (8002aac <TIM_Base_SetConfig+0x124>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d108      	bne.n	80029da <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	68fa      	ldr	r2, [r7, #12]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	4a2f      	ldr	r2, [pc, #188]	; (8002a9c <TIM_Base_SetConfig+0x114>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d02b      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e8:	d027      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4a2c      	ldr	r2, [pc, #176]	; (8002aa0 <TIM_Base_SetConfig+0x118>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d023      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	4a2b      	ldr	r2, [pc, #172]	; (8002aa4 <TIM_Base_SetConfig+0x11c>)
 80029f6:	4293      	cmp	r3, r2
 80029f8:	d01f      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <TIM_Base_SetConfig+0x120>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d01b      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	4a29      	ldr	r2, [pc, #164]	; (8002aac <TIM_Base_SetConfig+0x124>)
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d017      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a28      	ldr	r2, [pc, #160]	; (8002ab0 <TIM_Base_SetConfig+0x128>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d013      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a27      	ldr	r2, [pc, #156]	; (8002ab4 <TIM_Base_SetConfig+0x12c>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00f      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a26      	ldr	r2, [pc, #152]	; (8002ab8 <TIM_Base_SetConfig+0x130>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00b      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a25      	ldr	r2, [pc, #148]	; (8002abc <TIM_Base_SetConfig+0x134>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d007      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a24      	ldr	r2, [pc, #144]	; (8002ac0 <TIM_Base_SetConfig+0x138>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_Base_SetConfig+0xb2>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a23      	ldr	r2, [pc, #140]	; (8002ac4 <TIM_Base_SetConfig+0x13c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d108      	bne.n	8002a4c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a42:	683b      	ldr	r3, [r7, #0]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	4313      	orrs	r3, r2
 8002a4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	695b      	ldr	r3, [r3, #20]
 8002a56:	4313      	orrs	r3, r2
 8002a58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68fa      	ldr	r2, [r7, #12]
 8002a5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	689a      	ldr	r2, [r3, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a0a      	ldr	r2, [pc, #40]	; (8002a9c <TIM_Base_SetConfig+0x114>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d003      	beq.n	8002a80 <TIM_Base_SetConfig+0xf8>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	4a0c      	ldr	r2, [pc, #48]	; (8002aac <TIM_Base_SetConfig+0x124>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d103      	bne.n	8002a88 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	691a      	ldr	r2, [r3, #16]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	615a      	str	r2, [r3, #20]
}
 8002a8e:	bf00      	nop
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40000400 	.word	0x40000400
 8002aa4:	40000800 	.word	0x40000800
 8002aa8:	40000c00 	.word	0x40000c00
 8002aac:	40010400 	.word	0x40010400
 8002ab0:	40014000 	.word	0x40014000
 8002ab4:	40014400 	.word	0x40014400
 8002ab8:	40014800 	.word	0x40014800
 8002abc:	40001800 	.word	0x40001800
 8002ac0:	40001c00 	.word	0x40001c00
 8002ac4:	40002000 	.word	0x40002000

08002ac8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad0:	bf00      	nop
 8002ad2:	370c      	adds	r7, #12
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ae4:	bf00      	nop
 8002ae6:	370c      	adds	r7, #12
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr

08002af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	b082      	sub	sp, #8
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d101      	bne.n	8002b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002afe:	2301      	movs	r3, #1
 8002b00:	e03f      	b.n	8002b82 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d106      	bne.n	8002b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f7fe f8a6 	bl	8000c68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2224      	movs	r2, #36	; 0x24
 8002b20:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	68da      	ldr	r2, [r3, #12]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002b34:	6878      	ldr	r0, [r7, #4]
 8002b36:	f000 fb4b 	bl	80031d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	691a      	ldr	r2, [r3, #16]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695a      	ldr	r2, [r3, #20]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2220      	movs	r2, #32
 8002b74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002b80:	2300      	movs	r3, #0
}
 8002b82:	4618      	mov	r0, r3
 8002b84:	3708      	adds	r7, #8
 8002b86:	46bd      	mov	sp, r7
 8002b88:	bd80      	pop	{r7, pc}

08002b8a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b088      	sub	sp, #32
 8002b8e:	af02      	add	r7, sp, #8
 8002b90:	60f8      	str	r0, [r7, #12]
 8002b92:	60b9      	str	r1, [r7, #8]
 8002b94:	603b      	str	r3, [r7, #0]
 8002b96:	4613      	mov	r3, r2
 8002b98:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	2b20      	cmp	r3, #32
 8002ba8:	f040 8083 	bne.w	8002cb2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d002      	beq.n	8002bb8 <HAL_UART_Transmit+0x2e>
 8002bb2:	88fb      	ldrh	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d101      	bne.n	8002bbc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e07b      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d101      	bne.n	8002bca <HAL_UART_Transmit+0x40>
 8002bc6:	2302      	movs	r3, #2
 8002bc8:	e074      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	2201      	movs	r2, #1
 8002bce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	2221      	movs	r2, #33	; 0x21
 8002bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002be0:	f002 f980 	bl	8004ee4 <HAL_GetTick>
 8002be4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	88fa      	ldrh	r2, [r7, #6]
 8002bea:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	88fa      	ldrh	r2, [r7, #6]
 8002bf0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002bfa:	e042      	b.n	8002c82 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c00:	b29b      	uxth	r3, r3
 8002c02:	3b01      	subs	r3, #1
 8002c04:	b29a      	uxth	r2, r3
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c12:	d122      	bne.n	8002c5a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	9300      	str	r3, [sp, #0]
 8002c18:	697b      	ldr	r3, [r7, #20]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	2180      	movs	r1, #128	; 0x80
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f96a 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e042      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002c2e:	68bb      	ldr	r3, [r7, #8]
 8002c30:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002c32:	693b      	ldr	r3, [r7, #16]
 8002c34:	881b      	ldrh	r3, [r3, #0]
 8002c36:	461a      	mov	r2, r3
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c40:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d103      	bne.n	8002c52 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	3302      	adds	r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
 8002c50:	e017      	b.n	8002c82 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	3301      	adds	r3, #1
 8002c56:	60bb      	str	r3, [r7, #8]
 8002c58:	e013      	b.n	8002c82 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	9300      	str	r3, [sp, #0]
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	2200      	movs	r2, #0
 8002c62:	2180      	movs	r1, #128	; 0x80
 8002c64:	68f8      	ldr	r0, [r7, #12]
 8002c66:	f000 f947 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d001      	beq.n	8002c74 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8002c70:	2303      	movs	r3, #3
 8002c72:	e01f      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60ba      	str	r2, [r7, #8]
 8002c7a:	781a      	ldrb	r2, [r3, #0]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002c86:	b29b      	uxth	r3, r3
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d1b7      	bne.n	8002bfc <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002c8c:	683b      	ldr	r3, [r7, #0]
 8002c8e:	9300      	str	r3, [sp, #0]
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	2200      	movs	r2, #0
 8002c94:	2140      	movs	r1, #64	; 0x40
 8002c96:	68f8      	ldr	r0, [r7, #12]
 8002c98:	f000 f92e 	bl	8002ef8 <UART_WaitOnFlagUntilTimeout>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d001      	beq.n	8002ca6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e006      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	2220      	movs	r2, #32
 8002caa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	e000      	b.n	8002cb4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002cb2:	2302      	movs	r3, #2
  }
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b088      	sub	sp, #32
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	68db      	ldr	r3, [r3, #12]
 8002cd2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d10d      	bne.n	8002d0e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	f003 0320 	and.w	r3, r3, #32
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d008      	beq.n	8002d0e <HAL_UART_IRQHandler+0x52>
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	f003 0320 	and.w	r3, r3, #32
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d003      	beq.n	8002d0e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f9e0 	bl	80030cc <UART_Receive_IT>
      return;
 8002d0c:	e0d1      	b.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002d0e:	693b      	ldr	r3, [r7, #16]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	f000 80b0 	beq.w	8002e76 <HAL_UART_IRQHandler+0x1ba>
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f003 0301 	and.w	r3, r3, #1
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d105      	bne.n	8002d2c <HAL_UART_IRQHandler+0x70>
 8002d20:	69bb      	ldr	r3, [r7, #24]
 8002d22:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	f000 80a5 	beq.w	8002e76 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	f003 0301 	and.w	r3, r3, #1
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d00a      	beq.n	8002d4c <HAL_UART_IRQHandler+0x90>
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d005      	beq.n	8002d4c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d44:	f043 0201 	orr.w	r2, r3, #1
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0304 	and.w	r3, r3, #4
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_UART_IRQHandler+0xb0>
 8002d56:	697b      	ldr	r3, [r7, #20]
 8002d58:	f003 0301 	and.w	r3, r3, #1
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d005      	beq.n	8002d6c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f003 0302 	and.w	r3, r3, #2
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d00a      	beq.n	8002d8c <HAL_UART_IRQHandler+0xd0>
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d84:	f043 0204 	orr.w	r2, r3, #4
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	f003 0308 	and.w	r3, r3, #8
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00f      	beq.n	8002db6 <HAL_UART_IRQHandler+0xfa>
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	f003 0320 	and.w	r3, r3, #32
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d104      	bne.n	8002daa <HAL_UART_IRQHandler+0xee>
 8002da0:	697b      	ldr	r3, [r7, #20]
 8002da2:	f003 0301 	and.w	r3, r3, #1
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d005      	beq.n	8002db6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dae:	f043 0208 	orr.w	r2, r3, #8
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d078      	beq.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	f003 0320 	and.w	r3, r3, #32
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d007      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	f003 0320 	and.w	r3, r3, #32
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d002      	beq.n	8002dd8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8002dd2:	6878      	ldr	r0, [r7, #4]
 8002dd4:	f000 f97a 	bl	80030cc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002de2:	2b40      	cmp	r3, #64	; 0x40
 8002de4:	bf0c      	ite	eq
 8002de6:	2301      	moveq	r3, #1
 8002de8:	2300      	movne	r3, #0
 8002dea:	b2db      	uxtb	r3, r3
 8002dec:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002df2:	f003 0308 	and.w	r3, r3, #8
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_UART_IRQHandler+0x144>
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d031      	beq.n	8002e64 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f000 f8c3 	bl	8002f8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	695b      	ldr	r3, [r3, #20]
 8002e0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e10:	2b40      	cmp	r3, #64	; 0x40
 8002e12:	d123      	bne.n	8002e5c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	695a      	ldr	r2, [r3, #20]
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002e22:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d013      	beq.n	8002e54 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e30:	4a21      	ldr	r2, [pc, #132]	; (8002eb8 <HAL_UART_IRQHandler+0x1fc>)
 8002e32:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f7fe fd07 	bl	800184c <HAL_DMA_Abort_IT>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d016      	beq.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e4e:	4610      	mov	r0, r2
 8002e50:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e52:	e00e      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f845 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e5a:	e00a      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e5c:	6878      	ldr	r0, [r7, #4]
 8002e5e:	f000 f841 	bl	8002ee4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e62:	e006      	b.n	8002e72 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e64:	6878      	ldr	r0, [r7, #4]
 8002e66:	f000 f83d 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8002e70:	e01e      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e72:	bf00      	nop
    return;
 8002e74:	e01c      	b.n	8002eb0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_UART_IRQHandler+0x1d6>
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f000 f8b0 	bl	8002ff0 <UART_Transmit_IT>
    return;
 8002e90:	e00f      	b.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d00a      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>
 8002e9c:	69bb      	ldr	r3, [r7, #24]
 8002e9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d005      	beq.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f000 f8f8 	bl	800309c <UART_EndTransmit_IT>
    return;
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8002eb0:	bf00      	nop
  }
}
 8002eb2:	3720      	adds	r7, #32
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	08002fc9 	.word	0x08002fc9

08002ebc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f08:	e02c      	b.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f10:	d028      	beq.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d007      	beq.n	8002f28 <UART_WaitOnFlagUntilTimeout+0x30>
 8002f18:	f001 ffe4 	bl	8004ee4 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	69ba      	ldr	r2, [r7, #24]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d21d      	bcs.n	8002f64 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68da      	ldr	r2, [r3, #12]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002f36:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	695a      	ldr	r2, [r3, #20]
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	2220      	movs	r2, #32
 8002f4c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	2220      	movs	r2, #32
 8002f54:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002f60:	2303      	movs	r3, #3
 8002f62:	e00f      	b.n	8002f84 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	681a      	ldr	r2, [r3, #0]
 8002f6a:	68bb      	ldr	r3, [r7, #8]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	68ba      	ldr	r2, [r7, #8]
 8002f70:	429a      	cmp	r2, r3
 8002f72:	bf0c      	ite	eq
 8002f74:	2301      	moveq	r3, #1
 8002f76:	2300      	movne	r3, #0
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	79fb      	ldrb	r3, [r7, #7]
 8002f7e:	429a      	cmp	r2, r3
 8002f80:	d0c3      	beq.n	8002f0a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3710      	adds	r7, #16
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68da      	ldr	r2, [r3, #12]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002fa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	695a      	ldr	r2, [r3, #20]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f022 0201 	bic.w	r2, r2, #1
 8002fb2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2220      	movs	r2, #32
 8002fb8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002fbc:	bf00      	nop
 8002fbe:	370c      	adds	r7, #12
 8002fc0:	46bd      	mov	sp, r7
 8002fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc6:	4770      	bx	lr

08002fc8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b084      	sub	sp, #16
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	2200      	movs	r2, #0
 8002fda:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	2200      	movs	r2, #0
 8002fe0:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002fe2:	68f8      	ldr	r0, [r7, #12]
 8002fe4:	f7ff ff7e 	bl	8002ee4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002fe8:	bf00      	nop
 8002fea:	3710      	adds	r7, #16
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b085      	sub	sp, #20
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	2b21      	cmp	r3, #33	; 0x21
 8003002:	d144      	bne.n	800308e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800300c:	d11a      	bne.n	8003044 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a1b      	ldr	r3, [r3, #32]
 8003012:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	461a      	mov	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003022:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	691b      	ldr	r3, [r3, #16]
 8003028:	2b00      	cmp	r3, #0
 800302a:	d105      	bne.n	8003038 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a1b      	ldr	r3, [r3, #32]
 8003030:	1c9a      	adds	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	621a      	str	r2, [r3, #32]
 8003036:	e00e      	b.n	8003056 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6a1b      	ldr	r3, [r3, #32]
 800303c:	1c5a      	adds	r2, r3, #1
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	621a      	str	r2, [r3, #32]
 8003042:	e008      	b.n	8003056 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	1c59      	adds	r1, r3, #1
 800304a:	687a      	ldr	r2, [r7, #4]
 800304c:	6211      	str	r1, [r2, #32]
 800304e:	781a      	ldrb	r2, [r3, #0]
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800305a:	b29b      	uxth	r3, r3
 800305c:	3b01      	subs	r3, #1
 800305e:	b29b      	uxth	r3, r3
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	4619      	mov	r1, r3
 8003064:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003066:	2b00      	cmp	r3, #0
 8003068:	d10f      	bne.n	800308a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	68da      	ldr	r2, [r3, #12]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003078:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68da      	ldr	r2, [r3, #12]
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003088:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800308a:	2300      	movs	r3, #0
 800308c:	e000      	b.n	8003090 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800308e:	2302      	movs	r3, #2
  }
}
 8003090:	4618      	mov	r0, r3
 8003092:	3714      	adds	r7, #20
 8003094:	46bd      	mov	sp, r7
 8003096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800309a:	4770      	bx	lr

0800309c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	68da      	ldr	r2, [r3, #12]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030b2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2220      	movs	r2, #32
 80030b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff fefd 	bl	8002ebc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3708      	adds	r7, #8
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}

080030cc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b084      	sub	sp, #16
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80030da:	b2db      	uxtb	r3, r3
 80030dc:	2b22      	cmp	r3, #34	; 0x22
 80030de:	d171      	bne.n	80031c4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030e8:	d123      	bne.n	8003132 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d10e      	bne.n	8003116 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	685b      	ldr	r3, [r3, #4]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003104:	b29a      	uxth	r2, r3
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800310e:	1c9a      	adds	r2, r3, #2
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	629a      	str	r2, [r3, #40]	; 0x28
 8003114:	e029      	b.n	800316a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	b29b      	uxth	r3, r3
 800311e:	b2db      	uxtb	r3, r3
 8003120:	b29a      	uxth	r2, r3
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800312a:	1c5a      	adds	r2, r3, #1
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	629a      	str	r2, [r3, #40]	; 0x28
 8003130:	e01b      	b.n	800316a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	691b      	ldr	r3, [r3, #16]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d10a      	bne.n	8003150 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	6858      	ldr	r0, [r3, #4]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003144:	1c59      	adds	r1, r3, #1
 8003146:	687a      	ldr	r2, [r7, #4]
 8003148:	6291      	str	r1, [r2, #40]	; 0x28
 800314a:	b2c2      	uxtb	r2, r0
 800314c:	701a      	strb	r2, [r3, #0]
 800314e:	e00c      	b.n	800316a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	b2da      	uxtb	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800315c:	1c58      	adds	r0, r3, #1
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	6288      	str	r0, [r1, #40]	; 0x28
 8003162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003166:	b2d2      	uxtb	r2, r2
 8003168:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800316e:	b29b      	uxth	r3, r3
 8003170:	3b01      	subs	r3, #1
 8003172:	b29b      	uxth	r3, r3
 8003174:	687a      	ldr	r2, [r7, #4]
 8003176:	4619      	mov	r1, r3
 8003178:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800317a:	2b00      	cmp	r3, #0
 800317c:	d120      	bne.n	80031c0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 0220 	bic.w	r2, r2, #32
 800318c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	68da      	ldr	r2, [r3, #12]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800319c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	695a      	ldr	r2, [r3, #20]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f022 0201 	bic.w	r2, r2, #1
 80031ac:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80031b6:	6878      	ldr	r0, [r7, #4]
 80031b8:	f7ff fe8a 	bl	8002ed0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80031bc:	2300      	movs	r3, #0
 80031be:	e002      	b.n	80031c6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80031c0:	2300      	movs	r3, #0
 80031c2:	e000      	b.n	80031c6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80031c4:	2302      	movs	r3, #2
  }
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3710      	adds	r7, #16
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
	...

080031d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80031d4:	b085      	sub	sp, #20
 80031d6:	af00      	add	r7, sp, #0
 80031d8:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	691b      	ldr	r3, [r3, #16]
 80031e0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	430a      	orrs	r2, r1
 80031ee:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	689a      	ldr	r2, [r3, #8]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	691b      	ldr	r3, [r3, #16]
 80031f8:	431a      	orrs	r2, r3
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	695b      	ldr	r3, [r3, #20]
 80031fe:	431a      	orrs	r2, r3
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	69db      	ldr	r3, [r3, #28]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	68db      	ldr	r3, [r3, #12]
 800320e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003212:	f023 030c 	bic.w	r3, r3, #12
 8003216:	687a      	ldr	r2, [r7, #4]
 8003218:	6812      	ldr	r2, [r2, #0]
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	430b      	orrs	r3, r1
 800321e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	695b      	ldr	r3, [r3, #20]
 8003226:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	430a      	orrs	r2, r1
 8003234:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	69db      	ldr	r3, [r3, #28]
 800323a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800323e:	f040 818b 	bne.w	8003558 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	4ac1      	ldr	r2, [pc, #772]	; (800354c <UART_SetConfig+0x37c>)
 8003248:	4293      	cmp	r3, r2
 800324a:	d005      	beq.n	8003258 <UART_SetConfig+0x88>
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4abf      	ldr	r2, [pc, #764]	; (8003550 <UART_SetConfig+0x380>)
 8003252:	4293      	cmp	r3, r2
 8003254:	f040 80bd 	bne.w	80033d2 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003258:	f7fe fdcc 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 800325c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	461d      	mov	r5, r3
 8003262:	f04f 0600 	mov.w	r6, #0
 8003266:	46a8      	mov	r8, r5
 8003268:	46b1      	mov	r9, r6
 800326a:	eb18 0308 	adds.w	r3, r8, r8
 800326e:	eb49 0409 	adc.w	r4, r9, r9
 8003272:	4698      	mov	r8, r3
 8003274:	46a1      	mov	r9, r4
 8003276:	eb18 0805 	adds.w	r8, r8, r5
 800327a:	eb49 0906 	adc.w	r9, r9, r6
 800327e:	f04f 0100 	mov.w	r1, #0
 8003282:	f04f 0200 	mov.w	r2, #0
 8003286:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800328a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800328e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003292:	4688      	mov	r8, r1
 8003294:	4691      	mov	r9, r2
 8003296:	eb18 0005 	adds.w	r0, r8, r5
 800329a:	eb49 0106 	adc.w	r1, r9, r6
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	461d      	mov	r5, r3
 80032a4:	f04f 0600 	mov.w	r6, #0
 80032a8:	196b      	adds	r3, r5, r5
 80032aa:	eb46 0406 	adc.w	r4, r6, r6
 80032ae:	461a      	mov	r2, r3
 80032b0:	4623      	mov	r3, r4
 80032b2:	f7fc ffb5 	bl	8000220 <__aeabi_uldivmod>
 80032b6:	4603      	mov	r3, r0
 80032b8:	460c      	mov	r4, r1
 80032ba:	461a      	mov	r2, r3
 80032bc:	4ba5      	ldr	r3, [pc, #660]	; (8003554 <UART_SetConfig+0x384>)
 80032be:	fba3 2302 	umull	r2, r3, r3, r2
 80032c2:	095b      	lsrs	r3, r3, #5
 80032c4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80032c8:	68bb      	ldr	r3, [r7, #8]
 80032ca:	461d      	mov	r5, r3
 80032cc:	f04f 0600 	mov.w	r6, #0
 80032d0:	46a9      	mov	r9, r5
 80032d2:	46b2      	mov	sl, r6
 80032d4:	eb19 0309 	adds.w	r3, r9, r9
 80032d8:	eb4a 040a 	adc.w	r4, sl, sl
 80032dc:	4699      	mov	r9, r3
 80032de:	46a2      	mov	sl, r4
 80032e0:	eb19 0905 	adds.w	r9, r9, r5
 80032e4:	eb4a 0a06 	adc.w	sl, sl, r6
 80032e8:	f04f 0100 	mov.w	r1, #0
 80032ec:	f04f 0200 	mov.w	r2, #0
 80032f0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80032f4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80032f8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80032fc:	4689      	mov	r9, r1
 80032fe:	4692      	mov	sl, r2
 8003300:	eb19 0005 	adds.w	r0, r9, r5
 8003304:	eb4a 0106 	adc.w	r1, sl, r6
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	461d      	mov	r5, r3
 800330e:	f04f 0600 	mov.w	r6, #0
 8003312:	196b      	adds	r3, r5, r5
 8003314:	eb46 0406 	adc.w	r4, r6, r6
 8003318:	461a      	mov	r2, r3
 800331a:	4623      	mov	r3, r4
 800331c:	f7fc ff80 	bl	8000220 <__aeabi_uldivmod>
 8003320:	4603      	mov	r3, r0
 8003322:	460c      	mov	r4, r1
 8003324:	461a      	mov	r2, r3
 8003326:	4b8b      	ldr	r3, [pc, #556]	; (8003554 <UART_SetConfig+0x384>)
 8003328:	fba3 1302 	umull	r1, r3, r3, r2
 800332c:	095b      	lsrs	r3, r3, #5
 800332e:	2164      	movs	r1, #100	; 0x64
 8003330:	fb01 f303 	mul.w	r3, r1, r3
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	00db      	lsls	r3, r3, #3
 8003338:	3332      	adds	r3, #50	; 0x32
 800333a:	4a86      	ldr	r2, [pc, #536]	; (8003554 <UART_SetConfig+0x384>)
 800333c:	fba2 2303 	umull	r2, r3, r2, r3
 8003340:	095b      	lsrs	r3, r3, #5
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003348:	4498      	add	r8, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	461d      	mov	r5, r3
 800334e:	f04f 0600 	mov.w	r6, #0
 8003352:	46a9      	mov	r9, r5
 8003354:	46b2      	mov	sl, r6
 8003356:	eb19 0309 	adds.w	r3, r9, r9
 800335a:	eb4a 040a 	adc.w	r4, sl, sl
 800335e:	4699      	mov	r9, r3
 8003360:	46a2      	mov	sl, r4
 8003362:	eb19 0905 	adds.w	r9, r9, r5
 8003366:	eb4a 0a06 	adc.w	sl, sl, r6
 800336a:	f04f 0100 	mov.w	r1, #0
 800336e:	f04f 0200 	mov.w	r2, #0
 8003372:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003376:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800337a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800337e:	4689      	mov	r9, r1
 8003380:	4692      	mov	sl, r2
 8003382:	eb19 0005 	adds.w	r0, r9, r5
 8003386:	eb4a 0106 	adc.w	r1, sl, r6
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	461d      	mov	r5, r3
 8003390:	f04f 0600 	mov.w	r6, #0
 8003394:	196b      	adds	r3, r5, r5
 8003396:	eb46 0406 	adc.w	r4, r6, r6
 800339a:	461a      	mov	r2, r3
 800339c:	4623      	mov	r3, r4
 800339e:	f7fc ff3f 	bl	8000220 <__aeabi_uldivmod>
 80033a2:	4603      	mov	r3, r0
 80033a4:	460c      	mov	r4, r1
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b6a      	ldr	r3, [pc, #424]	; (8003554 <UART_SetConfig+0x384>)
 80033aa:	fba3 1302 	umull	r1, r3, r3, r2
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	2164      	movs	r1, #100	; 0x64
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	1ad3      	subs	r3, r2, r3
 80033b8:	00db      	lsls	r3, r3, #3
 80033ba:	3332      	adds	r3, #50	; 0x32
 80033bc:	4a65      	ldr	r2, [pc, #404]	; (8003554 <UART_SetConfig+0x384>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	095b      	lsrs	r3, r3, #5
 80033c4:	f003 0207 	and.w	r2, r3, #7
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4442      	add	r2, r8
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	e26f      	b.n	80038b2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80033d2:	f7fe fcfb 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 80033d6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	461d      	mov	r5, r3
 80033dc:	f04f 0600 	mov.w	r6, #0
 80033e0:	46a8      	mov	r8, r5
 80033e2:	46b1      	mov	r9, r6
 80033e4:	eb18 0308 	adds.w	r3, r8, r8
 80033e8:	eb49 0409 	adc.w	r4, r9, r9
 80033ec:	4698      	mov	r8, r3
 80033ee:	46a1      	mov	r9, r4
 80033f0:	eb18 0805 	adds.w	r8, r8, r5
 80033f4:	eb49 0906 	adc.w	r9, r9, r6
 80033f8:	f04f 0100 	mov.w	r1, #0
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003404:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003408:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800340c:	4688      	mov	r8, r1
 800340e:	4691      	mov	r9, r2
 8003410:	eb18 0005 	adds.w	r0, r8, r5
 8003414:	eb49 0106 	adc.w	r1, r9, r6
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	461d      	mov	r5, r3
 800341e:	f04f 0600 	mov.w	r6, #0
 8003422:	196b      	adds	r3, r5, r5
 8003424:	eb46 0406 	adc.w	r4, r6, r6
 8003428:	461a      	mov	r2, r3
 800342a:	4623      	mov	r3, r4
 800342c:	f7fc fef8 	bl	8000220 <__aeabi_uldivmod>
 8003430:	4603      	mov	r3, r0
 8003432:	460c      	mov	r4, r1
 8003434:	461a      	mov	r2, r3
 8003436:	4b47      	ldr	r3, [pc, #284]	; (8003554 <UART_SetConfig+0x384>)
 8003438:	fba3 2302 	umull	r2, r3, r3, r2
 800343c:	095b      	lsrs	r3, r3, #5
 800343e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003442:	68bb      	ldr	r3, [r7, #8]
 8003444:	461d      	mov	r5, r3
 8003446:	f04f 0600 	mov.w	r6, #0
 800344a:	46a9      	mov	r9, r5
 800344c:	46b2      	mov	sl, r6
 800344e:	eb19 0309 	adds.w	r3, r9, r9
 8003452:	eb4a 040a 	adc.w	r4, sl, sl
 8003456:	4699      	mov	r9, r3
 8003458:	46a2      	mov	sl, r4
 800345a:	eb19 0905 	adds.w	r9, r9, r5
 800345e:	eb4a 0a06 	adc.w	sl, sl, r6
 8003462:	f04f 0100 	mov.w	r1, #0
 8003466:	f04f 0200 	mov.w	r2, #0
 800346a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800346e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003472:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003476:	4689      	mov	r9, r1
 8003478:	4692      	mov	sl, r2
 800347a:	eb19 0005 	adds.w	r0, r9, r5
 800347e:	eb4a 0106 	adc.w	r1, sl, r6
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	461d      	mov	r5, r3
 8003488:	f04f 0600 	mov.w	r6, #0
 800348c:	196b      	adds	r3, r5, r5
 800348e:	eb46 0406 	adc.w	r4, r6, r6
 8003492:	461a      	mov	r2, r3
 8003494:	4623      	mov	r3, r4
 8003496:	f7fc fec3 	bl	8000220 <__aeabi_uldivmod>
 800349a:	4603      	mov	r3, r0
 800349c:	460c      	mov	r4, r1
 800349e:	461a      	mov	r2, r3
 80034a0:	4b2c      	ldr	r3, [pc, #176]	; (8003554 <UART_SetConfig+0x384>)
 80034a2:	fba3 1302 	umull	r1, r3, r3, r2
 80034a6:	095b      	lsrs	r3, r3, #5
 80034a8:	2164      	movs	r1, #100	; 0x64
 80034aa:	fb01 f303 	mul.w	r3, r1, r3
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	00db      	lsls	r3, r3, #3
 80034b2:	3332      	adds	r3, #50	; 0x32
 80034b4:	4a27      	ldr	r2, [pc, #156]	; (8003554 <UART_SetConfig+0x384>)
 80034b6:	fba2 2303 	umull	r2, r3, r2, r3
 80034ba:	095b      	lsrs	r3, r3, #5
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80034c2:	4498      	add	r8, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	461d      	mov	r5, r3
 80034c8:	f04f 0600 	mov.w	r6, #0
 80034cc:	46a9      	mov	r9, r5
 80034ce:	46b2      	mov	sl, r6
 80034d0:	eb19 0309 	adds.w	r3, r9, r9
 80034d4:	eb4a 040a 	adc.w	r4, sl, sl
 80034d8:	4699      	mov	r9, r3
 80034da:	46a2      	mov	sl, r4
 80034dc:	eb19 0905 	adds.w	r9, r9, r5
 80034e0:	eb4a 0a06 	adc.w	sl, sl, r6
 80034e4:	f04f 0100 	mov.w	r1, #0
 80034e8:	f04f 0200 	mov.w	r2, #0
 80034ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80034f0:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80034f4:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80034f8:	4689      	mov	r9, r1
 80034fa:	4692      	mov	sl, r2
 80034fc:	eb19 0005 	adds.w	r0, r9, r5
 8003500:	eb4a 0106 	adc.w	r1, sl, r6
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	461d      	mov	r5, r3
 800350a:	f04f 0600 	mov.w	r6, #0
 800350e:	196b      	adds	r3, r5, r5
 8003510:	eb46 0406 	adc.w	r4, r6, r6
 8003514:	461a      	mov	r2, r3
 8003516:	4623      	mov	r3, r4
 8003518:	f7fc fe82 	bl	8000220 <__aeabi_uldivmod>
 800351c:	4603      	mov	r3, r0
 800351e:	460c      	mov	r4, r1
 8003520:	461a      	mov	r2, r3
 8003522:	4b0c      	ldr	r3, [pc, #48]	; (8003554 <UART_SetConfig+0x384>)
 8003524:	fba3 1302 	umull	r1, r3, r3, r2
 8003528:	095b      	lsrs	r3, r3, #5
 800352a:	2164      	movs	r1, #100	; 0x64
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	3332      	adds	r3, #50	; 0x32
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <UART_SetConfig+0x384>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	095b      	lsrs	r3, r3, #5
 800353e:	f003 0207 	and.w	r2, r3, #7
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	4442      	add	r2, r8
 8003548:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800354a:	e1b2      	b.n	80038b2 <UART_SetConfig+0x6e2>
 800354c:	40011000 	.word	0x40011000
 8003550:	40011400 	.word	0x40011400
 8003554:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4ad7      	ldr	r2, [pc, #860]	; (80038bc <UART_SetConfig+0x6ec>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d005      	beq.n	800356e <UART_SetConfig+0x39e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4ad6      	ldr	r2, [pc, #856]	; (80038c0 <UART_SetConfig+0x6f0>)
 8003568:	4293      	cmp	r3, r2
 800356a:	f040 80d1 	bne.w	8003710 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800356e:	f7fe fc41 	bl	8001df4 <HAL_RCC_GetPCLK2Freq>
 8003572:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	469a      	mov	sl, r3
 8003578:	f04f 0b00 	mov.w	fp, #0
 800357c:	46d0      	mov	r8, sl
 800357e:	46d9      	mov	r9, fp
 8003580:	eb18 0308 	adds.w	r3, r8, r8
 8003584:	eb49 0409 	adc.w	r4, r9, r9
 8003588:	4698      	mov	r8, r3
 800358a:	46a1      	mov	r9, r4
 800358c:	eb18 080a 	adds.w	r8, r8, sl
 8003590:	eb49 090b 	adc.w	r9, r9, fp
 8003594:	f04f 0100 	mov.w	r1, #0
 8003598:	f04f 0200 	mov.w	r2, #0
 800359c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80035a0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80035a4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80035a8:	4688      	mov	r8, r1
 80035aa:	4691      	mov	r9, r2
 80035ac:	eb1a 0508 	adds.w	r5, sl, r8
 80035b0:	eb4b 0609 	adc.w	r6, fp, r9
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	4619      	mov	r1, r3
 80035ba:	f04f 0200 	mov.w	r2, #0
 80035be:	f04f 0300 	mov.w	r3, #0
 80035c2:	f04f 0400 	mov.w	r4, #0
 80035c6:	0094      	lsls	r4, r2, #2
 80035c8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80035cc:	008b      	lsls	r3, r1, #2
 80035ce:	461a      	mov	r2, r3
 80035d0:	4623      	mov	r3, r4
 80035d2:	4628      	mov	r0, r5
 80035d4:	4631      	mov	r1, r6
 80035d6:	f7fc fe23 	bl	8000220 <__aeabi_uldivmod>
 80035da:	4603      	mov	r3, r0
 80035dc:	460c      	mov	r4, r1
 80035de:	461a      	mov	r2, r3
 80035e0:	4bb8      	ldr	r3, [pc, #736]	; (80038c4 <UART_SetConfig+0x6f4>)
 80035e2:	fba3 2302 	umull	r2, r3, r3, r2
 80035e6:	095b      	lsrs	r3, r3, #5
 80035e8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	469b      	mov	fp, r3
 80035f0:	f04f 0c00 	mov.w	ip, #0
 80035f4:	46d9      	mov	r9, fp
 80035f6:	46e2      	mov	sl, ip
 80035f8:	eb19 0309 	adds.w	r3, r9, r9
 80035fc:	eb4a 040a 	adc.w	r4, sl, sl
 8003600:	4699      	mov	r9, r3
 8003602:	46a2      	mov	sl, r4
 8003604:	eb19 090b 	adds.w	r9, r9, fp
 8003608:	eb4a 0a0c 	adc.w	sl, sl, ip
 800360c:	f04f 0100 	mov.w	r1, #0
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003618:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800361c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003620:	4689      	mov	r9, r1
 8003622:	4692      	mov	sl, r2
 8003624:	eb1b 0509 	adds.w	r5, fp, r9
 8003628:	eb4c 060a 	adc.w	r6, ip, sl
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	4619      	mov	r1, r3
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	f04f 0300 	mov.w	r3, #0
 800363a:	f04f 0400 	mov.w	r4, #0
 800363e:	0094      	lsls	r4, r2, #2
 8003640:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003644:	008b      	lsls	r3, r1, #2
 8003646:	461a      	mov	r2, r3
 8003648:	4623      	mov	r3, r4
 800364a:	4628      	mov	r0, r5
 800364c:	4631      	mov	r1, r6
 800364e:	f7fc fde7 	bl	8000220 <__aeabi_uldivmod>
 8003652:	4603      	mov	r3, r0
 8003654:	460c      	mov	r4, r1
 8003656:	461a      	mov	r2, r3
 8003658:	4b9a      	ldr	r3, [pc, #616]	; (80038c4 <UART_SetConfig+0x6f4>)
 800365a:	fba3 1302 	umull	r1, r3, r3, r2
 800365e:	095b      	lsrs	r3, r3, #5
 8003660:	2164      	movs	r1, #100	; 0x64
 8003662:	fb01 f303 	mul.w	r3, r1, r3
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	011b      	lsls	r3, r3, #4
 800366a:	3332      	adds	r3, #50	; 0x32
 800366c:	4a95      	ldr	r2, [pc, #596]	; (80038c4 <UART_SetConfig+0x6f4>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	095b      	lsrs	r3, r3, #5
 8003674:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003678:	4498      	add	r8, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	469b      	mov	fp, r3
 800367e:	f04f 0c00 	mov.w	ip, #0
 8003682:	46d9      	mov	r9, fp
 8003684:	46e2      	mov	sl, ip
 8003686:	eb19 0309 	adds.w	r3, r9, r9
 800368a:	eb4a 040a 	adc.w	r4, sl, sl
 800368e:	4699      	mov	r9, r3
 8003690:	46a2      	mov	sl, r4
 8003692:	eb19 090b 	adds.w	r9, r9, fp
 8003696:	eb4a 0a0c 	adc.w	sl, sl, ip
 800369a:	f04f 0100 	mov.w	r1, #0
 800369e:	f04f 0200 	mov.w	r2, #0
 80036a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80036aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80036ae:	4689      	mov	r9, r1
 80036b0:	4692      	mov	sl, r2
 80036b2:	eb1b 0509 	adds.w	r5, fp, r9
 80036b6:	eb4c 060a 	adc.w	r6, ip, sl
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	685b      	ldr	r3, [r3, #4]
 80036be:	4619      	mov	r1, r3
 80036c0:	f04f 0200 	mov.w	r2, #0
 80036c4:	f04f 0300 	mov.w	r3, #0
 80036c8:	f04f 0400 	mov.w	r4, #0
 80036cc:	0094      	lsls	r4, r2, #2
 80036ce:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80036d2:	008b      	lsls	r3, r1, #2
 80036d4:	461a      	mov	r2, r3
 80036d6:	4623      	mov	r3, r4
 80036d8:	4628      	mov	r0, r5
 80036da:	4631      	mov	r1, r6
 80036dc:	f7fc fda0 	bl	8000220 <__aeabi_uldivmod>
 80036e0:	4603      	mov	r3, r0
 80036e2:	460c      	mov	r4, r1
 80036e4:	461a      	mov	r2, r3
 80036e6:	4b77      	ldr	r3, [pc, #476]	; (80038c4 <UART_SetConfig+0x6f4>)
 80036e8:	fba3 1302 	umull	r1, r3, r3, r2
 80036ec:	095b      	lsrs	r3, r3, #5
 80036ee:	2164      	movs	r1, #100	; 0x64
 80036f0:	fb01 f303 	mul.w	r3, r1, r3
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	3332      	adds	r3, #50	; 0x32
 80036fa:	4a72      	ldr	r2, [pc, #456]	; (80038c4 <UART_SetConfig+0x6f4>)
 80036fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003700:	095b      	lsrs	r3, r3, #5
 8003702:	f003 020f 	and.w	r2, r3, #15
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	4442      	add	r2, r8
 800370c:	609a      	str	r2, [r3, #8]
 800370e:	e0d0      	b.n	80038b2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003710:	f7fe fb5c 	bl	8001dcc <HAL_RCC_GetPCLK1Freq>
 8003714:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003716:	68bb      	ldr	r3, [r7, #8]
 8003718:	469a      	mov	sl, r3
 800371a:	f04f 0b00 	mov.w	fp, #0
 800371e:	46d0      	mov	r8, sl
 8003720:	46d9      	mov	r9, fp
 8003722:	eb18 0308 	adds.w	r3, r8, r8
 8003726:	eb49 0409 	adc.w	r4, r9, r9
 800372a:	4698      	mov	r8, r3
 800372c:	46a1      	mov	r9, r4
 800372e:	eb18 080a 	adds.w	r8, r8, sl
 8003732:	eb49 090b 	adc.w	r9, r9, fp
 8003736:	f04f 0100 	mov.w	r1, #0
 800373a:	f04f 0200 	mov.w	r2, #0
 800373e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003742:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003746:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800374a:	4688      	mov	r8, r1
 800374c:	4691      	mov	r9, r2
 800374e:	eb1a 0508 	adds.w	r5, sl, r8
 8003752:	eb4b 0609 	adc.w	r6, fp, r9
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	4619      	mov	r1, r3
 800375c:	f04f 0200 	mov.w	r2, #0
 8003760:	f04f 0300 	mov.w	r3, #0
 8003764:	f04f 0400 	mov.w	r4, #0
 8003768:	0094      	lsls	r4, r2, #2
 800376a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800376e:	008b      	lsls	r3, r1, #2
 8003770:	461a      	mov	r2, r3
 8003772:	4623      	mov	r3, r4
 8003774:	4628      	mov	r0, r5
 8003776:	4631      	mov	r1, r6
 8003778:	f7fc fd52 	bl	8000220 <__aeabi_uldivmod>
 800377c:	4603      	mov	r3, r0
 800377e:	460c      	mov	r4, r1
 8003780:	461a      	mov	r2, r3
 8003782:	4b50      	ldr	r3, [pc, #320]	; (80038c4 <UART_SetConfig+0x6f4>)
 8003784:	fba3 2302 	umull	r2, r3, r3, r2
 8003788:	095b      	lsrs	r3, r3, #5
 800378a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	469b      	mov	fp, r3
 8003792:	f04f 0c00 	mov.w	ip, #0
 8003796:	46d9      	mov	r9, fp
 8003798:	46e2      	mov	sl, ip
 800379a:	eb19 0309 	adds.w	r3, r9, r9
 800379e:	eb4a 040a 	adc.w	r4, sl, sl
 80037a2:	4699      	mov	r9, r3
 80037a4:	46a2      	mov	sl, r4
 80037a6:	eb19 090b 	adds.w	r9, r9, fp
 80037aa:	eb4a 0a0c 	adc.w	sl, sl, ip
 80037ae:	f04f 0100 	mov.w	r1, #0
 80037b2:	f04f 0200 	mov.w	r2, #0
 80037b6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037ba:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80037be:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80037c2:	4689      	mov	r9, r1
 80037c4:	4692      	mov	sl, r2
 80037c6:	eb1b 0509 	adds.w	r5, fp, r9
 80037ca:	eb4c 060a 	adc.w	r6, ip, sl
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4619      	mov	r1, r3
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	f04f 0300 	mov.w	r3, #0
 80037dc:	f04f 0400 	mov.w	r4, #0
 80037e0:	0094      	lsls	r4, r2, #2
 80037e2:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80037e6:	008b      	lsls	r3, r1, #2
 80037e8:	461a      	mov	r2, r3
 80037ea:	4623      	mov	r3, r4
 80037ec:	4628      	mov	r0, r5
 80037ee:	4631      	mov	r1, r6
 80037f0:	f7fc fd16 	bl	8000220 <__aeabi_uldivmod>
 80037f4:	4603      	mov	r3, r0
 80037f6:	460c      	mov	r4, r1
 80037f8:	461a      	mov	r2, r3
 80037fa:	4b32      	ldr	r3, [pc, #200]	; (80038c4 <UART_SetConfig+0x6f4>)
 80037fc:	fba3 1302 	umull	r1, r3, r3, r2
 8003800:	095b      	lsrs	r3, r3, #5
 8003802:	2164      	movs	r1, #100	; 0x64
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	011b      	lsls	r3, r3, #4
 800380c:	3332      	adds	r3, #50	; 0x32
 800380e:	4a2d      	ldr	r2, [pc, #180]	; (80038c4 <UART_SetConfig+0x6f4>)
 8003810:	fba2 2303 	umull	r2, r3, r2, r3
 8003814:	095b      	lsrs	r3, r3, #5
 8003816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381a:	4498      	add	r8, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	469b      	mov	fp, r3
 8003820:	f04f 0c00 	mov.w	ip, #0
 8003824:	46d9      	mov	r9, fp
 8003826:	46e2      	mov	sl, ip
 8003828:	eb19 0309 	adds.w	r3, r9, r9
 800382c:	eb4a 040a 	adc.w	r4, sl, sl
 8003830:	4699      	mov	r9, r3
 8003832:	46a2      	mov	sl, r4
 8003834:	eb19 090b 	adds.w	r9, r9, fp
 8003838:	eb4a 0a0c 	adc.w	sl, sl, ip
 800383c:	f04f 0100 	mov.w	r1, #0
 8003840:	f04f 0200 	mov.w	r2, #0
 8003844:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003848:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800384c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003850:	4689      	mov	r9, r1
 8003852:	4692      	mov	sl, r2
 8003854:	eb1b 0509 	adds.w	r5, fp, r9
 8003858:	eb4c 060a 	adc.w	r6, ip, sl
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	685b      	ldr	r3, [r3, #4]
 8003860:	4619      	mov	r1, r3
 8003862:	f04f 0200 	mov.w	r2, #0
 8003866:	f04f 0300 	mov.w	r3, #0
 800386a:	f04f 0400 	mov.w	r4, #0
 800386e:	0094      	lsls	r4, r2, #2
 8003870:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003874:	008b      	lsls	r3, r1, #2
 8003876:	461a      	mov	r2, r3
 8003878:	4623      	mov	r3, r4
 800387a:	4628      	mov	r0, r5
 800387c:	4631      	mov	r1, r6
 800387e:	f7fc fccf 	bl	8000220 <__aeabi_uldivmod>
 8003882:	4603      	mov	r3, r0
 8003884:	460c      	mov	r4, r1
 8003886:	461a      	mov	r2, r3
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <UART_SetConfig+0x6f4>)
 800388a:	fba3 1302 	umull	r1, r3, r3, r2
 800388e:	095b      	lsrs	r3, r3, #5
 8003890:	2164      	movs	r1, #100	; 0x64
 8003892:	fb01 f303 	mul.w	r3, r1, r3
 8003896:	1ad3      	subs	r3, r2, r3
 8003898:	011b      	lsls	r3, r3, #4
 800389a:	3332      	adds	r3, #50	; 0x32
 800389c:	4a09      	ldr	r2, [pc, #36]	; (80038c4 <UART_SetConfig+0x6f4>)
 800389e:	fba2 2303 	umull	r2, r3, r2, r3
 80038a2:	095b      	lsrs	r3, r3, #5
 80038a4:	f003 020f 	and.w	r2, r3, #15
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4442      	add	r2, r8
 80038ae:	609a      	str	r2, [r3, #8]
}
 80038b0:	e7ff      	b.n	80038b2 <UART_SetConfig+0x6e2>
 80038b2:	bf00      	nop
 80038b4:	3714      	adds	r7, #20
 80038b6:	46bd      	mov	sp, r7
 80038b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80038bc:	40011000 	.word	0x40011000
 80038c0:	40011400 	.word	0x40011400
 80038c4:	51eb851f 	.word	0x51eb851f

080038c8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038c8:	b480      	push	{r7}
 80038ca:	b085      	sub	sp, #20
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	4603      	mov	r3, r0
 80038d0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038d6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80038da:	2b84      	cmp	r3, #132	; 0x84
 80038dc:	d005      	beq.n	80038ea <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80038de:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	4413      	add	r3, r2
 80038e6:	3303      	adds	r3, #3
 80038e8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038ea:	68fb      	ldr	r3, [r7, #12]
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80038fc:	f000 fad2 	bl	8003ea4 <vTaskStartScheduler>
  
  return osOK;
 8003900:	2300      	movs	r3, #0
}
 8003902:	4618      	mov	r0, r3
 8003904:	bd80      	pop	{r7, pc}

08003906 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003906:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003908:	b089      	sub	sp, #36	; 0x24
 800390a:	af04      	add	r7, sp, #16
 800390c:	6078      	str	r0, [r7, #4]
 800390e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d020      	beq.n	800395a <osThreadCreate+0x54>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	699b      	ldr	r3, [r3, #24]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d01c      	beq.n	800395a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685c      	ldr	r4, [r3, #4]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681d      	ldr	r5, [r3, #0]
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	691e      	ldr	r6, [r3, #16]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003932:	4618      	mov	r0, r3
 8003934:	f7ff ffc8 	bl	80038c8 <makeFreeRtosPriority>
 8003938:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	695b      	ldr	r3, [r3, #20]
 800393e:	687a      	ldr	r2, [r7, #4]
 8003940:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003942:	9202      	str	r2, [sp, #8]
 8003944:	9301      	str	r3, [sp, #4]
 8003946:	9100      	str	r1, [sp, #0]
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	4632      	mov	r2, r6
 800394c:	4629      	mov	r1, r5
 800394e:	4620      	mov	r0, r4
 8003950:	f000 f8ed 	bl	8003b2e <xTaskCreateStatic>
 8003954:	4603      	mov	r3, r0
 8003956:	60fb      	str	r3, [r7, #12]
 8003958:	e01c      	b.n	8003994 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685c      	ldr	r4, [r3, #4]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003966:	b29e      	uxth	r6, r3
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f7ff ffaa 	bl	80038c8 <makeFreeRtosPriority>
 8003974:	4602      	mov	r2, r0
 8003976:	f107 030c 	add.w	r3, r7, #12
 800397a:	9301      	str	r3, [sp, #4]
 800397c:	9200      	str	r2, [sp, #0]
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	4632      	mov	r2, r6
 8003982:	4629      	mov	r1, r5
 8003984:	4620      	mov	r0, r4
 8003986:	f000 f92b 	bl	8003be0 <xTaskCreate>
 800398a:	4603      	mov	r3, r0
 800398c:	2b01      	cmp	r3, #1
 800398e:	d001      	beq.n	8003994 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003990:	2300      	movs	r3, #0
 8003992:	e000      	b.n	8003996 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003994:	68fb      	ldr	r3, [r7, #12]
}
 8003996:	4618      	mov	r0, r3
 8003998:	3714      	adds	r7, #20
 800399a:	46bd      	mov	sp, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800399e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800399e:	b580      	push	{r7, lr}
 80039a0:	b084      	sub	sp, #16
 80039a2:	af00      	add	r7, sp, #0
 80039a4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d001      	beq.n	80039b4 <osDelay+0x16>
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	e000      	b.n	80039b6 <osDelay+0x18>
 80039b4:	2301      	movs	r3, #1
 80039b6:	4618      	mov	r0, r3
 80039b8:	f000 fa40 	bl	8003e3c <vTaskDelay>
  
  return osOK;
 80039bc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 80039be:	4618      	mov	r0, r3
 80039c0:	3710      	adds	r7, #16
 80039c2:	46bd      	mov	sp, r7
 80039c4:	bd80      	pop	{r7, pc}

080039c6 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80039c6:	b480      	push	{r7}
 80039c8:	b083      	sub	sp, #12
 80039ca:	af00      	add	r7, sp, #0
 80039cc:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f103 0208 	add.w	r2, r3, #8
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	f04f 32ff 	mov.w	r2, #4294967295
 80039de:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f103 0208 	add.w	r2, r3, #8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	f103 0208 	add.w	r2, r3, #8
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2200      	movs	r2, #0
 80039f8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039fa:	bf00      	nop
 80039fc:	370c      	adds	r7, #12
 80039fe:	46bd      	mov	sp, r7
 8003a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a04:	4770      	bx	lr

08003a06 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003a06:	b480      	push	{r7}
 8003a08:	b083      	sub	sp, #12
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	2200      	movs	r2, #0
 8003a12:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003a14:	bf00      	nop
 8003a16:	370c      	adds	r7, #12
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1e:	4770      	bx	lr

08003a20 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	68fa      	ldr	r2, [r7, #12]
 8003a34:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	689a      	ldr	r2, [r3, #8]
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	683a      	ldr	r2, [r7, #0]
 8003a44:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	1c5a      	adds	r2, r3, #1
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	601a      	str	r2, [r3, #0]
}
 8003a5c:	bf00      	nop
 8003a5e:	3714      	adds	r7, #20
 8003a60:	46bd      	mov	sp, r7
 8003a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a66:	4770      	bx	lr

08003a68 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b085      	sub	sp, #20
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
 8003a70:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a7e:	d103      	bne.n	8003a88 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	691b      	ldr	r3, [r3, #16]
 8003a84:	60fb      	str	r3, [r7, #12]
 8003a86:	e00c      	b.n	8003aa2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	3308      	adds	r3, #8
 8003a8c:	60fb      	str	r3, [r7, #12]
 8003a8e:	e002      	b.n	8003a96 <vListInsert+0x2e>
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	60fb      	str	r3, [r7, #12]
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68ba      	ldr	r2, [r7, #8]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d2f6      	bcs.n	8003a90 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	685a      	ldr	r2, [r3, #4]
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	683a      	ldr	r2, [r7, #0]
 8003ab0:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003abe:	683b      	ldr	r3, [r7, #0]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	1c5a      	adds	r2, r3, #1
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	601a      	str	r2, [r3, #0]
}
 8003ace:	bf00      	nop
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003ada:	b480      	push	{r7}
 8003adc:	b085      	sub	sp, #20
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	691b      	ldr	r3, [r3, #16]
 8003ae6:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	689b      	ldr	r3, [r3, #8]
 8003af6:	687a      	ldr	r2, [r7, #4]
 8003af8:	6852      	ldr	r2, [r2, #4]
 8003afa:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	687a      	ldr	r2, [r7, #4]
 8003b02:	429a      	cmp	r2, r3
 8003b04:	d103      	bne.n	8003b0e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	689a      	ldr	r2, [r3, #8]
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2200      	movs	r2, #0
 8003b12:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	1e5a      	subs	r2, r3, #1
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr

08003b2e <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003b2e:	b580      	push	{r7, lr}
 8003b30:	b08e      	sub	sp, #56	; 0x38
 8003b32:	af04      	add	r7, sp, #16
 8003b34:	60f8      	str	r0, [r7, #12]
 8003b36:	60b9      	str	r1, [r7, #8]
 8003b38:	607a      	str	r2, [r7, #4]
 8003b3a:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d109      	bne.n	8003b56 <xTaskCreateStatic+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b46:	f383 8811 	msr	BASEPRI, r3
 8003b4a:	f3bf 8f6f 	isb	sy
 8003b4e:	f3bf 8f4f 	dsb	sy
 8003b52:	623b      	str	r3, [r7, #32]
 8003b54:	e7fe      	b.n	8003b54 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8003b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d109      	bne.n	8003b70 <xTaskCreateStatic+0x42>
 8003b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b60:	f383 8811 	msr	BASEPRI, r3
 8003b64:	f3bf 8f6f 	isb	sy
 8003b68:	f3bf 8f4f 	dsb	sy
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	e7fe      	b.n	8003b6e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003b70:	2354      	movs	r3, #84	; 0x54
 8003b72:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003b74:	693b      	ldr	r3, [r7, #16]
 8003b76:	2b54      	cmp	r3, #84	; 0x54
 8003b78:	d009      	beq.n	8003b8e <xTaskCreateStatic+0x60>
 8003b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b7e:	f383 8811 	msr	BASEPRI, r3
 8003b82:	f3bf 8f6f 	isb	sy
 8003b86:	f3bf 8f4f 	dsb	sy
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	e7fe      	b.n	8003b8c <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d01e      	beq.n	8003bd2 <xTaskCreateStatic+0xa4>
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d01b      	beq.n	8003bd2 <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003b9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b9c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ba2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003bac:	2300      	movs	r3, #0
 8003bae:	9303      	str	r3, [sp, #12]
 8003bb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bb2:	9302      	str	r3, [sp, #8]
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	9301      	str	r3, [sp, #4]
 8003bba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bbc:	9300      	str	r3, [sp, #0]
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	687a      	ldr	r2, [r7, #4]
 8003bc2:	68b9      	ldr	r1, [r7, #8]
 8003bc4:	68f8      	ldr	r0, [r7, #12]
 8003bc6:	f000 f850 	bl	8003c6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003bca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003bcc:	f000 f8cc 	bl	8003d68 <prvAddNewTaskToReadyList>
 8003bd0:	e001      	b.n	8003bd6 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003bd6:	697b      	ldr	r3, [r7, #20]
	}
 8003bd8:	4618      	mov	r0, r3
 8003bda:	3728      	adds	r7, #40	; 0x28
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	bd80      	pop	{r7, pc}

08003be0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08c      	sub	sp, #48	; 0x30
 8003be4:	af04      	add	r7, sp, #16
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	603b      	str	r3, [r7, #0]
 8003bec:	4613      	mov	r3, r2
 8003bee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bf0:	88fb      	ldrh	r3, [r7, #6]
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f000 feb5 	bl	8004964 <pvPortMalloc>
 8003bfa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00e      	beq.n	8003c20 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003c02:	2054      	movs	r0, #84	; 0x54
 8003c04:	f000 feae 	bl	8004964 <pvPortMalloc>
 8003c08:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d003      	beq.n	8003c18 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	697a      	ldr	r2, [r7, #20]
 8003c14:	631a      	str	r2, [r3, #48]	; 0x30
 8003c16:	e005      	b.n	8003c24 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003c18:	6978      	ldr	r0, [r7, #20]
 8003c1a:	f000 ff65 	bl	8004ae8 <vPortFree>
 8003c1e:	e001      	b.n	8003c24 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003c20:	2300      	movs	r3, #0
 8003c22:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003c24:	69fb      	ldr	r3, [r7, #28]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d017      	beq.n	8003c5a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003c32:	88fa      	ldrh	r2, [r7, #6]
 8003c34:	2300      	movs	r3, #0
 8003c36:	9303      	str	r3, [sp, #12]
 8003c38:	69fb      	ldr	r3, [r7, #28]
 8003c3a:	9302      	str	r3, [sp, #8]
 8003c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c3e:	9301      	str	r3, [sp, #4]
 8003c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c42:	9300      	str	r3, [sp, #0]
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68b9      	ldr	r1, [r7, #8]
 8003c48:	68f8      	ldr	r0, [r7, #12]
 8003c4a:	f000 f80e 	bl	8003c6a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003c4e:	69f8      	ldr	r0, [r7, #28]
 8003c50:	f000 f88a 	bl	8003d68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003c54:	2301      	movs	r3, #1
 8003c56:	61bb      	str	r3, [r7, #24]
 8003c58:	e002      	b.n	8003c60 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003c5a:	f04f 33ff 	mov.w	r3, #4294967295
 8003c5e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003c60:	69bb      	ldr	r3, [r7, #24]
	}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3720      	adds	r7, #32
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}

08003c6a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003c6a:	b580      	push	{r7, lr}
 8003c6c:	b088      	sub	sp, #32
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	60f8      	str	r0, [r7, #12]
 8003c72:	60b9      	str	r1, [r7, #8]
 8003c74:	607a      	str	r2, [r7, #4]
 8003c76:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8003c78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003c82:	3b01      	subs	r3, #1
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8003c8a:	69bb      	ldr	r3, [r7, #24]
 8003c8c:	f023 0307 	bic.w	r3, r3, #7
 8003c90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003c92:	69bb      	ldr	r3, [r7, #24]
 8003c94:	f003 0307 	and.w	r3, r3, #7
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d009      	beq.n	8003cb0 <prvInitialiseNewTask+0x46>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	617b      	str	r3, [r7, #20]
 8003cae:	e7fe      	b.n	8003cae <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	61fb      	str	r3, [r7, #28]
 8003cb4:	e012      	b.n	8003cdc <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003cb6:	68ba      	ldr	r2, [r7, #8]
 8003cb8:	69fb      	ldr	r3, [r7, #28]
 8003cba:	4413      	add	r3, r2
 8003cbc:	7819      	ldrb	r1, [r3, #0]
 8003cbe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003cc0:	69fb      	ldr	r3, [r7, #28]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3334      	adds	r3, #52	; 0x34
 8003cc6:	460a      	mov	r2, r1
 8003cc8:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	4413      	add	r3, r2
 8003cd0:	781b      	ldrb	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d006      	beq.n	8003ce4 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003cd6:	69fb      	ldr	r3, [r7, #28]
 8003cd8:	3301      	adds	r3, #1
 8003cda:	61fb      	str	r3, [r7, #28]
 8003cdc:	69fb      	ldr	r3, [r7, #28]
 8003cde:	2b0f      	cmp	r3, #15
 8003ce0:	d9e9      	bls.n	8003cb6 <prvInitialiseNewTask+0x4c>
 8003ce2:	e000      	b.n	8003ce6 <prvInitialiseNewTask+0x7c>
		{
			break;
 8003ce4:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ce8:	2200      	movs	r2, #0
 8003cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003cee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf0:	2b06      	cmp	r3, #6
 8003cf2:	d901      	bls.n	8003cf8 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003cf4:	2306      	movs	r3, #6
 8003cf6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003cf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cfa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003cfc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003d02:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8003d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d06:	2200      	movs	r2, #0
 8003d08:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d0c:	3304      	adds	r3, #4
 8003d0e:	4618      	mov	r0, r3
 8003d10:	f7ff fe79 	bl	8003a06 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003d14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d16:	3318      	adds	r3, #24
 8003d18:	4618      	mov	r0, r3
 8003d1a:	f7ff fe74 	bl	8003a06 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003d1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d22:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d26:	f1c3 0207 	rsb	r2, r3, #7
 8003d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d2c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d32:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003d34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d36:	2200      	movs	r2, #0
 8003d38:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003d42:	683a      	ldr	r2, [r7, #0]
 8003d44:	68f9      	ldr	r1, [r7, #12]
 8003d46:	69b8      	ldr	r0, [r7, #24]
 8003d48:	f000 fc08 	bl	800455c <pxPortInitialiseStack>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d50:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8003d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d002      	beq.n	8003d5e <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d5c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003d5e:	bf00      	nop
 8003d60:	3720      	adds	r7, #32
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b082      	sub	sp, #8
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003d70:	f000 fd1c 	bl	80047ac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003d74:	4b2a      	ldr	r3, [pc, #168]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3301      	adds	r3, #1
 8003d7a:	4a29      	ldr	r2, [pc, #164]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d109      	bne.n	8003d9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003d86:	4a27      	ldr	r2, [pc, #156]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <prvAddNewTaskToReadyList+0xb8>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	2b01      	cmp	r3, #1
 8003d92:	d110      	bne.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003d94:	f000 fabc 	bl	8004310 <prvInitialiseTaskLists>
 8003d98:	e00d      	b.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003d9a:	4b23      	ldr	r3, [pc, #140]	; (8003e28 <prvAddNewTaskToReadyList+0xc0>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d109      	bne.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d802      	bhi.n	8003db6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003db0:	4a1c      	ldr	r2, [pc, #112]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003db6:	4b1d      	ldr	r3, [pc, #116]	; (8003e2c <prvAddNewTaskToReadyList+0xc4>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	3301      	adds	r3, #1
 8003dbc:	4a1b      	ldr	r2, [pc, #108]	; (8003e2c <prvAddNewTaskToReadyList+0xc4>)
 8003dbe:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc4:	2201      	movs	r2, #1
 8003dc6:	409a      	lsls	r2, r3
 8003dc8:	4b19      	ldr	r3, [pc, #100]	; (8003e30 <prvAddNewTaskToReadyList+0xc8>)
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	4a18      	ldr	r2, [pc, #96]	; (8003e30 <prvAddNewTaskToReadyList+0xc8>)
 8003dd0:	6013      	str	r3, [r2, #0]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	009b      	lsls	r3, r3, #2
 8003dda:	4413      	add	r3, r2
 8003ddc:	009b      	lsls	r3, r3, #2
 8003dde:	4a15      	ldr	r2, [pc, #84]	; (8003e34 <prvAddNewTaskToReadyList+0xcc>)
 8003de0:	441a      	add	r2, r3
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	3304      	adds	r3, #4
 8003de6:	4619      	mov	r1, r3
 8003de8:	4610      	mov	r0, r2
 8003dea:	f7ff fe19 	bl	8003a20 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003dee:	f000 fd0b 	bl	8004808 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003df2:	4b0d      	ldr	r3, [pc, #52]	; (8003e28 <prvAddNewTaskToReadyList+0xc0>)
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d00e      	beq.n	8003e18 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003dfa:	4b0a      	ldr	r3, [pc, #40]	; (8003e24 <prvAddNewTaskToReadyList+0xbc>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d207      	bcs.n	8003e18 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003e08:	4b0b      	ldr	r3, [pc, #44]	; (8003e38 <prvAddNewTaskToReadyList+0xd0>)
 8003e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	f3bf 8f4f 	dsb	sy
 8003e14:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003e18:	bf00      	nop
 8003e1a:	3708      	adds	r7, #8
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	200003b4 	.word	0x200003b4
 8003e24:	200002b4 	.word	0x200002b4
 8003e28:	200003c0 	.word	0x200003c0
 8003e2c:	200003d0 	.word	0x200003d0
 8003e30:	200003bc 	.word	0x200003bc
 8003e34:	200002b8 	.word	0x200002b8
 8003e38:	e000ed04 	.word	0xe000ed04

08003e3c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b084      	sub	sp, #16
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003e44:	2300      	movs	r3, #0
 8003e46:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d016      	beq.n	8003e7c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003e4e:	4b13      	ldr	r3, [pc, #76]	; (8003e9c <vTaskDelay+0x60>)
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d009      	beq.n	8003e6a <vTaskDelay+0x2e>
 8003e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e5a:	f383 8811 	msr	BASEPRI, r3
 8003e5e:	f3bf 8f6f 	isb	sy
 8003e62:	f3bf 8f4f 	dsb	sy
 8003e66:	60bb      	str	r3, [r7, #8]
 8003e68:	e7fe      	b.n	8003e68 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8003e6a:	f000 f879 	bl	8003f60 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003e6e:	2100      	movs	r1, #0
 8003e70:	6878      	ldr	r0, [r7, #4]
 8003e72:	f000 fb0d 	bl	8004490 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003e76:	f000 f881 	bl	8003f7c <xTaskResumeAll>
 8003e7a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d107      	bne.n	8003e92 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8003e82:	4b07      	ldr	r3, [pc, #28]	; (8003ea0 <vTaskDelay+0x64>)
 8003e84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e88:	601a      	str	r2, [r3, #0]
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e92:	bf00      	nop
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200003dc 	.word	0x200003dc
 8003ea0:	e000ed04 	.word	0xe000ed04

08003ea4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b08a      	sub	sp, #40	; 0x28
 8003ea8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003eae:	2300      	movs	r3, #0
 8003eb0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003eb2:	463a      	mov	r2, r7
 8003eb4:	1d39      	adds	r1, r7, #4
 8003eb6:	f107 0308 	add.w	r3, r7, #8
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb30 	bl	8000520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003ec0:	6839      	ldr	r1, [r7, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	9202      	str	r2, [sp, #8]
 8003ec8:	9301      	str	r3, [sp, #4]
 8003eca:	2300      	movs	r3, #0
 8003ecc:	9300      	str	r3, [sp, #0]
 8003ece:	2300      	movs	r3, #0
 8003ed0:	460a      	mov	r2, r1
 8003ed2:	491d      	ldr	r1, [pc, #116]	; (8003f48 <vTaskStartScheduler+0xa4>)
 8003ed4:	481d      	ldr	r0, [pc, #116]	; (8003f4c <vTaskStartScheduler+0xa8>)
 8003ed6:	f7ff fe2a 	bl	8003b2e <xTaskCreateStatic>
 8003eda:	4602      	mov	r2, r0
 8003edc:	4b1c      	ldr	r3, [pc, #112]	; (8003f50 <vTaskStartScheduler+0xac>)
 8003ede:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003ee0:	4b1b      	ldr	r3, [pc, #108]	; (8003f50 <vTaskStartScheduler+0xac>)
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d002      	beq.n	8003eee <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e001      	b.n	8003ef2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d115      	bne.n	8003f24 <vTaskStartScheduler+0x80>
 8003ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003efc:	f383 8811 	msr	BASEPRI, r3
 8003f00:	f3bf 8f6f 	isb	sy
 8003f04:	f3bf 8f4f 	dsb	sy
 8003f08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003f0a:	4b12      	ldr	r3, [pc, #72]	; (8003f54 <vTaskStartScheduler+0xb0>)
 8003f0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003f10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003f12:	4b11      	ldr	r3, [pc, #68]	; (8003f58 <vTaskStartScheduler+0xb4>)
 8003f14:	2201      	movs	r2, #1
 8003f16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8003f18:	4b10      	ldr	r3, [pc, #64]	; (8003f5c <vTaskStartScheduler+0xb8>)
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003f1e:	f000 fba7 	bl	8004670 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003f22:	e00d      	b.n	8003f40 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f2a:	d109      	bne.n	8003f40 <vTaskStartScheduler+0x9c>
 8003f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f30:	f383 8811 	msr	BASEPRI, r3
 8003f34:	f3bf 8f6f 	isb	sy
 8003f38:	f3bf 8f4f 	dsb	sy
 8003f3c:	60fb      	str	r3, [r7, #12]
 8003f3e:	e7fe      	b.n	8003f3e <vTaskStartScheduler+0x9a>
}
 8003f40:	bf00      	nop
 8003f42:	3718      	adds	r7, #24
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	0800567c 	.word	0x0800567c
 8003f4c:	080042e1 	.word	0x080042e1
 8003f50:	200003d8 	.word	0x200003d8
 8003f54:	200003d4 	.word	0x200003d4
 8003f58:	200003c0 	.word	0x200003c0
 8003f5c:	200003b8 	.word	0x200003b8

08003f60 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003f60:	b480      	push	{r7}
 8003f62:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8003f64:	4b04      	ldr	r3, [pc, #16]	; (8003f78 <vTaskSuspendAll+0x18>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	3301      	adds	r3, #1
 8003f6a:	4a03      	ldr	r2, [pc, #12]	; (8003f78 <vTaskSuspendAll+0x18>)
 8003f6c:	6013      	str	r3, [r2, #0]
}
 8003f6e:	bf00      	nop
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr
 8003f78:	200003dc 	.word	0x200003dc

08003f7c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8003f82:	2300      	movs	r3, #0
 8003f84:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003f8a:	4b41      	ldr	r3, [pc, #260]	; (8004090 <xTaskResumeAll+0x114>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d109      	bne.n	8003fa6 <xTaskResumeAll+0x2a>
 8003f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f96:	f383 8811 	msr	BASEPRI, r3
 8003f9a:	f3bf 8f6f 	isb	sy
 8003f9e:	f3bf 8f4f 	dsb	sy
 8003fa2:	603b      	str	r3, [r7, #0]
 8003fa4:	e7fe      	b.n	8003fa4 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003fa6:	f000 fc01 	bl	80047ac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003faa:	4b39      	ldr	r3, [pc, #228]	; (8004090 <xTaskResumeAll+0x114>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	3b01      	subs	r3, #1
 8003fb0:	4a37      	ldr	r2, [pc, #220]	; (8004090 <xTaskResumeAll+0x114>)
 8003fb2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fb4:	4b36      	ldr	r3, [pc, #216]	; (8004090 <xTaskResumeAll+0x114>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d161      	bne.n	8004080 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003fbc:	4b35      	ldr	r3, [pc, #212]	; (8004094 <xTaskResumeAll+0x118>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05d      	beq.n	8004080 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003fc4:	e02e      	b.n	8004024 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003fc6:	4b34      	ldr	r3, [pc, #208]	; (8004098 <xTaskResumeAll+0x11c>)
 8003fc8:	68db      	ldr	r3, [r3, #12]
 8003fca:	68db      	ldr	r3, [r3, #12]
 8003fcc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	3318      	adds	r3, #24
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	f7ff fd81 	bl	8003ada <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	3304      	adds	r3, #4
 8003fdc:	4618      	mov	r0, r3
 8003fde:	f7ff fd7c 	bl	8003ada <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	409a      	lsls	r2, r3
 8003fea:	4b2c      	ldr	r3, [pc, #176]	; (800409c <xTaskResumeAll+0x120>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	4a2a      	ldr	r2, [pc, #168]	; (800409c <xTaskResumeAll+0x120>)
 8003ff2:	6013      	str	r3, [r2, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	009b      	lsls	r3, r3, #2
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4a27      	ldr	r2, [pc, #156]	; (80040a0 <xTaskResumeAll+0x124>)
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	3304      	adds	r3, #4
 8004008:	4619      	mov	r1, r3
 800400a:	4610      	mov	r0, r2
 800400c:	f7ff fd08 	bl	8003a20 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004014:	4b23      	ldr	r3, [pc, #140]	; (80040a4 <xTaskResumeAll+0x128>)
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800401a:	429a      	cmp	r2, r3
 800401c:	d302      	bcc.n	8004024 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 800401e:	4b22      	ldr	r3, [pc, #136]	; (80040a8 <xTaskResumeAll+0x12c>)
 8004020:	2201      	movs	r2, #1
 8004022:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004024:	4b1c      	ldr	r3, [pc, #112]	; (8004098 <xTaskResumeAll+0x11c>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d1cc      	bne.n	8003fc6 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004032:	f000 fa07 	bl	8004444 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004036:	4b1d      	ldr	r3, [pc, #116]	; (80040ac <xTaskResumeAll+0x130>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d010      	beq.n	8004064 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004042:	f000 f837 	bl	80040b4 <xTaskIncrementTick>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d002      	beq.n	8004052 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 800404c:	4b16      	ldr	r3, [pc, #88]	; (80040a8 <xTaskResumeAll+0x12c>)
 800404e:	2201      	movs	r2, #1
 8004050:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	3b01      	subs	r3, #1
 8004056:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d1f1      	bne.n	8004042 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800405e:	4b13      	ldr	r3, [pc, #76]	; (80040ac <xTaskResumeAll+0x130>)
 8004060:	2200      	movs	r2, #0
 8004062:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004064:	4b10      	ldr	r3, [pc, #64]	; (80040a8 <xTaskResumeAll+0x12c>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d009      	beq.n	8004080 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800406c:	2301      	movs	r3, #1
 800406e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004070:	4b0f      	ldr	r3, [pc, #60]	; (80040b0 <xTaskResumeAll+0x134>)
 8004072:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004076:	601a      	str	r2, [r3, #0]
 8004078:	f3bf 8f4f 	dsb	sy
 800407c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004080:	f000 fbc2 	bl	8004808 <vPortExitCritical>

	return xAlreadyYielded;
 8004084:	68bb      	ldr	r3, [r7, #8]
}
 8004086:	4618      	mov	r0, r3
 8004088:	3710      	adds	r7, #16
 800408a:	46bd      	mov	sp, r7
 800408c:	bd80      	pop	{r7, pc}
 800408e:	bf00      	nop
 8004090:	200003dc 	.word	0x200003dc
 8004094:	200003b4 	.word	0x200003b4
 8004098:	20000374 	.word	0x20000374
 800409c:	200003bc 	.word	0x200003bc
 80040a0:	200002b8 	.word	0x200002b8
 80040a4:	200002b4 	.word	0x200002b4
 80040a8:	200003c8 	.word	0x200003c8
 80040ac:	200003c4 	.word	0x200003c4
 80040b0:	e000ed04 	.word	0xe000ed04

080040b4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80040ba:	2300      	movs	r3, #0
 80040bc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040be:	4b50      	ldr	r3, [pc, #320]	; (8004200 <xTaskIncrementTick+0x14c>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	f040 808c 	bne.w	80041e0 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80040c8:	4b4e      	ldr	r3, [pc, #312]	; (8004204 <xTaskIncrementTick+0x150>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	3301      	adds	r3, #1
 80040ce:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80040d0:	4a4c      	ldr	r2, [pc, #304]	; (8004204 <xTaskIncrementTick+0x150>)
 80040d2:	693b      	ldr	r3, [r7, #16]
 80040d4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d11f      	bne.n	800411c <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80040dc:	4b4a      	ldr	r3, [pc, #296]	; (8004208 <xTaskIncrementTick+0x154>)
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d009      	beq.n	80040fa <xTaskIncrementTick+0x46>
 80040e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040ea:	f383 8811 	msr	BASEPRI, r3
 80040ee:	f3bf 8f6f 	isb	sy
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	e7fe      	b.n	80040f8 <xTaskIncrementTick+0x44>
 80040fa:	4b43      	ldr	r3, [pc, #268]	; (8004208 <xTaskIncrementTick+0x154>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	60fb      	str	r3, [r7, #12]
 8004100:	4b42      	ldr	r3, [pc, #264]	; (800420c <xTaskIncrementTick+0x158>)
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a40      	ldr	r2, [pc, #256]	; (8004208 <xTaskIncrementTick+0x154>)
 8004106:	6013      	str	r3, [r2, #0]
 8004108:	4a40      	ldr	r2, [pc, #256]	; (800420c <xTaskIncrementTick+0x158>)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6013      	str	r3, [r2, #0]
 800410e:	4b40      	ldr	r3, [pc, #256]	; (8004210 <xTaskIncrementTick+0x15c>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a3e      	ldr	r2, [pc, #248]	; (8004210 <xTaskIncrementTick+0x15c>)
 8004116:	6013      	str	r3, [r2, #0]
 8004118:	f000 f994 	bl	8004444 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800411c:	4b3d      	ldr	r3, [pc, #244]	; (8004214 <xTaskIncrementTick+0x160>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	693a      	ldr	r2, [r7, #16]
 8004122:	429a      	cmp	r2, r3
 8004124:	d34d      	bcc.n	80041c2 <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004126:	4b38      	ldr	r3, [pc, #224]	; (8004208 <xTaskIncrementTick+0x154>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d101      	bne.n	8004134 <xTaskIncrementTick+0x80>
 8004130:	2301      	movs	r3, #1
 8004132:	e000      	b.n	8004136 <xTaskIncrementTick+0x82>
 8004134:	2300      	movs	r3, #0
 8004136:	2b00      	cmp	r3, #0
 8004138:	d004      	beq.n	8004144 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800413a:	4b36      	ldr	r3, [pc, #216]	; (8004214 <xTaskIncrementTick+0x160>)
 800413c:	f04f 32ff 	mov.w	r2, #4294967295
 8004140:	601a      	str	r2, [r3, #0]
					break;
 8004142:	e03e      	b.n	80041c2 <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004144:	4b30      	ldr	r3, [pc, #192]	; (8004208 <xTaskIncrementTick+0x154>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	429a      	cmp	r2, r3
 800415a:	d203      	bcs.n	8004164 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800415c:	4a2d      	ldr	r2, [pc, #180]	; (8004214 <xTaskIncrementTick+0x160>)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6013      	str	r3, [r2, #0]
						break;
 8004162:	e02e      	b.n	80041c2 <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	3304      	adds	r3, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff fcb6 	bl	8003ada <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004172:	2b00      	cmp	r3, #0
 8004174:	d004      	beq.n	8004180 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3318      	adds	r3, #24
 800417a:	4618      	mov	r0, r3
 800417c:	f7ff fcad 	bl	8003ada <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004180:	68bb      	ldr	r3, [r7, #8]
 8004182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004184:	2201      	movs	r2, #1
 8004186:	409a      	lsls	r2, r3
 8004188:	4b23      	ldr	r3, [pc, #140]	; (8004218 <xTaskIncrementTick+0x164>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4313      	orrs	r3, r2
 800418e:	4a22      	ldr	r2, [pc, #136]	; (8004218 <xTaskIncrementTick+0x164>)
 8004190:	6013      	str	r3, [r2, #0]
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004196:	4613      	mov	r3, r2
 8004198:	009b      	lsls	r3, r3, #2
 800419a:	4413      	add	r3, r2
 800419c:	009b      	lsls	r3, r3, #2
 800419e:	4a1f      	ldr	r2, [pc, #124]	; (800421c <xTaskIncrementTick+0x168>)
 80041a0:	441a      	add	r2, r3
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	3304      	adds	r3, #4
 80041a6:	4619      	mov	r1, r3
 80041a8:	4610      	mov	r0, r2
 80041aa:	f7ff fc39 	bl	8003a20 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041b2:	4b1b      	ldr	r3, [pc, #108]	; (8004220 <xTaskIncrementTick+0x16c>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b8:	429a      	cmp	r2, r3
 80041ba:	d3b4      	bcc.n	8004126 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80041bc:	2301      	movs	r3, #1
 80041be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80041c0:	e7b1      	b.n	8004126 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80041c2:	4b17      	ldr	r3, [pc, #92]	; (8004220 <xTaskIncrementTick+0x16c>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041c8:	4914      	ldr	r1, [pc, #80]	; (800421c <xTaskIncrementTick+0x168>)
 80041ca:	4613      	mov	r3, r2
 80041cc:	009b      	lsls	r3, r3, #2
 80041ce:	4413      	add	r3, r2
 80041d0:	009b      	lsls	r3, r3, #2
 80041d2:	440b      	add	r3, r1
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	2b01      	cmp	r3, #1
 80041d8:	d907      	bls.n	80041ea <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80041da:	2301      	movs	r3, #1
 80041dc:	617b      	str	r3, [r7, #20]
 80041de:	e004      	b.n	80041ea <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80041e0:	4b10      	ldr	r3, [pc, #64]	; (8004224 <xTaskIncrementTick+0x170>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	3301      	adds	r3, #1
 80041e6:	4a0f      	ldr	r2, [pc, #60]	; (8004224 <xTaskIncrementTick+0x170>)
 80041e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80041ea:	4b0f      	ldr	r3, [pc, #60]	; (8004228 <xTaskIncrementTick+0x174>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d001      	beq.n	80041f6 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80041f2:	2301      	movs	r3, #1
 80041f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80041f6:	697b      	ldr	r3, [r7, #20]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	200003dc 	.word	0x200003dc
 8004204:	200003b8 	.word	0x200003b8
 8004208:	2000036c 	.word	0x2000036c
 800420c:	20000370 	.word	0x20000370
 8004210:	200003cc 	.word	0x200003cc
 8004214:	200003d4 	.word	0x200003d4
 8004218:	200003bc 	.word	0x200003bc
 800421c:	200002b8 	.word	0x200002b8
 8004220:	200002b4 	.word	0x200002b4
 8004224:	200003c4 	.word	0x200003c4
 8004228:	200003c8 	.word	0x200003c8

0800422c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800422c:	b480      	push	{r7}
 800422e:	b087      	sub	sp, #28
 8004230:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <vTaskSwitchContext+0xa0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d003      	beq.n	8004242 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800423a:	4b25      	ldr	r3, [pc, #148]	; (80042d0 <vTaskSwitchContext+0xa4>)
 800423c:	2201      	movs	r2, #1
 800423e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004240:	e03e      	b.n	80042c0 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8004242:	4b23      	ldr	r3, [pc, #140]	; (80042d0 <vTaskSwitchContext+0xa4>)
 8004244:	2200      	movs	r2, #0
 8004246:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004248:	4b22      	ldr	r3, [pc, #136]	; (80042d4 <vTaskSwitchContext+0xa8>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	fab3 f383 	clz	r3, r3
 8004254:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8004256:	7afb      	ldrb	r3, [r7, #11]
 8004258:	f1c3 031f 	rsb	r3, r3, #31
 800425c:	617b      	str	r3, [r7, #20]
 800425e:	491e      	ldr	r1, [pc, #120]	; (80042d8 <vTaskSwitchContext+0xac>)
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	4613      	mov	r3, r2
 8004264:	009b      	lsls	r3, r3, #2
 8004266:	4413      	add	r3, r2
 8004268:	009b      	lsls	r3, r3, #2
 800426a:	440b      	add	r3, r1
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d109      	bne.n	8004286 <vTaskSwitchContext+0x5a>
	__asm volatile
 8004272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004276:	f383 8811 	msr	BASEPRI, r3
 800427a:	f3bf 8f6f 	isb	sy
 800427e:	f3bf 8f4f 	dsb	sy
 8004282:	607b      	str	r3, [r7, #4]
 8004284:	e7fe      	b.n	8004284 <vTaskSwitchContext+0x58>
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4613      	mov	r3, r2
 800428a:	009b      	lsls	r3, r3, #2
 800428c:	4413      	add	r3, r2
 800428e:	009b      	lsls	r3, r3, #2
 8004290:	4a11      	ldr	r2, [pc, #68]	; (80042d8 <vTaskSwitchContext+0xac>)
 8004292:	4413      	add	r3, r2
 8004294:	613b      	str	r3, [r7, #16]
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	685b      	ldr	r3, [r3, #4]
 800429a:	685a      	ldr	r2, [r3, #4]
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	605a      	str	r2, [r3, #4]
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	3308      	adds	r3, #8
 80042a8:	429a      	cmp	r2, r3
 80042aa:	d104      	bne.n	80042b6 <vTaskSwitchContext+0x8a>
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	68db      	ldr	r3, [r3, #12]
 80042bc:	4a07      	ldr	r2, [pc, #28]	; (80042dc <vTaskSwitchContext+0xb0>)
 80042be:	6013      	str	r3, [r2, #0]
}
 80042c0:	bf00      	nop
 80042c2:	371c      	adds	r7, #28
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr
 80042cc:	200003dc 	.word	0x200003dc
 80042d0:	200003c8 	.word	0x200003c8
 80042d4:	200003bc 	.word	0x200003bc
 80042d8:	200002b8 	.word	0x200002b8
 80042dc:	200002b4 	.word	0x200002b4

080042e0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80042e8:	f000 f852 	bl	8004390 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80042ec:	4b06      	ldr	r3, [pc, #24]	; (8004308 <prvIdleTask+0x28>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	2b01      	cmp	r3, #1
 80042f2:	d9f9      	bls.n	80042e8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80042f4:	4b05      	ldr	r3, [pc, #20]	; (800430c <prvIdleTask+0x2c>)
 80042f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042fa:	601a      	str	r2, [r3, #0]
 80042fc:	f3bf 8f4f 	dsb	sy
 8004300:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004304:	e7f0      	b.n	80042e8 <prvIdleTask+0x8>
 8004306:	bf00      	nop
 8004308:	200002b8 	.word	0x200002b8
 800430c:	e000ed04 	.word	0xe000ed04

08004310 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b082      	sub	sp, #8
 8004314:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004316:	2300      	movs	r3, #0
 8004318:	607b      	str	r3, [r7, #4]
 800431a:	e00c      	b.n	8004336 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	4613      	mov	r3, r2
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	4413      	add	r3, r2
 8004324:	009b      	lsls	r3, r3, #2
 8004326:	4a12      	ldr	r2, [pc, #72]	; (8004370 <prvInitialiseTaskLists+0x60>)
 8004328:	4413      	add	r3, r2
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff fb4b 	bl	80039c6 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	3301      	adds	r3, #1
 8004334:	607b      	str	r3, [r7, #4]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2b06      	cmp	r3, #6
 800433a:	d9ef      	bls.n	800431c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800433c:	480d      	ldr	r0, [pc, #52]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800433e:	f7ff fb42 	bl	80039c6 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004342:	480d      	ldr	r0, [pc, #52]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004344:	f7ff fb3f 	bl	80039c6 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004348:	480c      	ldr	r0, [pc, #48]	; (800437c <prvInitialiseTaskLists+0x6c>)
 800434a:	f7ff fb3c 	bl	80039c6 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800434e:	480c      	ldr	r0, [pc, #48]	; (8004380 <prvInitialiseTaskLists+0x70>)
 8004350:	f7ff fb39 	bl	80039c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004354:	480b      	ldr	r0, [pc, #44]	; (8004384 <prvInitialiseTaskLists+0x74>)
 8004356:	f7ff fb36 	bl	80039c6 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800435a:	4b0b      	ldr	r3, [pc, #44]	; (8004388 <prvInitialiseTaskLists+0x78>)
 800435c:	4a05      	ldr	r2, [pc, #20]	; (8004374 <prvInitialiseTaskLists+0x64>)
 800435e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004360:	4b0a      	ldr	r3, [pc, #40]	; (800438c <prvInitialiseTaskLists+0x7c>)
 8004362:	4a05      	ldr	r2, [pc, #20]	; (8004378 <prvInitialiseTaskLists+0x68>)
 8004364:	601a      	str	r2, [r3, #0]
}
 8004366:	bf00      	nop
 8004368:	3708      	adds	r7, #8
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	200002b8 	.word	0x200002b8
 8004374:	20000344 	.word	0x20000344
 8004378:	20000358 	.word	0x20000358
 800437c:	20000374 	.word	0x20000374
 8004380:	20000388 	.word	0x20000388
 8004384:	200003a0 	.word	0x200003a0
 8004388:	2000036c 	.word	0x2000036c
 800438c:	20000370 	.word	0x20000370

08004390 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004390:	b580      	push	{r7, lr}
 8004392:	b082      	sub	sp, #8
 8004394:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004396:	e019      	b.n	80043cc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004398:	f000 fa08 	bl	80047ac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 800439c:	4b0f      	ldr	r3, [pc, #60]	; (80043dc <prvCheckTasksWaitingTermination+0x4c>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	3304      	adds	r3, #4
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7ff fb96 	bl	8003ada <uxListRemove>
				--uxCurrentNumberOfTasks;
 80043ae:	4b0c      	ldr	r3, [pc, #48]	; (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3b01      	subs	r3, #1
 80043b4:	4a0a      	ldr	r2, [pc, #40]	; (80043e0 <prvCheckTasksWaitingTermination+0x50>)
 80043b6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80043b8:	4b0a      	ldr	r3, [pc, #40]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	3b01      	subs	r3, #1
 80043be:	4a09      	ldr	r2, [pc, #36]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043c0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80043c2:	f000 fa21 	bl	8004808 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f80e 	bl	80043e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043cc:	4b05      	ldr	r3, [pc, #20]	; (80043e4 <prvCheckTasksWaitingTermination+0x54>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d1e1      	bne.n	8004398 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80043d4:	bf00      	nop
 80043d6:	3708      	adds	r7, #8
 80043d8:	46bd      	mov	sp, r7
 80043da:	bd80      	pop	{r7, pc}
 80043dc:	20000388 	.word	0x20000388
 80043e0:	200003b4 	.word	0x200003b4
 80043e4:	2000039c 	.word	0x2000039c

080043e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	b084      	sub	sp, #16
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d108      	bne.n	800440c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	4618      	mov	r0, r3
 8004400:	f000 fb72 	bl	8004ae8 <vPortFree>
				vPortFree( pxTCB );
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f000 fb6f 	bl	8004ae8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800440a:	e017      	b.n	800443c <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004412:	2b01      	cmp	r3, #1
 8004414:	d103      	bne.n	800441e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004416:	6878      	ldr	r0, [r7, #4]
 8004418:	f000 fb66 	bl	8004ae8 <vPortFree>
	}
 800441c:	e00e      	b.n	800443c <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004424:	2b02      	cmp	r3, #2
 8004426:	d009      	beq.n	800443c <prvDeleteTCB+0x54>
 8004428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800442c:	f383 8811 	msr	BASEPRI, r3
 8004430:	f3bf 8f6f 	isb	sy
 8004434:	f3bf 8f4f 	dsb	sy
 8004438:	60fb      	str	r3, [r7, #12]
 800443a:	e7fe      	b.n	800443a <prvDeleteTCB+0x52>
	}
 800443c:	bf00      	nop
 800443e:	3710      	adds	r7, #16
 8004440:	46bd      	mov	sp, r7
 8004442:	bd80      	pop	{r7, pc}

08004444 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004444:	b480      	push	{r7}
 8004446:	b083      	sub	sp, #12
 8004448:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800444a:	4b0f      	ldr	r3, [pc, #60]	; (8004488 <prvResetNextTaskUnblockTime+0x44>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d101      	bne.n	8004458 <prvResetNextTaskUnblockTime+0x14>
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <prvResetNextTaskUnblockTime+0x16>
 8004458:	2300      	movs	r3, #0
 800445a:	2b00      	cmp	r3, #0
 800445c:	d004      	beq.n	8004468 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800445e:	4b0b      	ldr	r3, [pc, #44]	; (800448c <prvResetNextTaskUnblockTime+0x48>)
 8004460:	f04f 32ff 	mov.w	r2, #4294967295
 8004464:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004466:	e008      	b.n	800447a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004468:	4b07      	ldr	r3, [pc, #28]	; (8004488 <prvResetNextTaskUnblockTime+0x44>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	68db      	ldr	r3, [r3, #12]
 8004470:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	4a05      	ldr	r2, [pc, #20]	; (800448c <prvResetNextTaskUnblockTime+0x48>)
 8004478:	6013      	str	r3, [r2, #0]
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr
 8004486:	bf00      	nop
 8004488:	2000036c 	.word	0x2000036c
 800448c:	200003d4 	.word	0x200003d4

08004490 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b084      	sub	sp, #16
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800449a:	4b29      	ldr	r3, [pc, #164]	; (8004540 <prvAddCurrentTaskToDelayedList+0xb0>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80044a0:	4b28      	ldr	r3, [pc, #160]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	3304      	adds	r3, #4
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7ff fb17 	bl	8003ada <uxListRemove>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10b      	bne.n	80044ca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80044b2:	4b24      	ldr	r3, [pc, #144]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	2201      	movs	r2, #1
 80044ba:	fa02 f303 	lsl.w	r3, r2, r3
 80044be:	43da      	mvns	r2, r3
 80044c0:	4b21      	ldr	r3, [pc, #132]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4013      	ands	r3, r2
 80044c6:	4a20      	ldr	r2, [pc, #128]	; (8004548 <prvAddCurrentTaskToDelayedList+0xb8>)
 80044c8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044d0:	d10a      	bne.n	80044e8 <prvAddCurrentTaskToDelayedList+0x58>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d007      	beq.n	80044e8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044d8:	4b1a      	ldr	r3, [pc, #104]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	3304      	adds	r3, #4
 80044de:	4619      	mov	r1, r3
 80044e0:	481a      	ldr	r0, [pc, #104]	; (800454c <prvAddCurrentTaskToDelayedList+0xbc>)
 80044e2:	f7ff fa9d 	bl	8003a20 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044e6:	e026      	b.n	8004536 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044e8:	68fa      	ldr	r2, [r7, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4413      	add	r3, r2
 80044ee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044f0:	4b14      	ldr	r3, [pc, #80]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	68ba      	ldr	r2, [r7, #8]
 80044f6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044f8:	68ba      	ldr	r2, [r7, #8]
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d209      	bcs.n	8004514 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004500:	4b13      	ldr	r3, [pc, #76]	; (8004550 <prvAddCurrentTaskToDelayedList+0xc0>)
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	3304      	adds	r3, #4
 800450a:	4619      	mov	r1, r3
 800450c:	4610      	mov	r0, r2
 800450e:	f7ff faab 	bl	8003a68 <vListInsert>
}
 8004512:	e010      	b.n	8004536 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004514:	4b0f      	ldr	r3, [pc, #60]	; (8004554 <prvAddCurrentTaskToDelayedList+0xc4>)
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <prvAddCurrentTaskToDelayedList+0xb4>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	3304      	adds	r3, #4
 800451e:	4619      	mov	r1, r3
 8004520:	4610      	mov	r0, r2
 8004522:	f7ff faa1 	bl	8003a68 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004526:	4b0c      	ldr	r3, [pc, #48]	; (8004558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	429a      	cmp	r2, r3
 800452e:	d202      	bcs.n	8004536 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8004530:	4a09      	ldr	r2, [pc, #36]	; (8004558 <prvAddCurrentTaskToDelayedList+0xc8>)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6013      	str	r3, [r2, #0]
}
 8004536:	bf00      	nop
 8004538:	3710      	adds	r7, #16
 800453a:	46bd      	mov	sp, r7
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	200003b8 	.word	0x200003b8
 8004544:	200002b4 	.word	0x200002b4
 8004548:	200003bc 	.word	0x200003bc
 800454c:	200003a0 	.word	0x200003a0
 8004550:	20000370 	.word	0x20000370
 8004554:	2000036c 	.word	0x2000036c
 8004558:	200003d4 	.word	0x200003d4

0800455c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800455c:	b480      	push	{r7}
 800455e:	b085      	sub	sp, #20
 8004560:	af00      	add	r7, sp, #0
 8004562:	60f8      	str	r0, [r7, #12]
 8004564:	60b9      	str	r1, [r7, #8]
 8004566:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	3b04      	subs	r3, #4
 800456c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004574:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	3b04      	subs	r3, #4
 800457a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	f023 0201 	bic.w	r2, r3, #1
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	3b04      	subs	r3, #4
 800458a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800458c:	4a0c      	ldr	r2, [pc, #48]	; (80045c0 <pxPortInitialiseStack+0x64>)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	3b14      	subs	r3, #20
 8004596:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004598:	687a      	ldr	r2, [r7, #4]
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3b04      	subs	r3, #4
 80045a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	f06f 0202 	mvn.w	r2, #2
 80045aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	3b20      	subs	r3, #32
 80045b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045b2:	68fb      	ldr	r3, [r7, #12]
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr
 80045c0:	080045c5 	.word	0x080045c5

080045c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80045c4:	b480      	push	{r7}
 80045c6:	b085      	sub	sp, #20
 80045c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80045ca:	2300      	movs	r3, #0
 80045cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80045ce:	4b11      	ldr	r3, [pc, #68]	; (8004614 <prvTaskExitError+0x50>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045d6:	d009      	beq.n	80045ec <prvTaskExitError+0x28>
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	60fb      	str	r3, [r7, #12]
 80045ea:	e7fe      	b.n	80045ea <prvTaskExitError+0x26>
 80045ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f0:	f383 8811 	msr	BASEPRI, r3
 80045f4:	f3bf 8f6f 	isb	sy
 80045f8:	f3bf 8f4f 	dsb	sy
 80045fc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80045fe:	bf00      	nop
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d0fc      	beq.n	8004600 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004606:	bf00      	nop
 8004608:	3714      	adds	r7, #20
 800460a:	46bd      	mov	sp, r7
 800460c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004610:	4770      	bx	lr
 8004612:	bf00      	nop
 8004614:	2000003c 	.word	0x2000003c
	...

08004620 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004620:	4b07      	ldr	r3, [pc, #28]	; (8004640 <pxCurrentTCBConst2>)
 8004622:	6819      	ldr	r1, [r3, #0]
 8004624:	6808      	ldr	r0, [r1, #0]
 8004626:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800462a:	f380 8809 	msr	PSP, r0
 800462e:	f3bf 8f6f 	isb	sy
 8004632:	f04f 0000 	mov.w	r0, #0
 8004636:	f380 8811 	msr	BASEPRI, r0
 800463a:	4770      	bx	lr
 800463c:	f3af 8000 	nop.w

08004640 <pxCurrentTCBConst2>:
 8004640:	200002b4 	.word	0x200002b4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004644:	bf00      	nop
 8004646:	bf00      	nop

08004648 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004648:	4808      	ldr	r0, [pc, #32]	; (800466c <prvPortStartFirstTask+0x24>)
 800464a:	6800      	ldr	r0, [r0, #0]
 800464c:	6800      	ldr	r0, [r0, #0]
 800464e:	f380 8808 	msr	MSP, r0
 8004652:	f04f 0000 	mov.w	r0, #0
 8004656:	f380 8814 	msr	CONTROL, r0
 800465a:	b662      	cpsie	i
 800465c:	b661      	cpsie	f
 800465e:	f3bf 8f4f 	dsb	sy
 8004662:	f3bf 8f6f 	isb	sy
 8004666:	df00      	svc	0
 8004668:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800466a:	bf00      	nop
 800466c:	e000ed08 	.word	0xe000ed08

08004670 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004670:	b580      	push	{r7, lr}
 8004672:	b086      	sub	sp, #24
 8004674:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004676:	4b44      	ldr	r3, [pc, #272]	; (8004788 <xPortStartScheduler+0x118>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a44      	ldr	r2, [pc, #272]	; (800478c <xPortStartScheduler+0x11c>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d109      	bne.n	8004694 <xPortStartScheduler+0x24>
 8004680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004684:	f383 8811 	msr	BASEPRI, r3
 8004688:	f3bf 8f6f 	isb	sy
 800468c:	f3bf 8f4f 	dsb	sy
 8004690:	613b      	str	r3, [r7, #16]
 8004692:	e7fe      	b.n	8004692 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004694:	4b3c      	ldr	r3, [pc, #240]	; (8004788 <xPortStartScheduler+0x118>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a3d      	ldr	r2, [pc, #244]	; (8004790 <xPortStartScheduler+0x120>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d109      	bne.n	80046b2 <xPortStartScheduler+0x42>
 800469e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046a2:	f383 8811 	msr	BASEPRI, r3
 80046a6:	f3bf 8f6f 	isb	sy
 80046aa:	f3bf 8f4f 	dsb	sy
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	e7fe      	b.n	80046b0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80046b2:	4b38      	ldr	r3, [pc, #224]	; (8004794 <xPortStartScheduler+0x124>)
 80046b4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	b2db      	uxtb	r3, r3
 80046bc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	22ff      	movs	r2, #255	; 0xff
 80046c2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80046c4:	697b      	ldr	r3, [r7, #20]
 80046c6:	781b      	ldrb	r3, [r3, #0]
 80046c8:	b2db      	uxtb	r3, r3
 80046ca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80046cc:	78fb      	ldrb	r3, [r7, #3]
 80046ce:	b2db      	uxtb	r3, r3
 80046d0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80046d4:	b2da      	uxtb	r2, r3
 80046d6:	4b30      	ldr	r3, [pc, #192]	; (8004798 <xPortStartScheduler+0x128>)
 80046d8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80046da:	4b30      	ldr	r3, [pc, #192]	; (800479c <xPortStartScheduler+0x12c>)
 80046dc:	2207      	movs	r2, #7
 80046de:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046e0:	e009      	b.n	80046f6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 80046e2:	4b2e      	ldr	r3, [pc, #184]	; (800479c <xPortStartScheduler+0x12c>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	3b01      	subs	r3, #1
 80046e8:	4a2c      	ldr	r2, [pc, #176]	; (800479c <xPortStartScheduler+0x12c>)
 80046ea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80046ec:	78fb      	ldrb	r3, [r7, #3]
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	005b      	lsls	r3, r3, #1
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80046f6:	78fb      	ldrb	r3, [r7, #3]
 80046f8:	b2db      	uxtb	r3, r3
 80046fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80046fe:	2b80      	cmp	r3, #128	; 0x80
 8004700:	d0ef      	beq.n	80046e2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004702:	4b26      	ldr	r3, [pc, #152]	; (800479c <xPortStartScheduler+0x12c>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f1c3 0307 	rsb	r3, r3, #7
 800470a:	2b04      	cmp	r3, #4
 800470c:	d009      	beq.n	8004722 <xPortStartScheduler+0xb2>
 800470e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004712:	f383 8811 	msr	BASEPRI, r3
 8004716:	f3bf 8f6f 	isb	sy
 800471a:	f3bf 8f4f 	dsb	sy
 800471e:	60bb      	str	r3, [r7, #8]
 8004720:	e7fe      	b.n	8004720 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004722:	4b1e      	ldr	r3, [pc, #120]	; (800479c <xPortStartScheduler+0x12c>)
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	021b      	lsls	r3, r3, #8
 8004728:	4a1c      	ldr	r2, [pc, #112]	; (800479c <xPortStartScheduler+0x12c>)
 800472a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <xPortStartScheduler+0x12c>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004734:	4a19      	ldr	r2, [pc, #100]	; (800479c <xPortStartScheduler+0x12c>)
 8004736:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	b2da      	uxtb	r2, r3
 800473c:	697b      	ldr	r3, [r7, #20]
 800473e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004740:	4b17      	ldr	r3, [pc, #92]	; (80047a0 <xPortStartScheduler+0x130>)
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a16      	ldr	r2, [pc, #88]	; (80047a0 <xPortStartScheduler+0x130>)
 8004746:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800474a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800474c:	4b14      	ldr	r3, [pc, #80]	; (80047a0 <xPortStartScheduler+0x130>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a13      	ldr	r2, [pc, #76]	; (80047a0 <xPortStartScheduler+0x130>)
 8004752:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004756:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004758:	f000 f8d6 	bl	8004908 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800475c:	4b11      	ldr	r3, [pc, #68]	; (80047a4 <xPortStartScheduler+0x134>)
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004762:	f000 f8f5 	bl	8004950 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004766:	4b10      	ldr	r3, [pc, #64]	; (80047a8 <xPortStartScheduler+0x138>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	4a0f      	ldr	r2, [pc, #60]	; (80047a8 <xPortStartScheduler+0x138>)
 800476c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004770:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004772:	f7ff ff69 	bl	8004648 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004776:	f7ff fd59 	bl	800422c <vTaskSwitchContext>
	prvTaskExitError();
 800477a:	f7ff ff23 	bl	80045c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800477e:	2300      	movs	r3, #0
}
 8004780:	4618      	mov	r0, r3
 8004782:	3718      	adds	r7, #24
 8004784:	46bd      	mov	sp, r7
 8004786:	bd80      	pop	{r7, pc}
 8004788:	e000ed00 	.word	0xe000ed00
 800478c:	410fc271 	.word	0x410fc271
 8004790:	410fc270 	.word	0x410fc270
 8004794:	e000e400 	.word	0xe000e400
 8004798:	200003e0 	.word	0x200003e0
 800479c:	200003e4 	.word	0x200003e4
 80047a0:	e000ed20 	.word	0xe000ed20
 80047a4:	2000003c 	.word	0x2000003c
 80047a8:	e000ef34 	.word	0xe000ef34

080047ac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80047ac:	b480      	push	{r7}
 80047ae:	b083      	sub	sp, #12
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b6:	f383 8811 	msr	BASEPRI, r3
 80047ba:	f3bf 8f6f 	isb	sy
 80047be:	f3bf 8f4f 	dsb	sy
 80047c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80047c4:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <vPortEnterCritical+0x54>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	3301      	adds	r3, #1
 80047ca:	4a0d      	ldr	r2, [pc, #52]	; (8004800 <vPortEnterCritical+0x54>)
 80047cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80047ce:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <vPortEnterCritical+0x54>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b01      	cmp	r3, #1
 80047d4:	d10e      	bne.n	80047f4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80047d6:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <vPortEnterCritical+0x58>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	b2db      	uxtb	r3, r3
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d009      	beq.n	80047f4 <vPortEnterCritical+0x48>
 80047e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e4:	f383 8811 	msr	BASEPRI, r3
 80047e8:	f3bf 8f6f 	isb	sy
 80047ec:	f3bf 8f4f 	dsb	sy
 80047f0:	603b      	str	r3, [r7, #0]
 80047f2:	e7fe      	b.n	80047f2 <vPortEnterCritical+0x46>
	}
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr
 8004800:	2000003c 	.word	0x2000003c
 8004804:	e000ed04 	.word	0xe000ed04

08004808 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800480e:	4b11      	ldr	r3, [pc, #68]	; (8004854 <vPortExitCritical+0x4c>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	2b00      	cmp	r3, #0
 8004814:	d109      	bne.n	800482a <vPortExitCritical+0x22>
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	607b      	str	r3, [r7, #4]
 8004828:	e7fe      	b.n	8004828 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800482a:	4b0a      	ldr	r3, [pc, #40]	; (8004854 <vPortExitCritical+0x4c>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	3b01      	subs	r3, #1
 8004830:	4a08      	ldr	r2, [pc, #32]	; (8004854 <vPortExitCritical+0x4c>)
 8004832:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004834:	4b07      	ldr	r3, [pc, #28]	; (8004854 <vPortExitCritical+0x4c>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d104      	bne.n	8004846 <vPortExitCritical+0x3e>
 800483c:	2300      	movs	r3, #0
 800483e:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004846:	bf00      	nop
 8004848:	370c      	adds	r7, #12
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	2000003c 	.word	0x2000003c
	...

08004860 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004860:	f3ef 8009 	mrs	r0, PSP
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <pxCurrentTCBConst>)
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	f01e 0f10 	tst.w	lr, #16
 8004870:	bf08      	it	eq
 8004872:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004876:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800487a:	6010      	str	r0, [r2, #0]
 800487c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004880:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004884:	f380 8811 	msr	BASEPRI, r0
 8004888:	f3bf 8f4f 	dsb	sy
 800488c:	f3bf 8f6f 	isb	sy
 8004890:	f7ff fccc 	bl	800422c <vTaskSwitchContext>
 8004894:	f04f 0000 	mov.w	r0, #0
 8004898:	f380 8811 	msr	BASEPRI, r0
 800489c:	bc09      	pop	{r0, r3}
 800489e:	6819      	ldr	r1, [r3, #0]
 80048a0:	6808      	ldr	r0, [r1, #0]
 80048a2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048a6:	f01e 0f10 	tst.w	lr, #16
 80048aa:	bf08      	it	eq
 80048ac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80048b0:	f380 8809 	msr	PSP, r0
 80048b4:	f3bf 8f6f 	isb	sy
 80048b8:	4770      	bx	lr
 80048ba:	bf00      	nop
 80048bc:	f3af 8000 	nop.w

080048c0 <pxCurrentTCBConst>:
 80048c0:	200002b4 	.word	0x200002b4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80048c4:	bf00      	nop
 80048c6:	bf00      	nop

080048c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b082      	sub	sp, #8
 80048cc:	af00      	add	r7, sp, #0
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80048e0:	f7ff fbe8 	bl	80040b4 <xTaskIncrementTick>
 80048e4:	4603      	mov	r3, r0
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80048ea:	4b06      	ldr	r3, [pc, #24]	; (8004904 <SysTick_Handler+0x3c>)
 80048ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048f0:	601a      	str	r2, [r3, #0]
 80048f2:	2300      	movs	r3, #0
 80048f4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80048fc:	bf00      	nop
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004908:	b480      	push	{r7}
 800490a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800490c:	4b0b      	ldr	r3, [pc, #44]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800490e:	2200      	movs	r2, #0
 8004910:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004912:	4b0b      	ldr	r3, [pc, #44]	; (8004940 <vPortSetupTimerInterrupt+0x38>)
 8004914:	2200      	movs	r2, #0
 8004916:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004918:	4b0a      	ldr	r3, [pc, #40]	; (8004944 <vPortSetupTimerInterrupt+0x3c>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a0a      	ldr	r2, [pc, #40]	; (8004948 <vPortSetupTimerInterrupt+0x40>)
 800491e:	fba2 2303 	umull	r2, r3, r2, r3
 8004922:	099b      	lsrs	r3, r3, #6
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <vPortSetupTimerInterrupt+0x44>)
 8004926:	3b01      	subs	r3, #1
 8004928:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800492a:	4b04      	ldr	r3, [pc, #16]	; (800493c <vPortSetupTimerInterrupt+0x34>)
 800492c:	2207      	movs	r2, #7
 800492e:	601a      	str	r2, [r3, #0]
}
 8004930:	bf00      	nop
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr
 800493a:	bf00      	nop
 800493c:	e000e010 	.word	0xe000e010
 8004940:	e000e018 	.word	0xe000e018
 8004944:	20000034 	.word	0x20000034
 8004948:	10624dd3 	.word	0x10624dd3
 800494c:	e000e014 	.word	0xe000e014

08004950 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004950:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004960 <vPortEnableVFP+0x10>
 8004954:	6801      	ldr	r1, [r0, #0]
 8004956:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800495a:	6001      	str	r1, [r0, #0]
 800495c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800495e:	bf00      	nop
 8004960:	e000ed88 	.word	0xe000ed88

08004964 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b08a      	sub	sp, #40	; 0x28
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800496c:	2300      	movs	r3, #0
 800496e:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004970:	f7ff faf6 	bl	8003f60 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004974:	4b57      	ldr	r3, [pc, #348]	; (8004ad4 <pvPortMalloc+0x170>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d101      	bne.n	8004980 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800497c:	f000 f90c 	bl	8004b98 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004980:	4b55      	ldr	r3, [pc, #340]	; (8004ad8 <pvPortMalloc+0x174>)
 8004982:	681a      	ldr	r2, [r3, #0]
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	4013      	ands	r3, r2
 8004988:	2b00      	cmp	r3, #0
 800498a:	f040 808c 	bne.w	8004aa6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01c      	beq.n	80049ce <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004994:	2208      	movs	r2, #8
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4413      	add	r3, r2
 800499a:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f003 0307 	and.w	r3, r3, #7
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d013      	beq.n	80049ce <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f023 0307 	bic.w	r3, r3, #7
 80049ac:	3308      	adds	r3, #8
 80049ae:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f003 0307 	and.w	r3, r3, #7
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d009      	beq.n	80049ce <pvPortMalloc+0x6a>
	__asm volatile
 80049ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049be:	f383 8811 	msr	BASEPRI, r3
 80049c2:	f3bf 8f6f 	isb	sy
 80049c6:	f3bf 8f4f 	dsb	sy
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e7fe      	b.n	80049cc <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d068      	beq.n	8004aa6 <pvPortMalloc+0x142>
 80049d4:	4b41      	ldr	r3, [pc, #260]	; (8004adc <pvPortMalloc+0x178>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	429a      	cmp	r2, r3
 80049dc:	d863      	bhi.n	8004aa6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80049de:	4b40      	ldr	r3, [pc, #256]	; (8004ae0 <pvPortMalloc+0x17c>)
 80049e0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80049e2:	4b3f      	ldr	r3, [pc, #252]	; (8004ae0 <pvPortMalloc+0x17c>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049e8:	e004      	b.n	80049f4 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80049ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049ec:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80049ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80049f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	429a      	cmp	r2, r3
 80049fc:	d903      	bls.n	8004a06 <pvPortMalloc+0xa2>
 80049fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1f1      	bne.n	80049ea <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <pvPortMalloc+0x170>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d04a      	beq.n	8004aa6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004a10:	6a3b      	ldr	r3, [r7, #32]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2208      	movs	r2, #8
 8004a16:	4413      	add	r3, r2
 8004a18:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004a1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	6a3b      	ldr	r3, [r7, #32]
 8004a20:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	685a      	ldr	r2, [r3, #4]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	1ad2      	subs	r2, r2, r3
 8004a2a:	2308      	movs	r3, #8
 8004a2c:	005b      	lsls	r3, r3, #1
 8004a2e:	429a      	cmp	r2, r3
 8004a30:	d91e      	bls.n	8004a70 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004a32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4413      	add	r3, r2
 8004a38:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	f003 0307 	and.w	r3, r3, #7
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d009      	beq.n	8004a58 <pvPortMalloc+0xf4>
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	613b      	str	r3, [r7, #16]
 8004a56:	e7fe      	b.n	8004a56 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a5a:	685a      	ldr	r2, [r3, #4]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	1ad2      	subs	r2, r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004a6a:	69b8      	ldr	r0, [r7, #24]
 8004a6c:	f000 f8f6 	bl	8004c5c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004a70:	4b1a      	ldr	r3, [pc, #104]	; (8004adc <pvPortMalloc+0x178>)
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	4a18      	ldr	r2, [pc, #96]	; (8004adc <pvPortMalloc+0x178>)
 8004a7c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004a7e:	4b17      	ldr	r3, [pc, #92]	; (8004adc <pvPortMalloc+0x178>)
 8004a80:	681a      	ldr	r2, [r3, #0]
 8004a82:	4b18      	ldr	r3, [pc, #96]	; (8004ae4 <pvPortMalloc+0x180>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d203      	bcs.n	8004a92 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004a8a:	4b14      	ldr	r3, [pc, #80]	; (8004adc <pvPortMalloc+0x178>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a15      	ldr	r2, [pc, #84]	; (8004ae4 <pvPortMalloc+0x180>)
 8004a90:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a94:	685a      	ldr	r2, [r3, #4]
 8004a96:	4b10      	ldr	r3, [pc, #64]	; (8004ad8 <pvPortMalloc+0x174>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	431a      	orrs	r2, r3
 8004a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004aa6:	f7ff fa69 	bl	8003f7c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004aaa:	69fb      	ldr	r3, [r7, #28]
 8004aac:	f003 0307 	and.w	r3, r3, #7
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d009      	beq.n	8004ac8 <pvPortMalloc+0x164>
 8004ab4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	60fb      	str	r3, [r7, #12]
 8004ac6:	e7fe      	b.n	8004ac6 <pvPortMalloc+0x162>
	return pvReturn;
 8004ac8:	69fb      	ldr	r3, [r7, #28]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3728      	adds	r7, #40	; 0x28
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}
 8004ad2:	bf00      	nop
 8004ad4:	20003ff0 	.word	0x20003ff0
 8004ad8:	20003ffc 	.word	0x20003ffc
 8004adc:	20003ff4 	.word	0x20003ff4
 8004ae0:	20003fe8 	.word	0x20003fe8
 8004ae4:	20003ff8 	.word	0x20003ff8

08004ae8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d046      	beq.n	8004b88 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004afa:	2308      	movs	r3, #8
 8004afc:	425b      	negs	r3, r3
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4413      	add	r3, r2
 8004b02:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004b04:	697b      	ldr	r3, [r7, #20]
 8004b06:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004b08:	693b      	ldr	r3, [r7, #16]
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	4b20      	ldr	r3, [pc, #128]	; (8004b90 <vPortFree+0xa8>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d109      	bne.n	8004b2a <vPortFree+0x42>
 8004b16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1a:	f383 8811 	msr	BASEPRI, r3
 8004b1e:	f3bf 8f6f 	isb	sy
 8004b22:	f3bf 8f4f 	dsb	sy
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	e7fe      	b.n	8004b28 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004b2a:	693b      	ldr	r3, [r7, #16]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d009      	beq.n	8004b46 <vPortFree+0x5e>
 8004b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b36:	f383 8811 	msr	BASEPRI, r3
 8004b3a:	f3bf 8f6f 	isb	sy
 8004b3e:	f3bf 8f4f 	dsb	sy
 8004b42:	60bb      	str	r3, [r7, #8]
 8004b44:	e7fe      	b.n	8004b44 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	685a      	ldr	r2, [r3, #4]
 8004b4a:	4b11      	ldr	r3, [pc, #68]	; (8004b90 <vPortFree+0xa8>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4013      	ands	r3, r2
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d019      	beq.n	8004b88 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d115      	bne.n	8004b88 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004b5c:	693b      	ldr	r3, [r7, #16]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	4b0b      	ldr	r3, [pc, #44]	; (8004b90 <vPortFree+0xa8>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	43db      	mvns	r3, r3
 8004b66:	401a      	ands	r2, r3
 8004b68:	693b      	ldr	r3, [r7, #16]
 8004b6a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004b6c:	f7ff f9f8 	bl	8003f60 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004b70:	693b      	ldr	r3, [r7, #16]
 8004b72:	685a      	ldr	r2, [r3, #4]
 8004b74:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <vPortFree+0xac>)
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4413      	add	r3, r2
 8004b7a:	4a06      	ldr	r2, [pc, #24]	; (8004b94 <vPortFree+0xac>)
 8004b7c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004b7e:	6938      	ldr	r0, [r7, #16]
 8004b80:	f000 f86c 	bl	8004c5c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004b84:	f7ff f9fa 	bl	8003f7c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004b88:	bf00      	nop
 8004b8a:	3718      	adds	r7, #24
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	20003ffc 	.word	0x20003ffc
 8004b94:	20003ff4 	.word	0x20003ff4

08004b98 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b9e:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004ba2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ba4:	4b27      	ldr	r3, [pc, #156]	; (8004c44 <prvHeapInit+0xac>)
 8004ba6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f003 0307 	and.w	r3, r3, #7
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d00c      	beq.n	8004bcc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	3307      	adds	r3, #7
 8004bb6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0307 	bic.w	r3, r3, #7
 8004bbe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004bc0:	68ba      	ldr	r2, [r7, #8]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	1ad3      	subs	r3, r2, r3
 8004bc6:	4a1f      	ldr	r2, [pc, #124]	; (8004c44 <prvHeapInit+0xac>)
 8004bc8:	4413      	add	r3, r2
 8004bca:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004bd0:	4a1d      	ldr	r2, [pc, #116]	; (8004c48 <prvHeapInit+0xb0>)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004bd6:	4b1c      	ldr	r3, [pc, #112]	; (8004c48 <prvHeapInit+0xb0>)
 8004bd8:	2200      	movs	r2, #0
 8004bda:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68ba      	ldr	r2, [r7, #8]
 8004be0:	4413      	add	r3, r2
 8004be2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004be4:	2208      	movs	r2, #8
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	1a9b      	subs	r3, r3, r2
 8004bea:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f023 0307 	bic.w	r3, r3, #7
 8004bf2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a15      	ldr	r2, [pc, #84]	; (8004c4c <prvHeapInit+0xb4>)
 8004bf8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004bfa:	4b14      	ldr	r3, [pc, #80]	; (8004c4c <prvHeapInit+0xb4>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <prvHeapInit+0xb4>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2200      	movs	r2, #0
 8004c08:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	1ad2      	subs	r2, r2, r3
 8004c14:	683b      	ldr	r3, [r7, #0]
 8004c16:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004c18:	4b0c      	ldr	r3, [pc, #48]	; (8004c4c <prvHeapInit+0xb4>)
 8004c1a:	681a      	ldr	r2, [r3, #0]
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a0a      	ldr	r2, [pc, #40]	; (8004c50 <prvHeapInit+0xb8>)
 8004c26:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	4a09      	ldr	r2, [pc, #36]	; (8004c54 <prvHeapInit+0xbc>)
 8004c2e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004c30:	4b09      	ldr	r3, [pc, #36]	; (8004c58 <prvHeapInit+0xc0>)
 8004c32:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004c36:	601a      	str	r2, [r3, #0]
}
 8004c38:	bf00      	nop
 8004c3a:	3714      	adds	r7, #20
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c42:	4770      	bx	lr
 8004c44:	200003e8 	.word	0x200003e8
 8004c48:	20003fe8 	.word	0x20003fe8
 8004c4c:	20003ff0 	.word	0x20003ff0
 8004c50:	20003ff8 	.word	0x20003ff8
 8004c54:	20003ff4 	.word	0x20003ff4
 8004c58:	20003ffc 	.word	0x20003ffc

08004c5c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	b085      	sub	sp, #20
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004c64:	4b28      	ldr	r3, [pc, #160]	; (8004d08 <prvInsertBlockIntoFreeList+0xac>)
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e002      	b.n	8004c70 <prvInsertBlockIntoFreeList+0x14>
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60fb      	str	r3, [r7, #12]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	687a      	ldr	r2, [r7, #4]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d8f7      	bhi.n	8004c6a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	68ba      	ldr	r2, [r7, #8]
 8004c84:	4413      	add	r3, r2
 8004c86:	687a      	ldr	r2, [r7, #4]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d108      	bne.n	8004c9e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	685a      	ldr	r2, [r3, #4]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	441a      	add	r2, r3
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	441a      	add	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	429a      	cmp	r2, r3
 8004cb0:	d118      	bne.n	8004ce4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681a      	ldr	r2, [r3, #0]
 8004cb6:	4b15      	ldr	r3, [pc, #84]	; (8004d0c <prvInsertBlockIntoFreeList+0xb0>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	429a      	cmp	r2, r3
 8004cbc:	d00d      	beq.n	8004cda <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	685a      	ldr	r2, [r3, #4]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	441a      	add	r2, r3
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	601a      	str	r2, [r3, #0]
 8004cd8:	e008      	b.n	8004cec <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004cda:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <prvInsertBlockIntoFreeList+0xb0>)
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	601a      	str	r2, [r3, #0]
 8004ce2:	e003      	b.n	8004cec <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d002      	beq.n	8004cfa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004cfa:	bf00      	nop
 8004cfc:	3714      	adds	r7, #20
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20003fe8 	.word	0x20003fe8
 8004d0c:	20003ff0 	.word	0x20003ff0

08004d10 <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8004d16:	4b15      	ldr	r3, [pc, #84]	; (8004d6c <TM_DELAY_Init+0x5c>)
 8004d18:	68db      	ldr	r3, [r3, #12]
 8004d1a:	4a14      	ldr	r2, [pc, #80]	; (8004d6c <TM_DELAY_Init+0x5c>)
 8004d1c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d20:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 8004d22:	4b12      	ldr	r3, [pc, #72]	; (8004d6c <TM_DELAY_Init+0x5c>)
 8004d24:	68db      	ldr	r3, [r3, #12]
 8004d26:	4a11      	ldr	r2, [pc, #68]	; (8004d6c <TM_DELAY_Init+0x5c>)
 8004d28:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d2c:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 8004d2e:	4b10      	ldr	r3, [pc, #64]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a0f      	ldr	r2, [pc, #60]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d34:	f023 0301 	bic.w	r3, r3, #1
 8004d38:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 8004d3a:	4b0d      	ldr	r3, [pc, #52]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	4a0c      	ldr	r2, [pc, #48]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d40:	f043 0301 	orr.w	r3, r3, #1
 8004d44:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 8004d46:	4b0a      	ldr	r3, [pc, #40]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d48:	2200      	movs	r2, #0
 8004d4a:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 8004d4c:	4b08      	ldr	r3, [pc, #32]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 8004d52:	bf00      	nop
	__ASM volatile ("NOP");
 8004d54:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <TM_DELAY_Init+0x60>)
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 8004d5e:	4618      	mov	r0, r3
 8004d60:	370c      	adds	r7, #12
 8004d62:	46bd      	mov	sp, r7
 8004d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d68:	4770      	bx	lr
 8004d6a:	bf00      	nop
 8004d6c:	e000edf0 	.word	0xe000edf0
 8004d70:	e0001000 	.word	0xe0001000

08004d74 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8004d74:	b480      	push	{r7}
 8004d76:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8004d78:	bf00      	nop
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d80:	4770      	bx	lr
	...

08004d84 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8004d8a:	4b3e      	ldr	r3, [pc, #248]	; (8004e84 <HAL_IncTick+0x100>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	4a3c      	ldr	r2, [pc, #240]	; (8004e84 <HAL_IncTick+0x100>)
 8004d92:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8004d94:	4b3c      	ldr	r3, [pc, #240]	; (8004e88 <HAL_IncTick+0x104>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d004      	beq.n	8004da6 <HAL_IncTick+0x22>
		TM_Time2--;
 8004d9c:	4b3a      	ldr	r3, [pc, #232]	; (8004e88 <HAL_IncTick+0x104>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	3b01      	subs	r3, #1
 8004da2:	4a39      	ldr	r2, [pc, #228]	; (8004e88 <HAL_IncTick+0x104>)
 8004da4:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8004da6:	2300      	movs	r3, #0
 8004da8:	71fb      	strb	r3, [r7, #7]
 8004daa:	e05f      	b.n	8004e6c <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8004dac:	79fb      	ldrb	r3, [r7, #7]
 8004dae:	4a37      	ldr	r2, [pc, #220]	; (8004e8c <HAL_IncTick+0x108>)
 8004db0:	009b      	lsls	r3, r3, #2
 8004db2:	4413      	add	r3, r2
 8004db4:	685b      	ldr	r3, [r3, #4]
		if (
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d055      	beq.n	8004e66 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8004dba:	79fb      	ldrb	r3, [r7, #7]
 8004dbc:	4a33      	ldr	r2, [pc, #204]	; (8004e8c <HAL_IncTick+0x108>)
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	f003 0302 	and.w	r3, r3, #2
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d04a      	beq.n	8004e66 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 8004dd0:	79fb      	ldrb	r3, [r7, #7]
 8004dd2:	4a2e      	ldr	r2, [pc, #184]	; (8004e8c <HAL_IncTick+0x108>)
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	689b      	ldr	r3, [r3, #8]
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d007      	beq.n	8004df0 <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 8004de0:	79fb      	ldrb	r3, [r7, #7]
 8004de2:	4a2a      	ldr	r2, [pc, #168]	; (8004e8c <HAL_IncTick+0x108>)
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	685b      	ldr	r3, [r3, #4]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	3a01      	subs	r2, #1
 8004dee:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 8004df0:	79fb      	ldrb	r3, [r7, #7]
 8004df2:	4a26      	ldr	r2, [pc, #152]	; (8004e8c <HAL_IncTick+0x108>)
 8004df4:	009b      	lsls	r3, r3, #2
 8004df6:	4413      	add	r3, r2
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d132      	bne.n	8004e66 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 8004e00:	79fb      	ldrb	r3, [r7, #7]
 8004e02:	4a22      	ldr	r2, [pc, #136]	; (8004e8c <HAL_IncTick+0x108>)
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	4413      	add	r3, r2
 8004e08:	685b      	ldr	r3, [r3, #4]
 8004e0a:	68da      	ldr	r2, [r3, #12]
 8004e0c:	79fb      	ldrb	r3, [r7, #7]
 8004e0e:	491f      	ldr	r1, [pc, #124]	; (8004e8c <HAL_IncTick+0x108>)
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	440b      	add	r3, r1
 8004e14:	6858      	ldr	r0, [r3, #4]
 8004e16:	79fb      	ldrb	r3, [r7, #7]
 8004e18:	491c      	ldr	r1, [pc, #112]	; (8004e8c <HAL_IncTick+0x108>)
 8004e1a:	009b      	lsls	r3, r3, #2
 8004e1c:	440b      	add	r3, r1
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	691b      	ldr	r3, [r3, #16]
 8004e22:	4619      	mov	r1, r3
 8004e24:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 8004e26:	79fb      	ldrb	r3, [r7, #7]
 8004e28:	4a18      	ldr	r2, [pc, #96]	; (8004e8c <HAL_IncTick+0x108>)
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	4413      	add	r3, r2
 8004e2e:	685a      	ldr	r2, [r3, #4]
 8004e30:	79fb      	ldrb	r3, [r7, #7]
 8004e32:	4916      	ldr	r1, [pc, #88]	; (8004e8c <HAL_IncTick+0x108>)
 8004e34:	009b      	lsls	r3, r3, #2
 8004e36:	440b      	add	r3, r1
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	6852      	ldr	r2, [r2, #4]
 8004e3c:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 8004e3e:	79fb      	ldrb	r3, [r7, #7]
 8004e40:	4a12      	ldr	r2, [pc, #72]	; (8004e8c <HAL_IncTick+0x108>)
 8004e42:	009b      	lsls	r3, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	685b      	ldr	r3, [r3, #4]
 8004e48:	781b      	ldrb	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d108      	bne.n	8004e66 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 8004e54:	79fb      	ldrb	r3, [r7, #7]
 8004e56:	4a0d      	ldr	r2, [pc, #52]	; (8004e8c <HAL_IncTick+0x108>)
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	4413      	add	r3, r2
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	7813      	ldrb	r3, [r2, #0]
 8004e60:	f36f 0341 	bfc	r3, #1, #1
 8004e64:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8004e66:	79fb      	ldrb	r3, [r7, #7]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	71fb      	strb	r3, [r7, #7]
 8004e6c:	4b07      	ldr	r3, [pc, #28]	; (8004e8c <HAL_IncTick+0x108>)
 8004e6e:	781b      	ldrb	r3, [r3, #0]
 8004e70:	79fa      	ldrb	r2, [r7, #7]
 8004e72:	429a      	cmp	r2, r3
 8004e74:	d39a      	bcc.n	8004dac <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8004e76:	f7ff ff7d 	bl	8004d74 <TM_DELAY_1msHandler>
}
 8004e7a:	bf00      	nop
 8004e7c:	3708      	adds	r7, #8
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	20004004 	.word	0x20004004
 8004e88:	20004000 	.word	0x20004000
 8004e8c:	20004008 	.word	0x20004008

08004e90 <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e98:	f3ef 8305 	mrs	r3, IPSR
 8004e9c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004e9e:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d115      	bne.n	8004ed0 <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 8004ea4:	f000 f81e 	bl	8004ee4 <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 8004eaa:	bf00      	nop
 8004eac:	f000 f81a 	bl	8004ee4 <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	429a      	cmp	r2, r3
 8004eba:	d8f7      	bhi.n	8004eac <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 8004ebc:	e00b      	b.n	8004ed6 <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 8004ebe:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <HAL_Delay+0x50>)
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d002      	beq.n	8004ed0 <HAL_Delay+0x40>
				Delay--;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	3b01      	subs	r3, #1
 8004ece:	607b      	str	r3, [r7, #4]
		while (Delay) {
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f3      	bne.n	8004ebe <HAL_Delay+0x2e>
}
 8004ed6:	bf00      	nop
 8004ed8:	3710      	adds	r7, #16
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	bf00      	nop
 8004ee0:	e000e010 	.word	0xe000e010

08004ee4 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8004ee4:	b480      	push	{r7}
 8004ee6:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8004ee8:	4b03      	ldr	r3, [pc, #12]	; (8004ef8 <HAL_GetTick+0x14>)
 8004eea:	681b      	ldr	r3, [r3, #0]
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr
 8004ef6:	bf00      	nop
 8004ef8:	20004004 	.word	0x20004004

08004efc <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b084      	sub	sp, #16
 8004f00:	af02      	add	r7, sp, #8
 8004f02:	6078      	str	r0, [r7, #4]
 8004f04:	4608      	mov	r0, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	461a      	mov	r2, r3
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	807b      	strh	r3, [r7, #2]
 8004f0e:	460b      	mov	r3, r1
 8004f10:	707b      	strb	r3, [r7, #1]
 8004f12:	4613      	mov	r3, r2
 8004f14:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8004f16:	887b      	ldrh	r3, [r7, #2]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8004f1c:	6878      	ldr	r0, [r7, #4]
 8004f1e:	f000 f821 	bl	8004f64 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 8004f22:	7838      	ldrb	r0, [r7, #0]
 8004f24:	787a      	ldrb	r2, [r7, #1]
 8004f26:	8879      	ldrh	r1, [r7, #2]
 8004f28:	7d3b      	ldrb	r3, [r7, #20]
 8004f2a:	9301      	str	r3, [sp, #4]
 8004f2c:	7c3b      	ldrb	r3, [r7, #16]
 8004f2e:	9300      	str	r3, [sp, #0]
 8004f30:	4603      	mov	r3, r0
 8004f32:	6878      	ldr	r0, [r7, #4]
 8004f34:	f000 f82e 	bl	8004f94 <TM_GPIO_INT_Init>
 8004f38:	e000      	b.n	8004f3c <TM_GPIO_Init+0x40>
		return;
 8004f3a:	bf00      	nop
}
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}

08004f42 <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 8004f42:	b480      	push	{r7}
 8004f44:	b083      	sub	sp, #12
 8004f46:	af00      	add	r7, sp, #0
 8004f48:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 8004f50:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8004f54:	0a9b      	lsrs	r3, r3, #10
 8004f56:	b29b      	uxth	r3, r3
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	370c      	adds	r7, #12
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f62:	4770      	bx	lr

08004f64 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	b082      	sub	sp, #8
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f7ff ffe8 	bl	8004f42 <TM_GPIO_GetPortSource>
 8004f72:	4603      	mov	r3, r0
 8004f74:	461a      	mov	r2, r3
 8004f76:	2301      	movs	r3, #1
 8004f78:	fa03 f202 	lsl.w	r2, r3, r2
 8004f7c:	4b04      	ldr	r3, [pc, #16]	; (8004f90 <TM_GPIO_INT_EnableClock+0x2c>)
 8004f7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f80:	4611      	mov	r1, r2
 8004f82:	4a03      	ldr	r2, [pc, #12]	; (8004f90 <TM_GPIO_INT_EnableClock+0x2c>)
 8004f84:	430b      	orrs	r3, r1
 8004f86:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 8004f88:	bf00      	nop
 8004f8a:	3708      	adds	r7, #8
 8004f8c:	46bd      	mov	sp, r7
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40023800 	.word	0x40023800

08004f94 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	4608      	mov	r0, r1
 8004f9e:	4611      	mov	r1, r2
 8004fa0:	461a      	mov	r2, r3
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	807b      	strh	r3, [r7, #2]
 8004fa6:	460b      	mov	r3, r1
 8004fa8:	707b      	strb	r3, [r7, #1]
 8004faa:	4613      	mov	r3, r2
 8004fac:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7ff ffc7 	bl	8004f42 <TM_GPIO_GetPortSource>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8004fb8:	2300      	movs	r3, #0
 8004fba:	73fb      	strb	r3, [r7, #15]
 8004fbc:	e067      	b.n	800508e <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 8004fbe:	887a      	ldrh	r2, [r7, #2]
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	fa42 f303 	asr.w	r3, r2, r3
 8004fc6:	f003 0301 	and.w	r3, r3, #1
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d05b      	beq.n	8005086 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 8004fce:	7bbb      	ldrb	r3, [r7, #14]
 8004fd0:	4a32      	ldr	r2, [pc, #200]	; (800509c <TM_GPIO_INT_Init+0x108>)
 8004fd2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004fd6:	b21a      	sxth	r2, r3
 8004fd8:	7bfb      	ldrb	r3, [r7, #15]
 8004fda:	2101      	movs	r1, #1
 8004fdc:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe0:	b21b      	sxth	r3, r3
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	b21a      	sxth	r2, r3
 8004fe6:	7bbb      	ldrb	r3, [r7, #14]
 8004fe8:	b291      	uxth	r1, r2
 8004fea:	4a2c      	ldr	r2, [pc, #176]	; (800509c <TM_GPIO_INT_Init+0x108>)
 8004fec:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	7bfa      	ldrb	r2, [r7, #15]
 8004ff6:	0052      	lsls	r2, r2, #1
 8004ff8:	2103      	movs	r1, #3
 8004ffa:	fa01 f202 	lsl.w	r2, r1, r2
 8004ffe:	43d2      	mvns	r2, r2
 8005000:	4013      	ands	r3, r2
 8005002:	7e39      	ldrb	r1, [r7, #24]
 8005004:	7bfa      	ldrb	r2, [r7, #15]
 8005006:	0052      	lsls	r2, r2, #1
 8005008:	fa01 f202 	lsl.w	r2, r1, r2
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	7bfb      	ldrb	r3, [r7, #15]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	2103      	movs	r1, #3
 800501c:	fa01 f303 	lsl.w	r3, r1, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	4013      	ands	r3, r2
 8005024:	7879      	ldrb	r1, [r7, #1]
 8005026:	7bfa      	ldrb	r2, [r7, #15]
 8005028:	0052      	lsls	r2, r2, #1
 800502a:	fa01 f202 	lsl.w	r2, r1, r2
 800502e:	431a      	orrs	r2, r3
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 8005034:	787b      	ldrb	r3, [r7, #1]
 8005036:	2b01      	cmp	r3, #1
 8005038:	d002      	beq.n	8005040 <TM_GPIO_INT_Init+0xac>
 800503a:	787b      	ldrb	r3, [r7, #1]
 800503c:	2b02      	cmp	r3, #2
 800503e:	d123      	bne.n	8005088 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	7bfa      	ldrb	r2, [r7, #15]
 8005046:	2101      	movs	r1, #1
 8005048:	fa01 f202 	lsl.w	r2, r1, r2
 800504c:	b292      	uxth	r2, r2
 800504e:	43d2      	mvns	r2, r2
 8005050:	4013      	ands	r3, r2
 8005052:	7839      	ldrb	r1, [r7, #0]
 8005054:	7bfa      	ldrb	r2, [r7, #15]
 8005056:	fa01 f202 	lsl.w	r2, r1, r2
 800505a:	b292      	uxth	r2, r2
 800505c:	431a      	orrs	r2, r3
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	689a      	ldr	r2, [r3, #8]
 8005066:	7bfb      	ldrb	r3, [r7, #15]
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	2103      	movs	r1, #3
 800506c:	fa01 f303 	lsl.w	r3, r1, r3
 8005070:	43db      	mvns	r3, r3
 8005072:	4013      	ands	r3, r2
 8005074:	7f39      	ldrb	r1, [r7, #28]
 8005076:	7bfa      	ldrb	r2, [r7, #15]
 8005078:	0052      	lsls	r2, r2, #1
 800507a:	fa01 f202 	lsl.w	r2, r1, r2
 800507e:	431a      	orrs	r2, r3
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	609a      	str	r2, [r3, #8]
 8005084:	e000      	b.n	8005088 <TM_GPIO_INT_Init+0xf4>
			continue;
 8005086:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8005088:	7bfb      	ldrb	r3, [r7, #15]
 800508a:	3301      	adds	r3, #1
 800508c:	73fb      	strb	r3, [r7, #15]
 800508e:	7bfb      	ldrb	r3, [r7, #15]
 8005090:	2b0f      	cmp	r3, #15
 8005092:	d994      	bls.n	8004fbe <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8005094:	bf00      	nop
 8005096:	3710      	adds	r7, #16
 8005098:	46bd      	mov	sp, r7
 800509a:	bd80      	pop	{r7, pc}
 800509c:	20004020 	.word	0x20004020

080050a0 <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 80050a8:	4b0c      	ldr	r3, [pc, #48]	; (80050dc <Delay+0x3c>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	60fb      	str	r3, [r7, #12]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 80050ae:	f7fc fe81 	bl	8001db4 <HAL_RCC_GetHCLKFreq>
 80050b2:	4602      	mov	r2, r0
 80050b4:	4b0a      	ldr	r3, [pc, #40]	; (80050e0 <Delay+0x40>)
 80050b6:	fba3 2302 	umull	r2, r3, r3, r2
 80050ba:	0c9b      	lsrs	r3, r3, #18
 80050bc:	687a      	ldr	r2, [r7, #4]
 80050be:	fb02 f303 	mul.w	r3, r2, r3
 80050c2:	607b      	str	r3, [r7, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 80050c4:	bf00      	nop
 80050c6:	4b05      	ldr	r3, [pc, #20]	; (80050dc <Delay+0x3c>)
 80050c8:	685a      	ldr	r2, [r3, #4]
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	1ad2      	subs	r2, r2, r3
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	429a      	cmp	r2, r3
 80050d2:	d3f8      	bcc.n	80050c6 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 80050d4:	bf00      	nop
 80050d6:	3710      	adds	r7, #16
 80050d8:	46bd      	mov	sp, r7
 80050da:	bd80      	pop	{r7, pc}
 80050dc:	e0001000 	.word	0xe0001000
 80050e0:	431bde83 	.word	0x431bde83

080050e4 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	4603      	mov	r3, r0
 80050ec:	460a      	mov	r2, r1
 80050ee:	71fb      	strb	r3, [r7, #7]
 80050f0:	4613      	mov	r3, r2
 80050f2:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	TM_DELAY_Init();
 80050f4:	f7ff fe0c 	bl	8004d10 <TM_DELAY_Init>
	
	/* Init pinout */
	TM_HD44780_InitPins();
 80050f8:	f000 f996 	bl	8005428 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 80050fc:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 8005100:	f7ff ffce 	bl	80050a0 <Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8005104:	4a2a      	ldr	r2, [pc, #168]	; (80051b0 <TM_HD44780_Init+0xcc>)
 8005106:	79bb      	ldrb	r3, [r7, #6]
 8005108:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 800510a:	4a29      	ldr	r2, [pc, #164]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800510c:	79fb      	ldrb	r3, [r7, #7]
 800510e:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 8005110:	4b27      	ldr	r3, [pc, #156]	; (80051b0 <TM_HD44780_Init+0xcc>)
 8005112:	2200      	movs	r2, #0
 8005114:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <TM_HD44780_Init+0xcc>)
 8005118:	2200      	movs	r2, #0
 800511a:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800511c:	4b24      	ldr	r3, [pc, #144]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800511e:	2200      	movs	r2, #0
 8005120:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 8005122:	79bb      	ldrb	r3, [r7, #6]
 8005124:	2b01      	cmp	r3, #1
 8005126:	d906      	bls.n	8005136 <TM_HD44780_Init+0x52>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 8005128:	4b21      	ldr	r3, [pc, #132]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800512a:	785b      	ldrb	r3, [r3, #1]
 800512c:	f043 0308 	orr.w	r3, r3, #8
 8005130:	b2da      	uxtb	r2, r3
 8005132:	4b1f      	ldr	r3, [pc, #124]	; (80051b0 <TM_HD44780_Init+0xcc>)
 8005134:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 8005136:	2003      	movs	r0, #3
 8005138:	f000 f8f2 	bl	8005320 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800513c:	f241 1094 	movw	r0, #4500	; 0x1194
 8005140:	f7ff ffae 	bl	80050a0 <Delay>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 8005144:	2003      	movs	r0, #3
 8005146:	f000 f8eb 	bl	8005320 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800514a:	f241 1094 	movw	r0, #4500	; 0x1194
 800514e:	f7ff ffa7 	bl	80050a0 <Delay>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 8005152:	2003      	movs	r0, #3
 8005154:	f000 f8e4 	bl	8005320 <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);	
 8005158:	f241 1094 	movw	r0, #4500	; 0x1194
 800515c:	f7ff ffa0 	bl	80050a0 <Delay>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 8005160:	2002      	movs	r0, #2
 8005162:	f000 f8dd 	bl	8005320 <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 8005166:	2064      	movs	r0, #100	; 0x64
 8005168:	f7ff ff9a 	bl	80050a0 <Delay>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 800516c:	4b10      	ldr	r3, [pc, #64]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800516e:	785b      	ldrb	r3, [r3, #1]
 8005170:	f043 0320 	orr.w	r3, r3, #32
 8005174:	b2db      	uxtb	r3, r3
 8005176:	4618      	mov	r0, r3
 8005178:	f000 f89a 	bl	80052b0 <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 800517c:	4b0c      	ldr	r3, [pc, #48]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800517e:	2204      	movs	r2, #4
 8005180:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 8005182:	f000 f87f 	bl	8005284 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8005186:	f000 f815 	bl	80051b4 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800518a:	4b09      	ldr	r3, [pc, #36]	; (80051b0 <TM_HD44780_Init+0xcc>)
 800518c:	2202      	movs	r2, #2
 800518e:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 8005190:	4b07      	ldr	r3, [pc, #28]	; (80051b0 <TM_HD44780_Init+0xcc>)
 8005192:	789b      	ldrb	r3, [r3, #2]
 8005194:	f043 0304 	orr.w	r3, r3, #4
 8005198:	b2db      	uxtb	r3, r3
 800519a:	4618      	mov	r0, r3
 800519c:	f000 f888 	bl	80052b0 <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 80051a0:	f241 1094 	movw	r0, #4500	; 0x1194
 80051a4:	f7ff ff7c 	bl	80050a0 <Delay>
}
 80051a8:	bf00      	nop
 80051aa:	3708      	adds	r7, #8
 80051ac:	46bd      	mov	sp, r7
 80051ae:	bd80      	pop	{r7, pc}
 80051b0:	2000403c 	.word	0x2000403c

080051b4 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 80051b4:	b580      	push	{r7, lr}
 80051b6:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 80051b8:	2001      	movs	r0, #1
 80051ba:	f000 f879 	bl	80052b0 <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 80051be:	f640 30b8 	movw	r0, #3000	; 0xbb8
 80051c2:	f7ff ff6d 	bl	80050a0 <Delay>
}
 80051c6:	bf00      	nop
 80051c8:	bd80      	pop	{r7, pc}
	...

080051cc <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 80051cc:	b580      	push	{r7, lr}
 80051ce:	b082      	sub	sp, #8
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	4603      	mov	r3, r0
 80051d4:	603a      	str	r2, [r7, #0]
 80051d6:	71fb      	strb	r3, [r7, #7]
 80051d8:	460b      	mov	r3, r1
 80051da:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 80051dc:	79ba      	ldrb	r2, [r7, #6]
 80051de:	79fb      	ldrb	r3, [r7, #7]
 80051e0:	4611      	mov	r1, r2
 80051e2:	4618      	mov	r0, r3
 80051e4:	f000 f8ee 	bl	80053c4 <TM_HD44780_CursorSet>
	while (*str) {
 80051e8:	e042      	b.n	8005270 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 80051ea:	4b25      	ldr	r3, [pc, #148]	; (8005280 <TM_HD44780_Puts+0xb4>)
 80051ec:	795a      	ldrb	r2, [r3, #5]
 80051ee:	4b24      	ldr	r3, [pc, #144]	; (8005280 <TM_HD44780_Puts+0xb4>)
 80051f0:	791b      	ldrb	r3, [r3, #4]
 80051f2:	429a      	cmp	r2, r3
 80051f4:	d310      	bcc.n	8005218 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 80051f6:	4b22      	ldr	r3, [pc, #136]	; (8005280 <TM_HD44780_Puts+0xb4>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <TM_HD44780_Puts+0xb4>)
 80051fe:	799b      	ldrb	r3, [r3, #6]
 8005200:	3301      	adds	r3, #1
 8005202:	b2da      	uxtb	r2, r3
 8005204:	4b1e      	ldr	r3, [pc, #120]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005206:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <TM_HD44780_Puts+0xb4>)
 800520a:	795a      	ldrb	r2, [r3, #5]
 800520c:	4b1c      	ldr	r3, [pc, #112]	; (8005280 <TM_HD44780_Puts+0xb4>)
 800520e:	799b      	ldrb	r3, [r3, #6]
 8005210:	4619      	mov	r1, r3
 8005212:	4610      	mov	r0, r2
 8005214:	f000 f8d6 	bl	80053c4 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 8005218:	683b      	ldr	r3, [r7, #0]
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b0a      	cmp	r3, #10
 800521e:	d10e      	bne.n	800523e <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 8005220:	4b17      	ldr	r3, [pc, #92]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005222:	799b      	ldrb	r3, [r3, #6]
 8005224:	3301      	adds	r3, #1
 8005226:	b2da      	uxtb	r2, r3
 8005228:	4b15      	ldr	r3, [pc, #84]	; (8005280 <TM_HD44780_Puts+0xb4>)
 800522a:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800522c:	4b14      	ldr	r3, [pc, #80]	; (8005280 <TM_HD44780_Puts+0xb4>)
 800522e:	795a      	ldrb	r2, [r3, #5]
 8005230:	4b13      	ldr	r3, [pc, #76]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005232:	799b      	ldrb	r3, [r3, #6]
 8005234:	4619      	mov	r1, r3
 8005236:	4610      	mov	r0, r2
 8005238:	f000 f8c4 	bl	80053c4 <TM_HD44780_CursorSet>
 800523c:	e015      	b.n	800526a <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	2b0d      	cmp	r3, #13
 8005244:	d106      	bne.n	8005254 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 8005246:	4b0e      	ldr	r3, [pc, #56]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005248:	799b      	ldrb	r3, [r3, #6]
 800524a:	4619      	mov	r1, r3
 800524c:	2000      	movs	r0, #0
 800524e:	f000 f8b9 	bl	80053c4 <TM_HD44780_CursorSet>
 8005252:	e00a      	b.n	800526a <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	781b      	ldrb	r3, [r3, #0]
 8005258:	4618      	mov	r0, r3
 800525a:	f000 f845 	bl	80052e8 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 800525e:	4b08      	ldr	r3, [pc, #32]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005260:	795b      	ldrb	r3, [r3, #5]
 8005262:	3301      	adds	r3, #1
 8005264:	b2da      	uxtb	r2, r3
 8005266:	4b06      	ldr	r3, [pc, #24]	; (8005280 <TM_HD44780_Puts+0xb4>)
 8005268:	715a      	strb	r2, [r3, #5]
		}
		str++;
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	3301      	adds	r3, #1
 800526e:	603b      	str	r3, [r7, #0]
	while (*str) {
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	781b      	ldrb	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1b8      	bne.n	80051ea <TM_HD44780_Puts+0x1e>
	}
}
 8005278:	bf00      	nop
 800527a:	3708      	adds	r7, #8
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	2000403c 	.word	0x2000403c

08005284 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8005288:	4b08      	ldr	r3, [pc, #32]	; (80052ac <TM_HD44780_DisplayOn+0x28>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	f043 0304 	orr.w	r3, r3, #4
 8005290:	b2da      	uxtb	r2, r3
 8005292:	4b06      	ldr	r3, [pc, #24]	; (80052ac <TM_HD44780_DisplayOn+0x28>)
 8005294:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8005296:	4b05      	ldr	r3, [pc, #20]	; (80052ac <TM_HD44780_DisplayOn+0x28>)
 8005298:	781b      	ldrb	r3, [r3, #0]
 800529a:	f043 0308 	orr.w	r3, r3, #8
 800529e:	b2db      	uxtb	r3, r3
 80052a0:	4618      	mov	r0, r3
 80052a2:	f000 f805 	bl	80052b0 <TM_HD44780_Cmd>
}
 80052a6:	bf00      	nop
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	2000403c 	.word	0x2000403c

080052b0 <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b082      	sub	sp, #8
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	4603      	mov	r3, r0
 80052b8:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 80052ba:	4b0a      	ldr	r3, [pc, #40]	; (80052e4 <TM_HD44780_Cmd+0x34>)
 80052bc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80052c0:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 80052c2:	79fb      	ldrb	r3, [r7, #7]
 80052c4:	091b      	lsrs	r3, r3, #4
 80052c6:	b2db      	uxtb	r3, r3
 80052c8:	4618      	mov	r0, r3
 80052ca:	f000 f829 	bl	8005320 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 80052ce:	79fb      	ldrb	r3, [r7, #7]
 80052d0:	f003 030f 	and.w	r3, r3, #15
 80052d4:	b2db      	uxtb	r3, r3
 80052d6:	4618      	mov	r0, r3
 80052d8:	f000 f822 	bl	8005320 <TM_HD44780_Cmd4bit>
}
 80052dc:	bf00      	nop
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40020000 	.word	0x40020000

080052e8 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 80052e8:	b580      	push	{r7, lr}
 80052ea:	b082      	sub	sp, #8
 80052ec:	af00      	add	r7, sp, #0
 80052ee:	4603      	mov	r3, r0
 80052f0:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 80052f2:	4b0a      	ldr	r3, [pc, #40]	; (800531c <TM_HD44780_Data+0x34>)
 80052f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052f8:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 80052fa:	79fb      	ldrb	r3, [r7, #7]
 80052fc:	091b      	lsrs	r3, r3, #4
 80052fe:	b2db      	uxtb	r3, r3
 8005300:	4618      	mov	r0, r3
 8005302:	f000 f80d 	bl	8005320 <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 8005306:	79fb      	ldrb	r3, [r7, #7]
 8005308:	f003 030f 	and.w	r3, r3, #15
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4618      	mov	r0, r3
 8005310:	f000 f806 	bl	8005320 <TM_HD44780_Cmd4bit>
}
 8005314:	bf00      	nop
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	40020000 	.word	0x40020000

08005320 <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 8005320:	b580      	push	{r7, lr}
 8005322:	b082      	sub	sp, #8
 8005324:	af00      	add	r7, sp, #0
 8005326:	4603      	mov	r3, r0
 8005328:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	TM_GPIO_SetPinValue(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 800532a:	79fb      	ldrb	r3, [r7, #7]
 800532c:	f003 0308 	and.w	r3, r3, #8
 8005330:	2b00      	cmp	r3, #0
 8005332:	d004      	beq.n	800533e <TM_HD44780_Cmd4bit+0x1e>
 8005334:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <TM_HD44780_Cmd4bit+0x98>)
 8005336:	f44f 7280 	mov.w	r2, #256	; 0x100
 800533a:	619a      	str	r2, [r3, #24]
 800533c:	e003      	b.n	8005346 <TM_HD44780_Cmd4bit+0x26>
 800533e:	4b1e      	ldr	r3, [pc, #120]	; (80053b8 <TM_HD44780_Cmd4bit+0x98>)
 8005340:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005344:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	f003 0304 	and.w	r3, r3, #4
 800534c:	2b00      	cmp	r3, #0
 800534e:	d004      	beq.n	800535a <TM_HD44780_Cmd4bit+0x3a>
 8005350:	4b1a      	ldr	r3, [pc, #104]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 8005352:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005356:	619a      	str	r2, [r3, #24]
 8005358:	e003      	b.n	8005362 <TM_HD44780_Cmd4bit+0x42>
 800535a:	4b18      	ldr	r3, [pc, #96]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 800535c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005360:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 8005362:	79fb      	ldrb	r3, [r7, #7]
 8005364:	f003 0302 	and.w	r3, r3, #2
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <TM_HD44780_Cmd4bit+0x54>
 800536c:	4b13      	ldr	r3, [pc, #76]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 800536e:	2210      	movs	r2, #16
 8005370:	619a      	str	r2, [r3, #24]
 8005372:	e003      	b.n	800537c <TM_HD44780_Cmd4bit+0x5c>
 8005374:	4b11      	ldr	r3, [pc, #68]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 8005376:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800537a:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 800537c:	79fb      	ldrb	r3, [r7, #7]
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	2b00      	cmp	r3, #0
 8005384:	d003      	beq.n	800538e <TM_HD44780_Cmd4bit+0x6e>
 8005386:	4b0d      	ldr	r3, [pc, #52]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 8005388:	2220      	movs	r2, #32
 800538a:	619a      	str	r2, [r3, #24]
 800538c:	e003      	b.n	8005396 <TM_HD44780_Cmd4bit+0x76>
 800538e:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <TM_HD44780_Cmd4bit+0x9c>)
 8005390:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005394:	619a      	str	r2, [r3, #24]
	HD44780_E_BLINK;
 8005396:	4b0a      	ldr	r3, [pc, #40]	; (80053c0 <TM_HD44780_Cmd4bit+0xa0>)
 8005398:	2280      	movs	r2, #128	; 0x80
 800539a:	619a      	str	r2, [r3, #24]
 800539c:	2014      	movs	r0, #20
 800539e:	f7ff fe7f 	bl	80050a0 <Delay>
 80053a2:	4b07      	ldr	r3, [pc, #28]	; (80053c0 <TM_HD44780_Cmd4bit+0xa0>)
 80053a4:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80053a8:	619a      	str	r2, [r3, #24]
 80053aa:	2014      	movs	r0, #20
 80053ac:	f7ff fe78 	bl	80050a0 <Delay>
}
 80053b0:	bf00      	nop
 80053b2:	3708      	adds	r7, #8
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	40020000 	.word	0x40020000
 80053bc:	40020400 	.word	0x40020400
 80053c0:	40020800 	.word	0x40020800

080053c4 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b084      	sub	sp, #16
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	4603      	mov	r3, r0
 80053cc:	460a      	mov	r2, r1
 80053ce:	71fb      	strb	r3, [r7, #7]
 80053d0:	4613      	mov	r3, r2
 80053d2:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 80053d4:	4b12      	ldr	r3, [pc, #72]	; (8005420 <TM_HD44780_CursorSet+0x5c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <TM_HD44780_CursorSet+0x60>)
 80053dc:	78db      	ldrb	r3, [r3, #3]
 80053de:	79ba      	ldrb	r2, [r7, #6]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d301      	bcc.n	80053e8 <TM_HD44780_CursorSet+0x24>
		row = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 80053e8:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <TM_HD44780_CursorSet+0x60>)
 80053ea:	79fb      	ldrb	r3, [r7, #7]
 80053ec:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 80053ee:	4a0d      	ldr	r2, [pc, #52]	; (8005424 <TM_HD44780_CursorSet+0x60>)
 80053f0:	79bb      	ldrb	r3, [r7, #6]
 80053f2:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 80053f4:	79bb      	ldrb	r3, [r7, #6]
 80053f6:	f107 0210 	add.w	r2, r7, #16
 80053fa:	4413      	add	r3, r2
 80053fc:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8005400:	79fb      	ldrb	r3, [r7, #7]
 8005402:	4413      	add	r3, r2
 8005404:	b2db      	uxtb	r3, r3
 8005406:	b25b      	sxtb	r3, r3
 8005408:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800540c:	b25b      	sxtb	r3, r3
 800540e:	b2db      	uxtb	r3, r3
 8005410:	4618      	mov	r0, r3
 8005412:	f7ff ff4d 	bl	80052b0 <TM_HD44780_Cmd>
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	08005684 	.word	0x08005684
 8005424:	2000403c 	.word	0x2000403c

08005428 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af02      	add	r7, sp, #8
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 800542e:	2300      	movs	r3, #0
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	2300      	movs	r3, #0
 8005434:	9300      	str	r3, [sp, #0]
 8005436:	2300      	movs	r3, #0
 8005438:	2201      	movs	r2, #1
 800543a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800543e:	4829      	ldr	r0, [pc, #164]	; (80054e4 <TM_HD44780_InitPins+0xbc>)
 8005440:	f7ff fd5c 	bl	8004efc <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_E_PORT, HD44780_E_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8005444:	2300      	movs	r3, #0
 8005446:	9301      	str	r3, [sp, #4]
 8005448:	2300      	movs	r3, #0
 800544a:	9300      	str	r3, [sp, #0]
 800544c:	2300      	movs	r3, #0
 800544e:	2201      	movs	r2, #1
 8005450:	2180      	movs	r1, #128	; 0x80
 8005452:	4825      	ldr	r0, [pc, #148]	; (80054e8 <TM_HD44780_InitPins+0xc0>)
 8005454:	f7ff fd52 	bl	8004efc <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D4_PORT, HD44780_D4_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8005458:	2300      	movs	r3, #0
 800545a:	9301      	str	r3, [sp, #4]
 800545c:	2300      	movs	r3, #0
 800545e:	9300      	str	r3, [sp, #0]
 8005460:	2300      	movs	r3, #0
 8005462:	2201      	movs	r2, #1
 8005464:	2120      	movs	r1, #32
 8005466:	4821      	ldr	r0, [pc, #132]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 8005468:	f7ff fd48 	bl	8004efc <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D5_PORT, HD44780_D5_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 800546c:	2300      	movs	r3, #0
 800546e:	9301      	str	r3, [sp, #4]
 8005470:	2300      	movs	r3, #0
 8005472:	9300      	str	r3, [sp, #0]
 8005474:	2300      	movs	r3, #0
 8005476:	2201      	movs	r2, #1
 8005478:	2110      	movs	r1, #16
 800547a:	481c      	ldr	r0, [pc, #112]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 800547c:	f7ff fd3e 	bl	8004efc <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D6_PORT, HD44780_D6_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8005480:	2300      	movs	r3, #0
 8005482:	9301      	str	r3, [sp, #4]
 8005484:	2300      	movs	r3, #0
 8005486:	9300      	str	r3, [sp, #0]
 8005488:	2300      	movs	r3, #0
 800548a:	2201      	movs	r2, #1
 800548c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005490:	4816      	ldr	r0, [pc, #88]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 8005492:	f7ff fd33 	bl	8004efc <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D7_PORT, HD44780_D7_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8005496:	2300      	movs	r3, #0
 8005498:	9301      	str	r3, [sp, #4]
 800549a:	2300      	movs	r3, #0
 800549c:	9300      	str	r3, [sp, #0]
 800549e:	2300      	movs	r3, #0
 80054a0:	2201      	movs	r2, #1
 80054a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80054a6:	480f      	ldr	r0, [pc, #60]	; (80054e4 <TM_HD44780_InitPins+0xbc>)
 80054a8:	f7ff fd28 	bl	8004efc <TM_GPIO_Init>
	
	/* Set pins low */
	TM_GPIO_SetPinLow(HD44780_RS_PORT, HD44780_RS_PIN);
 80054ac:	4b0d      	ldr	r3, [pc, #52]	; (80054e4 <TM_HD44780_InitPins+0xbc>)
 80054ae:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80054b2:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_E_PORT, HD44780_E_PIN);
 80054b4:	4b0c      	ldr	r3, [pc, #48]	; (80054e8 <TM_HD44780_InitPins+0xc0>)
 80054b6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80054ba:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D4_PORT, HD44780_D4_PIN);
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 80054be:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 80054c2:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D5_PORT, HD44780_D5_PIN);
 80054c4:	4b09      	ldr	r3, [pc, #36]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 80054c6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80054ca:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D6_PORT, HD44780_D6_PIN);
 80054cc:	4b07      	ldr	r3, [pc, #28]	; (80054ec <TM_HD44780_InitPins+0xc4>)
 80054ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80054d2:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D7_PORT, HD44780_D7_PIN);
 80054d4:	4b03      	ldr	r3, [pc, #12]	; (80054e4 <TM_HD44780_InitPins+0xbc>)
 80054d6:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80054da:	619a      	str	r2, [r3, #24]
}
 80054dc:	bf00      	nop
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop
 80054e4:	40020000 	.word	0x40020000
 80054e8:	40020800 	.word	0x40020800
 80054ec:	40020400 	.word	0x40020400

080054f0 <__libc_init_array>:
 80054f0:	b570      	push	{r4, r5, r6, lr}
 80054f2:	4e0d      	ldr	r6, [pc, #52]	; (8005528 <__libc_init_array+0x38>)
 80054f4:	4c0d      	ldr	r4, [pc, #52]	; (800552c <__libc_init_array+0x3c>)
 80054f6:	1ba4      	subs	r4, r4, r6
 80054f8:	10a4      	asrs	r4, r4, #2
 80054fa:	2500      	movs	r5, #0
 80054fc:	42a5      	cmp	r5, r4
 80054fe:	d109      	bne.n	8005514 <__libc_init_array+0x24>
 8005500:	4e0b      	ldr	r6, [pc, #44]	; (8005530 <__libc_init_array+0x40>)
 8005502:	4c0c      	ldr	r4, [pc, #48]	; (8005534 <__libc_init_array+0x44>)
 8005504:	f000 f820 	bl	8005548 <_init>
 8005508:	1ba4      	subs	r4, r4, r6
 800550a:	10a4      	asrs	r4, r4, #2
 800550c:	2500      	movs	r5, #0
 800550e:	42a5      	cmp	r5, r4
 8005510:	d105      	bne.n	800551e <__libc_init_array+0x2e>
 8005512:	bd70      	pop	{r4, r5, r6, pc}
 8005514:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005518:	4798      	blx	r3
 800551a:	3501      	adds	r5, #1
 800551c:	e7ee      	b.n	80054fc <__libc_init_array+0xc>
 800551e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005522:	4798      	blx	r3
 8005524:	3501      	adds	r5, #1
 8005526:	e7f2      	b.n	800550e <__libc_init_array+0x1e>
 8005528:	080056a8 	.word	0x080056a8
 800552c:	080056a8 	.word	0x080056a8
 8005530:	080056a8 	.word	0x080056a8
 8005534:	080056ac 	.word	0x080056ac

08005538 <memset>:
 8005538:	4402      	add	r2, r0
 800553a:	4603      	mov	r3, r0
 800553c:	4293      	cmp	r3, r2
 800553e:	d100      	bne.n	8005542 <memset+0xa>
 8005540:	4770      	bx	lr
 8005542:	f803 1b01 	strb.w	r1, [r3], #1
 8005546:	e7f9      	b.n	800553c <memset+0x4>

08005548 <_init>:
 8005548:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554a:	bf00      	nop
 800554c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800554e:	bc08      	pop	{r3}
 8005550:	469e      	mov	lr, r3
 8005552:	4770      	bx	lr

08005554 <_fini>:
 8005554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005556:	bf00      	nop
 8005558:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555a:	bc08      	pop	{r3}
 800555c:	469e      	mov	lr, r3
 800555e:	4770      	bx	lr
