
LittleMan2_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006744  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006a64  08006a64  00020040  2**0
                  CONTENTS
  4 .ARM          00000008  08006a64  08006a64  00016a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006a6c  08006a6c  00020040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006a6c  08006a6c  00016a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006a70  08006a70  00016a70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000040  20000000  08006a74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040dc  20000040  08006ab4  00020040  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000411c  08006ab4  0002411c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001aa1d  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003a4a  00000000  00000000  0003aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001548  00000000  00000000  0003e4d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000013a0  00000000  00000000  0003fa20  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000242b9  00000000  00000000  00040dc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00011e9e  00000000  00000000  00065079  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dd022  00000000  00000000  00076f17  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00153f39  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000580c  00000000  00000000  00153fb4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000040 	.word	0x20000040
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080068fc 	.word	0x080068fc

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000044 	.word	0x20000044
 800020c:	080068fc 	.word	0x080068fc

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_uldivmod>:
 8000220:	b953      	cbnz	r3, 8000238 <__aeabi_uldivmod+0x18>
 8000222:	b94a      	cbnz	r2, 8000238 <__aeabi_uldivmod+0x18>
 8000224:	2900      	cmp	r1, #0
 8000226:	bf08      	it	eq
 8000228:	2800      	cmpeq	r0, #0
 800022a:	bf1c      	itt	ne
 800022c:	f04f 31ff 	movne.w	r1, #4294967295
 8000230:	f04f 30ff 	movne.w	r0, #4294967295
 8000234:	f000 b972 	b.w	800051c <__aeabi_idiv0>
 8000238:	f1ad 0c08 	sub.w	ip, sp, #8
 800023c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000240:	f000 f806 	bl	8000250 <__udivmoddi4>
 8000244:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000248:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800024c:	b004      	add	sp, #16
 800024e:	4770      	bx	lr

08000250 <__udivmoddi4>:
 8000250:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000254:	9e08      	ldr	r6, [sp, #32]
 8000256:	4604      	mov	r4, r0
 8000258:	4688      	mov	r8, r1
 800025a:	2b00      	cmp	r3, #0
 800025c:	d14b      	bne.n	80002f6 <__udivmoddi4+0xa6>
 800025e:	428a      	cmp	r2, r1
 8000260:	4615      	mov	r5, r2
 8000262:	d967      	bls.n	8000334 <__udivmoddi4+0xe4>
 8000264:	fab2 f282 	clz	r2, r2
 8000268:	b14a      	cbz	r2, 800027e <__udivmoddi4+0x2e>
 800026a:	f1c2 0720 	rsb	r7, r2, #32
 800026e:	fa01 f302 	lsl.w	r3, r1, r2
 8000272:	fa20 f707 	lsr.w	r7, r0, r7
 8000276:	4095      	lsls	r5, r2
 8000278:	ea47 0803 	orr.w	r8, r7, r3
 800027c:	4094      	lsls	r4, r2
 800027e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000282:	0c23      	lsrs	r3, r4, #16
 8000284:	fbb8 f7fe 	udiv	r7, r8, lr
 8000288:	fa1f fc85 	uxth.w	ip, r5
 800028c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000290:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000294:	fb07 f10c 	mul.w	r1, r7, ip
 8000298:	4299      	cmp	r1, r3
 800029a:	d909      	bls.n	80002b0 <__udivmoddi4+0x60>
 800029c:	18eb      	adds	r3, r5, r3
 800029e:	f107 30ff 	add.w	r0, r7, #4294967295
 80002a2:	f080 811b 	bcs.w	80004dc <__udivmoddi4+0x28c>
 80002a6:	4299      	cmp	r1, r3
 80002a8:	f240 8118 	bls.w	80004dc <__udivmoddi4+0x28c>
 80002ac:	3f02      	subs	r7, #2
 80002ae:	442b      	add	r3, r5
 80002b0:	1a5b      	subs	r3, r3, r1
 80002b2:	b2a4      	uxth	r4, r4
 80002b4:	fbb3 f0fe 	udiv	r0, r3, lr
 80002b8:	fb0e 3310 	mls	r3, lr, r0, r3
 80002bc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002c0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002c4:	45a4      	cmp	ip, r4
 80002c6:	d909      	bls.n	80002dc <__udivmoddi4+0x8c>
 80002c8:	192c      	adds	r4, r5, r4
 80002ca:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ce:	f080 8107 	bcs.w	80004e0 <__udivmoddi4+0x290>
 80002d2:	45a4      	cmp	ip, r4
 80002d4:	f240 8104 	bls.w	80004e0 <__udivmoddi4+0x290>
 80002d8:	3802      	subs	r0, #2
 80002da:	442c      	add	r4, r5
 80002dc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002e0:	eba4 040c 	sub.w	r4, r4, ip
 80002e4:	2700      	movs	r7, #0
 80002e6:	b11e      	cbz	r6, 80002f0 <__udivmoddi4+0xa0>
 80002e8:	40d4      	lsrs	r4, r2
 80002ea:	2300      	movs	r3, #0
 80002ec:	e9c6 4300 	strd	r4, r3, [r6]
 80002f0:	4639      	mov	r1, r7
 80002f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d909      	bls.n	800030e <__udivmoddi4+0xbe>
 80002fa:	2e00      	cmp	r6, #0
 80002fc:	f000 80eb 	beq.w	80004d6 <__udivmoddi4+0x286>
 8000300:	2700      	movs	r7, #0
 8000302:	e9c6 0100 	strd	r0, r1, [r6]
 8000306:	4638      	mov	r0, r7
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	fab3 f783 	clz	r7, r3
 8000312:	2f00      	cmp	r7, #0
 8000314:	d147      	bne.n	80003a6 <__udivmoddi4+0x156>
 8000316:	428b      	cmp	r3, r1
 8000318:	d302      	bcc.n	8000320 <__udivmoddi4+0xd0>
 800031a:	4282      	cmp	r2, r0
 800031c:	f200 80fa 	bhi.w	8000514 <__udivmoddi4+0x2c4>
 8000320:	1a84      	subs	r4, r0, r2
 8000322:	eb61 0303 	sbc.w	r3, r1, r3
 8000326:	2001      	movs	r0, #1
 8000328:	4698      	mov	r8, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d0e0      	beq.n	80002f0 <__udivmoddi4+0xa0>
 800032e:	e9c6 4800 	strd	r4, r8, [r6]
 8000332:	e7dd      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000334:	b902      	cbnz	r2, 8000338 <__udivmoddi4+0xe8>
 8000336:	deff      	udf	#255	; 0xff
 8000338:	fab2 f282 	clz	r2, r2
 800033c:	2a00      	cmp	r2, #0
 800033e:	f040 808f 	bne.w	8000460 <__udivmoddi4+0x210>
 8000342:	1b49      	subs	r1, r1, r5
 8000344:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000348:	fa1f f885 	uxth.w	r8, r5
 800034c:	2701      	movs	r7, #1
 800034e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fb0e 111c 	mls	r1, lr, ip, r1
 8000358:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800035c:	fb08 f10c 	mul.w	r1, r8, ip
 8000360:	4299      	cmp	r1, r3
 8000362:	d907      	bls.n	8000374 <__udivmoddi4+0x124>
 8000364:	18eb      	adds	r3, r5, r3
 8000366:	f10c 30ff 	add.w	r0, ip, #4294967295
 800036a:	d202      	bcs.n	8000372 <__udivmoddi4+0x122>
 800036c:	4299      	cmp	r1, r3
 800036e:	f200 80cd 	bhi.w	800050c <__udivmoddi4+0x2bc>
 8000372:	4684      	mov	ip, r0
 8000374:	1a59      	subs	r1, r3, r1
 8000376:	b2a3      	uxth	r3, r4
 8000378:	fbb1 f0fe 	udiv	r0, r1, lr
 800037c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000380:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000384:	fb08 f800 	mul.w	r8, r8, r0
 8000388:	45a0      	cmp	r8, r4
 800038a:	d907      	bls.n	800039c <__udivmoddi4+0x14c>
 800038c:	192c      	adds	r4, r5, r4
 800038e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000392:	d202      	bcs.n	800039a <__udivmoddi4+0x14a>
 8000394:	45a0      	cmp	r8, r4
 8000396:	f200 80b6 	bhi.w	8000506 <__udivmoddi4+0x2b6>
 800039a:	4618      	mov	r0, r3
 800039c:	eba4 0408 	sub.w	r4, r4, r8
 80003a0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003a4:	e79f      	b.n	80002e6 <__udivmoddi4+0x96>
 80003a6:	f1c7 0c20 	rsb	ip, r7, #32
 80003aa:	40bb      	lsls	r3, r7
 80003ac:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003b0:	ea4e 0e03 	orr.w	lr, lr, r3
 80003b4:	fa01 f407 	lsl.w	r4, r1, r7
 80003b8:	fa20 f50c 	lsr.w	r5, r0, ip
 80003bc:	fa21 f30c 	lsr.w	r3, r1, ip
 80003c0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003c4:	4325      	orrs	r5, r4
 80003c6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003ca:	0c2c      	lsrs	r4, r5, #16
 80003cc:	fb08 3319 	mls	r3, r8, r9, r3
 80003d0:	fa1f fa8e 	uxth.w	sl, lr
 80003d4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003d8:	fb09 f40a 	mul.w	r4, r9, sl
 80003dc:	429c      	cmp	r4, r3
 80003de:	fa02 f207 	lsl.w	r2, r2, r7
 80003e2:	fa00 f107 	lsl.w	r1, r0, r7
 80003e6:	d90b      	bls.n	8000400 <__udivmoddi4+0x1b0>
 80003e8:	eb1e 0303 	adds.w	r3, lr, r3
 80003ec:	f109 30ff 	add.w	r0, r9, #4294967295
 80003f0:	f080 8087 	bcs.w	8000502 <__udivmoddi4+0x2b2>
 80003f4:	429c      	cmp	r4, r3
 80003f6:	f240 8084 	bls.w	8000502 <__udivmoddi4+0x2b2>
 80003fa:	f1a9 0902 	sub.w	r9, r9, #2
 80003fe:	4473      	add	r3, lr
 8000400:	1b1b      	subs	r3, r3, r4
 8000402:	b2ad      	uxth	r5, r5
 8000404:	fbb3 f0f8 	udiv	r0, r3, r8
 8000408:	fb08 3310 	mls	r3, r8, r0, r3
 800040c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000410:	fb00 fa0a 	mul.w	sl, r0, sl
 8000414:	45a2      	cmp	sl, r4
 8000416:	d908      	bls.n	800042a <__udivmoddi4+0x1da>
 8000418:	eb1e 0404 	adds.w	r4, lr, r4
 800041c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000420:	d26b      	bcs.n	80004fa <__udivmoddi4+0x2aa>
 8000422:	45a2      	cmp	sl, r4
 8000424:	d969      	bls.n	80004fa <__udivmoddi4+0x2aa>
 8000426:	3802      	subs	r0, #2
 8000428:	4474      	add	r4, lr
 800042a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800042e:	fba0 8902 	umull	r8, r9, r0, r2
 8000432:	eba4 040a 	sub.w	r4, r4, sl
 8000436:	454c      	cmp	r4, r9
 8000438:	46c2      	mov	sl, r8
 800043a:	464b      	mov	r3, r9
 800043c:	d354      	bcc.n	80004e8 <__udivmoddi4+0x298>
 800043e:	d051      	beq.n	80004e4 <__udivmoddi4+0x294>
 8000440:	2e00      	cmp	r6, #0
 8000442:	d069      	beq.n	8000518 <__udivmoddi4+0x2c8>
 8000444:	ebb1 050a 	subs.w	r5, r1, sl
 8000448:	eb64 0403 	sbc.w	r4, r4, r3
 800044c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000450:	40fd      	lsrs	r5, r7
 8000452:	40fc      	lsrs	r4, r7
 8000454:	ea4c 0505 	orr.w	r5, ip, r5
 8000458:	e9c6 5400 	strd	r5, r4, [r6]
 800045c:	2700      	movs	r7, #0
 800045e:	e747      	b.n	80002f0 <__udivmoddi4+0xa0>
 8000460:	f1c2 0320 	rsb	r3, r2, #32
 8000464:	fa20 f703 	lsr.w	r7, r0, r3
 8000468:	4095      	lsls	r5, r2
 800046a:	fa01 f002 	lsl.w	r0, r1, r2
 800046e:	fa21 f303 	lsr.w	r3, r1, r3
 8000472:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000476:	4338      	orrs	r0, r7
 8000478:	0c01      	lsrs	r1, r0, #16
 800047a:	fbb3 f7fe 	udiv	r7, r3, lr
 800047e:	fa1f f885 	uxth.w	r8, r5
 8000482:	fb0e 3317 	mls	r3, lr, r7, r3
 8000486:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048a:	fb07 f308 	mul.w	r3, r7, r8
 800048e:	428b      	cmp	r3, r1
 8000490:	fa04 f402 	lsl.w	r4, r4, r2
 8000494:	d907      	bls.n	80004a6 <__udivmoddi4+0x256>
 8000496:	1869      	adds	r1, r5, r1
 8000498:	f107 3cff 	add.w	ip, r7, #4294967295
 800049c:	d22f      	bcs.n	80004fe <__udivmoddi4+0x2ae>
 800049e:	428b      	cmp	r3, r1
 80004a0:	d92d      	bls.n	80004fe <__udivmoddi4+0x2ae>
 80004a2:	3f02      	subs	r7, #2
 80004a4:	4429      	add	r1, r5
 80004a6:	1acb      	subs	r3, r1, r3
 80004a8:	b281      	uxth	r1, r0
 80004aa:	fbb3 f0fe 	udiv	r0, r3, lr
 80004ae:	fb0e 3310 	mls	r3, lr, r0, r3
 80004b2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b6:	fb00 f308 	mul.w	r3, r0, r8
 80004ba:	428b      	cmp	r3, r1
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x27e>
 80004be:	1869      	adds	r1, r5, r1
 80004c0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004c4:	d217      	bcs.n	80004f6 <__udivmoddi4+0x2a6>
 80004c6:	428b      	cmp	r3, r1
 80004c8:	d915      	bls.n	80004f6 <__udivmoddi4+0x2a6>
 80004ca:	3802      	subs	r0, #2
 80004cc:	4429      	add	r1, r5
 80004ce:	1ac9      	subs	r1, r1, r3
 80004d0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004d4:	e73b      	b.n	800034e <__udivmoddi4+0xfe>
 80004d6:	4637      	mov	r7, r6
 80004d8:	4630      	mov	r0, r6
 80004da:	e709      	b.n	80002f0 <__udivmoddi4+0xa0>
 80004dc:	4607      	mov	r7, r0
 80004de:	e6e7      	b.n	80002b0 <__udivmoddi4+0x60>
 80004e0:	4618      	mov	r0, r3
 80004e2:	e6fb      	b.n	80002dc <__udivmoddi4+0x8c>
 80004e4:	4541      	cmp	r1, r8
 80004e6:	d2ab      	bcs.n	8000440 <__udivmoddi4+0x1f0>
 80004e8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004ec:	eb69 020e 	sbc.w	r2, r9, lr
 80004f0:	3801      	subs	r0, #1
 80004f2:	4613      	mov	r3, r2
 80004f4:	e7a4      	b.n	8000440 <__udivmoddi4+0x1f0>
 80004f6:	4660      	mov	r0, ip
 80004f8:	e7e9      	b.n	80004ce <__udivmoddi4+0x27e>
 80004fa:	4618      	mov	r0, r3
 80004fc:	e795      	b.n	800042a <__udivmoddi4+0x1da>
 80004fe:	4667      	mov	r7, ip
 8000500:	e7d1      	b.n	80004a6 <__udivmoddi4+0x256>
 8000502:	4681      	mov	r9, r0
 8000504:	e77c      	b.n	8000400 <__udivmoddi4+0x1b0>
 8000506:	3802      	subs	r0, #2
 8000508:	442c      	add	r4, r5
 800050a:	e747      	b.n	800039c <__udivmoddi4+0x14c>
 800050c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000510:	442b      	add	r3, r5
 8000512:	e72f      	b.n	8000374 <__udivmoddi4+0x124>
 8000514:	4638      	mov	r0, r7
 8000516:	e708      	b.n	800032a <__udivmoddi4+0xda>
 8000518:	4637      	mov	r7, r6
 800051a:	e6e9      	b.n	80002f0 <__udivmoddi4+0xa0>

0800051c <__aeabi_idiv0>:
 800051c:	4770      	bx	lr
 800051e:	bf00      	nop

08000520 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000520:	b480      	push	{r7}
 8000522:	b085      	sub	sp, #20
 8000524:	af00      	add	r7, sp, #0
 8000526:	60f8      	str	r0, [r7, #12]
 8000528:	60b9      	str	r1, [r7, #8]
 800052a:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800052c:	68fb      	ldr	r3, [r7, #12]
 800052e:	4a07      	ldr	r2, [pc, #28]	; (800054c <vApplicationGetIdleTaskMemory+0x2c>)
 8000530:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000532:	68bb      	ldr	r3, [r7, #8]
 8000534:	4a06      	ldr	r2, [pc, #24]	; (8000550 <vApplicationGetIdleTaskMemory+0x30>)
 8000536:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 800053e:	bf00      	nop
 8000540:	3714      	adds	r7, #20
 8000542:	46bd      	mov	sp, r7
 8000544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	2000005c 	.word	0x2000005c
 8000550:	200000b0 	.word	0x200000b0

08000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000554:	b5b0      	push	{r4, r5, r7, lr}
 8000556:	b0a0      	sub	sp, #128	; 0x80
 8000558:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800055a:	f000 fcc7 	bl	8000eec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055e:	f000 f89f 	bl	80006a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000562:	f000 f987 	bl	8000874 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000566:	f000 f95b 	bl	8000820 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800056a:	f000 f907 	bl	800077c <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  /* Initialize LCD 20 cols x 4 rows */
  TM_HD44780_Init(16, 2);
 800056e:	2102      	movs	r1, #2
 8000570:	2010      	movs	r0, #16
 8000572:	f005 ff85 	bl	8006480 <TM_HD44780_Init>
  /* Put string to LCD */
  TM_HD44780_Puts(0, 0, "Fernando");
 8000576:	4a3c      	ldr	r2, [pc, #240]	; (8000668 <main+0x114>)
 8000578:	2100      	movs	r1, #0
 800057a:	2000      	movs	r0, #0
 800057c:	f005 fff4 	bl	8006568 <TM_HD44780_Puts>
  TM_HD44780_Puts(0, 1, "16x2 HD44780 LCD");
 8000580:	4a3a      	ldr	r2, [pc, #232]	; (800066c <main+0x118>)
 8000582:	2101      	movs	r1, #1
 8000584:	2000      	movs	r0, #0
 8000586:	f005 ffef 	bl	8006568 <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(3000);
 800058a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800058e:	f005 fe4d 	bl	800622c <HAL_Delay>
  /* Clear LCD */
  TM_HD44780_Clear();
 8000592:	f005 ffdd 	bl	8006550 <TM_HD44780_Clear>
  /* Write new text */
  TM_HD44780_Puts(6, 1, "CLEARED!");
 8000596:	4a36      	ldr	r2, [pc, #216]	; (8000670 <main+0x11c>)
 8000598:	2101      	movs	r1, #1
 800059a:	2006      	movs	r0, #6
 800059c:	f005 ffe4 	bl	8006568 <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(1000);
 80005a0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a4:	f005 fe42 	bl	800622c <HAL_Delay>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(adcqueue, 16, uint16_t);
 80005a8:	4b32      	ldr	r3, [pc, #200]	; (8000674 <main+0x120>)
 80005aa:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80005ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80005b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADCQueue = osMessageCreate (osMessageQ(adcqueue), NULL);
 80005b4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fbdd 	bl	8003d7a <osMessageCreate>
 80005c0:	4602      	mov	r2, r0
 80005c2:	4b2d      	ldr	r3, [pc, #180]	; (8000678 <main+0x124>)
 80005c4:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80005c6:	4b2d      	ldr	r3, [pc, #180]	; (800067c <main+0x128>)
 80005c8:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80005cc:	461d      	mov	r5, r3
 80005ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80005da:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80005de:	2100      	movs	r1, #0
 80005e0:	4618      	mov	r0, r3
 80005e2:	f003 fb6a 	bl	8003cba <osThreadCreate>
 80005e6:	4602      	mov	r2, r0
 80005e8:	4b25      	ldr	r3, [pc, #148]	; (8000680 <main+0x12c>)
 80005ea:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2Init, osPriorityNormal, 0, 128);
 80005ec:	4b25      	ldr	r3, [pc, #148]	; (8000684 <main+0x130>)
 80005ee:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80005f2:	461d      	mov	r5, r3
 80005f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 8000600:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f003 fb57 	bl	8003cba <osThreadCreate>
 800060c:	4602      	mov	r2, r0
 800060e:	4b1e      	ldr	r3, [pc, #120]	; (8000688 <main+0x134>)
 8000610:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* TaskUARTProcess Creation */
  osThreadDef(TaskUARTProcess, TaskUARTProcessInit, osPriorityNormal, 0, 128);
 8000612:	4b1e      	ldr	r3, [pc, #120]	; (800068c <main+0x138>)
 8000614:	f107 041c 	add.w	r4, r7, #28
 8000618:	461d      	mov	r5, r3
 800061a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800061c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800061e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000622:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUARTProcessHandler = osThreadCreate(osThread(TaskUARTProcess), NULL);
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2100      	movs	r1, #0
 800062c:	4618      	mov	r0, r3
 800062e:	f003 fb44 	bl	8003cba <osThreadCreate>
 8000632:	4602      	mov	r2, r0
 8000634:	4b16      	ldr	r3, [pc, #88]	; (8000690 <main+0x13c>)
 8000636:	601a      	str	r2, [r3, #0]

  /* TaskDisplay Creation */
  osThreadDef(TaskDisplay, TaskDisplayInit, osPriorityNormal, 0, 128);
 8000638:	4b16      	ldr	r3, [pc, #88]	; (8000694 <main+0x140>)
 800063a:	463c      	mov	r4, r7
 800063c:	461d      	mov	r5, r3
 800063e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000640:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000642:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000646:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandler = osThreadCreate(osThread(TaskDisplay), NULL);
 800064a:	463b      	mov	r3, r7
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f003 fb33 	bl	8003cba <osThreadCreate>
 8000654:	4602      	mov	r2, r0
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <main+0x144>)
 8000658:	601a      	str	r2, [r3, #0]

  HAL_ADC_Start_IT(&hadc1);
 800065a:	4810      	ldr	r0, [pc, #64]	; (800069c <main+0x148>)
 800065c:	f000 fd72 	bl	8001144 <HAL_ADC_Start_IT>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000660:	f003 fb24 	bl	8003cac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000664:	e7fe      	b.n	8000664 <main+0x110>
 8000666:	bf00      	nop
 8000668:	08006914 	.word	0x08006914
 800066c:	08006920 	.word	0x08006920
 8000670:	08006934 	.word	0x08006934
 8000674:	08006940 	.word	0x08006940
 8000678:	20004094 	.word	0x20004094
 800067c:	0800695c 	.word	0x0800695c
 8000680:	20004040 	.word	0x20004040
 8000684:	08006980 	.word	0x08006980
 8000688:	20004098 	.word	0x20004098
 800068c:	080069ac 	.word	0x080069ac
 8000690:	20004090 	.word	0x20004090
 8000694:	080069d4 	.word	0x080069d4
 8000698:	20004044 	.word	0x20004044
 800069c:	20004048 	.word	0x20004048

080006a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b094      	sub	sp, #80	; 0x50
 80006a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	2234      	movs	r2, #52	; 0x34
 80006ac:	2100      	movs	r1, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f006 f91b 	bl	80068ea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006b4:	f107 0308 	add.w	r3, r7, #8
 80006b8:	2200      	movs	r2, #0
 80006ba:	601a      	str	r2, [r3, #0]
 80006bc:	605a      	str	r2, [r3, #4]
 80006be:	609a      	str	r2, [r3, #8]
 80006c0:	60da      	str	r2, [r3, #12]
 80006c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006c4:	2300      	movs	r3, #0
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	4b2a      	ldr	r3, [pc, #168]	; (8000774 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	4a29      	ldr	r2, [pc, #164]	; (8000774 <SystemClock_Config+0xd4>)
 80006ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006d2:	6413      	str	r3, [r2, #64]	; 0x40
 80006d4:	4b27      	ldr	r3, [pc, #156]	; (8000774 <SystemClock_Config+0xd4>)
 80006d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006e0:	2300      	movs	r3, #0
 80006e2:	603b      	str	r3, [r7, #0]
 80006e4:	4b24      	ldr	r3, [pc, #144]	; (8000778 <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ec:	4a22      	ldr	r2, [pc, #136]	; (8000778 <SystemClock_Config+0xd8>)
 80006ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006f2:	6013      	str	r3, [r2, #0]
 80006f4:	4b20      	ldr	r3, [pc, #128]	; (8000778 <SystemClock_Config+0xd8>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006fc:	603b      	str	r3, [r7, #0]
 80006fe:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000700:	2302      	movs	r3, #2
 8000702:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000704:	2301      	movs	r3, #1
 8000706:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000708:	2310      	movs	r3, #16
 800070a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800070c:	2302      	movs	r3, #2
 800070e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000710:	2300      	movs	r3, #0
 8000712:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000714:	2310      	movs	r3, #16
 8000716:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000718:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800071c:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800071e:	2304      	movs	r3, #4
 8000720:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000722:	2302      	movs	r3, #2
 8000724:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000726:	2302      	movs	r3, #2
 8000728:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4618      	mov	r0, r3
 8000730:	f001 ff0e 	bl	8002550 <HAL_RCC_OscConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800073a:	f000 fa35 	bl	8000ba8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800073e:	230f      	movs	r3, #15
 8000740:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000742:	2302      	movs	r3, #2
 8000744:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800074a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800074e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000754:	f107 0308 	add.w	r3, r7, #8
 8000758:	2102      	movs	r1, #2
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fc0c 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000760:	4603      	mov	r3, r0
 8000762:	2b00      	cmp	r3, #0
 8000764:	d001      	beq.n	800076a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000766:	f000 fa1f 	bl	8000ba8 <Error_Handler>
  }
}
 800076a:	bf00      	nop
 800076c:	3750      	adds	r7, #80	; 0x50
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	40023800 	.word	0x40023800
 8000778:	40007000 	.word	0x40007000

0800077c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000782:	463b      	mov	r3, r7
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800078e:	4b21      	ldr	r3, [pc, #132]	; (8000814 <MX_ADC1_Init+0x98>)
 8000790:	4a21      	ldr	r2, [pc, #132]	; (8000818 <MX_ADC1_Init+0x9c>)
 8000792:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <MX_ADC1_Init+0x98>)
 8000796:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800079a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800079c:	4b1d      	ldr	r3, [pc, #116]	; (8000814 <MX_ADC1_Init+0x98>)
 800079e:	2200      	movs	r2, #0
 80007a0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80007a2:	4b1c      	ldr	r3, [pc, #112]	; (8000814 <MX_ADC1_Init+0x98>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80007a8:	4b1a      	ldr	r3, [pc, #104]	; (8000814 <MX_ADC1_Init+0x98>)
 80007aa:	2201      	movs	r2, #1
 80007ac:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80007ae:	4b19      	ldr	r3, [pc, #100]	; (8000814 <MX_ADC1_Init+0x98>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80007b6:	4b17      	ldr	r3, [pc, #92]	; (8000814 <MX_ADC1_Init+0x98>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007bc:	4b15      	ldr	r3, [pc, #84]	; (8000814 <MX_ADC1_Init+0x98>)
 80007be:	4a17      	ldr	r2, [pc, #92]	; (800081c <MX_ADC1_Init+0xa0>)
 80007c0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007c2:	4b14      	ldr	r3, [pc, #80]	; (8000814 <MX_ADC1_Init+0x98>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007c8:	4b12      	ldr	r3, [pc, #72]	; (8000814 <MX_ADC1_Init+0x98>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007ce:	4b11      	ldr	r3, [pc, #68]	; (8000814 <MX_ADC1_Init+0x98>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007d6:	4b0f      	ldr	r3, [pc, #60]	; (8000814 <MX_ADC1_Init+0x98>)
 80007d8:	2201      	movs	r2, #1
 80007da:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007dc:	480d      	ldr	r0, [pc, #52]	; (8000814 <MX_ADC1_Init+0x98>)
 80007de:	f000 fba7 	bl	8000f30 <HAL_ADC_Init>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80007e8:	f000 f9de 	bl	8000ba8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007f0:	2301      	movs	r3, #1
 80007f2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007f8:	463b      	mov	r3, r7
 80007fa:	4619      	mov	r1, r3
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <MX_ADC1_Init+0x98>)
 80007fe:	f000 fed3 	bl	80015a8 <HAL_ADC_ConfigChannel>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000808:	f000 f9ce 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800080c:	bf00      	nop
 800080e:	3710      	adds	r7, #16
 8000810:	46bd      	mov	sp, r7
 8000812:	bd80      	pop	{r7, pc}
 8000814:	20004048 	.word	0x20004048
 8000818:	40012000 	.word	0x40012000
 800081c:	0f000001 	.word	0x0f000001

08000820 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <MX_USART2_UART_Init+0x50>)
 8000828:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800082c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000830:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000832:	4b0e      	ldr	r3, [pc, #56]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000840:	2200      	movs	r2, #0
 8000842:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000844:	4b09      	ldr	r3, [pc, #36]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000846:	220c      	movs	r2, #12
 8000848:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800084a:	4b08      	ldr	r3, [pc, #32]	; (800086c <MX_USART2_UART_Init+0x4c>)
 800084c:	2200      	movs	r2, #0
 800084e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000850:	4b06      	ldr	r3, [pc, #24]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000852:	2200      	movs	r2, #0
 8000854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000856:	4805      	ldr	r0, [pc, #20]	; (800086c <MX_USART2_UART_Init+0x4c>)
 8000858:	f002 fb12 	bl	8002e80 <HAL_UART_Init>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000862:	f000 f9a1 	bl	8000ba8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000866:	bf00      	nop
 8000868:	bd80      	pop	{r7, pc}
 800086a:	bf00      	nop
 800086c:	2000409c 	.word	0x2000409c
 8000870:	40004400 	.word	0x40004400

08000874 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08a      	sub	sp, #40	; 0x28
 8000878:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0314 	add.w	r3, r7, #20
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	613b      	str	r3, [r7, #16]
 800088e:	4b2d      	ldr	r3, [pc, #180]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	4a2c      	ldr	r2, [pc, #176]	; (8000944 <MX_GPIO_Init+0xd0>)
 8000894:	f043 0304 	orr.w	r3, r3, #4
 8000898:	6313      	str	r3, [r2, #48]	; 0x30
 800089a:	4b2a      	ldr	r3, [pc, #168]	; (8000944 <MX_GPIO_Init+0xd0>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089e:	f003 0304 	and.w	r3, r3, #4
 80008a2:	613b      	str	r3, [r7, #16]
 80008a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	60fb      	str	r3, [r7, #12]
 80008aa:	4b26      	ldr	r3, [pc, #152]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	4a25      	ldr	r2, [pc, #148]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008b4:	6313      	str	r3, [r2, #48]	; 0x30
 80008b6:	4b23      	ldr	r3, [pc, #140]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008be:	60fb      	str	r3, [r7, #12]
 80008c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c2:	2300      	movs	r3, #0
 80008c4:	60bb      	str	r3, [r7, #8]
 80008c6:	4b1f      	ldr	r3, [pc, #124]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	4a1e      	ldr	r2, [pc, #120]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	6313      	str	r3, [r2, #48]	; 0x30
 80008d2:	4b1c      	ldr	r3, [pc, #112]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60bb      	str	r3, [r7, #8]
 80008dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008de:	2300      	movs	r3, #0
 80008e0:	607b      	str	r3, [r7, #4]
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e6:	4a17      	ldr	r2, [pc, #92]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008e8:	f043 0302 	orr.w	r3, r3, #2
 80008ec:	6313      	str	r3, [r2, #48]	; 0x30
 80008ee:	4b15      	ldr	r3, [pc, #84]	; (8000944 <MX_GPIO_Init+0xd0>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	f003 0302 	and.w	r3, r3, #2
 80008f6:	607b      	str	r3, [r7, #4]
 80008f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	2120      	movs	r1, #32
 80008fe:	4812      	ldr	r0, [pc, #72]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000900:	f001 fb20 	bl	8001f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000904:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000908:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <MX_GPIO_Init+0xd8>)
 800090c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090e:	2300      	movs	r3, #0
 8000910:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	480d      	ldr	r0, [pc, #52]	; (8000950 <MX_GPIO_Init+0xdc>)
 800091a:	f001 f981 	bl	8001c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800091e:	2320      	movs	r3, #32
 8000920:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000922:	2301      	movs	r3, #1
 8000924:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	4804      	ldr	r0, [pc, #16]	; (8000948 <MX_GPIO_Init+0xd4>)
 8000936:	f001 f973 	bl	8001c20 <HAL_GPIO_Init>

}
 800093a:	bf00      	nop
 800093c:	3728      	adds	r7, #40	; 0x28
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}
 8000942:	bf00      	nop
 8000944:	40023800 	.word	0x40023800
 8000948:	40020000 	.word	0x40020000
 800094c:	10210000 	.word	0x10210000
 8000950:	40020800 	.word	0x40020800

08000954 <uart_send>:

/* USER CODE BEGIN 4 */

void uart_send(uint8_t *data)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b084      	sub	sp, #16
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
	uint16_t size = (uint16_t)strlen((const char *)data);
 800095c:	6878      	ldr	r0, [r7, #4]
 800095e:	f7ff fc57 	bl	8000210 <strlen>
 8000962:	4603      	mov	r3, r0
 8000964:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8000966:	89fa      	ldrh	r2, [r7, #14]
 8000968:	f04f 33ff 	mov.w	r3, #4294967295
 800096c:	6879      	ldr	r1, [r7, #4]
 800096e:	4803      	ldr	r0, [pc, #12]	; (800097c <uart_send+0x28>)
 8000970:	f002 fad3 	bl	8002f1a <HAL_UART_Transmit>
}
 8000974:	bf00      	nop
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	2000409c 	.word	0x2000409c

08000980 <TaskUARTProcessInit>:


void TaskUARTProcessInit(void const * argument)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8000988:	2001      	movs	r0, #1
 800098a:	f003 f9e2 	bl	8003d52 <osDelay>
 800098e:	e7fb      	b.n	8000988 <TaskUARTProcessInit+0x8>

08000990 <TaskDisplayInit>:
  }
}

void TaskDisplayInit(void const * argument)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  osEvent event;

  uint16_t ADCValuebefore = 0;
 8000998:	2300      	movs	r3, #0
 800099a:	82fb      	strh	r3, [r7, #22]
  uint16_t ADCValue = 0;
 800099c:	2300      	movs	r3, #0
 800099e:	82bb      	strh	r3, [r7, #20]
		ADCValue = HAL_ADC_GetValue(&hadc1);
	}
	else Error_Handler();
#endif

	event = osMessageGet(ADCQueue, 100);
 80009a0:	4b52      	ldr	r3, [pc, #328]	; (8000aec <TaskDisplayInit+0x15c>)
 80009a2:	6819      	ldr	r1, [r3, #0]
 80009a4:	f107 0308 	add.w	r3, r7, #8
 80009a8:	2264      	movs	r2, #100	; 0x64
 80009aa:	4618      	mov	r0, r3
 80009ac:	f003 fa4e 	bl	8003e4c <osMessageGet>
	if(event.status == osEventMessage)
 80009b0:	68bb      	ldr	r3, [r7, #8]
 80009b2:	2b10      	cmp	r3, #16
 80009b4:	d101      	bne.n	80009ba <TaskDisplayInit+0x2a>
	{
		ADCValue = event.value.v;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	82bb      	strh	r3, [r7, #20]
	/*
	 * Description: This part must detect the button press. To do so, it must debounce the button,
	 * and and consider the ADC error.
	 */

	if( !((ADCValue < (ADCValuebefore + KEY_ERROR)) && (ADCValue > (ADCValuebefore - KEY_ERROR))) )
 80009ba:	8aba      	ldrh	r2, [r7, #20]
 80009bc:	8afb      	ldrh	r3, [r7, #22]
 80009be:	3332      	adds	r3, #50	; 0x32
 80009c0:	429a      	cmp	r2, r3
 80009c2:	da05      	bge.n	80009d0 <TaskDisplayInit+0x40>
 80009c4:	8aba      	ldrh	r2, [r7, #20]
 80009c6:	8afb      	ldrh	r3, [r7, #22]
 80009c8:	3b32      	subs	r3, #50	; 0x32
 80009ca:	429a      	cmp	r2, r3
 80009cc:	f300 8084 	bgt.w	8000ad8 <TaskDisplayInit+0x148>
	{

		if ( (ADCValue > KEY_UP_LOWER) && (ADCValue < KEY_UP_UPPER) )
 80009d0:	8abb      	ldrh	r3, [r7, #20]
 80009d2:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 80009d6:	d915      	bls.n	8000a04 <TaskDisplayInit+0x74>
 80009d8:	8abb      	ldrh	r3, [r7, #20]
 80009da:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 80009de:	d211      	bcs.n	8000a04 <TaskDisplayInit+0x74>
		{
			sprintf(usart_buffer,"UP\r\n");
 80009e0:	4b43      	ldr	r3, [pc, #268]	; (8000af0 <TaskDisplayInit+0x160>)
 80009e2:	4a44      	ldr	r2, [pc, #272]	; (8000af4 <TaskDisplayInit+0x164>)
 80009e4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80009e8:	6018      	str	r0, [r3, #0]
 80009ea:	3304      	adds	r3, #4
 80009ec:	7019      	strb	r1, [r3, #0]
			uart_send(usart_buffer);
 80009ee:	4840      	ldr	r0, [pc, #256]	; (8000af0 <TaskDisplayInit+0x160>)
 80009f0:	f7ff ffb0 	bl	8000954 <uart_send>
			TM_HD44780_Clear();
 80009f4:	f005 fdac 	bl	8006550 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "UP");
 80009f8:	4a3f      	ldr	r2, [pc, #252]	; (8000af8 <TaskDisplayInit+0x168>)
 80009fa:	2100      	movs	r1, #0
 80009fc:	2000      	movs	r0, #0
 80009fe:	f005 fdb3 	bl	8006568 <TM_HD44780_Puts>
		{
 8000a02:	e069      	b.n	8000ad8 <TaskDisplayInit+0x148>
		}
		else if (( (ADCValue > KEY_DOWN_LOWER) && (ADCValue < KEY_DOWN_UPPER) ))
 8000a04:	8abb      	ldrh	r3, [r7, #20]
 8000a06:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	d918      	bls.n	8000a40 <TaskDisplayInit+0xb0>
 8000a0e:	8abb      	ldrh	r3, [r7, #20]
 8000a10:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000a14:	d214      	bcs.n	8000a40 <TaskDisplayInit+0xb0>
		{
			sprintf(usart_buffer,"DOWN\r\n");
 8000a16:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a18:	4a38      	ldr	r2, [pc, #224]	; (8000afc <TaskDisplayInit+0x16c>)
 8000a1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a1e:	6018      	str	r0, [r3, #0]
 8000a20:	3304      	adds	r3, #4
 8000a22:	8019      	strh	r1, [r3, #0]
 8000a24:	3302      	adds	r3, #2
 8000a26:	0c0a      	lsrs	r2, r1, #16
 8000a28:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000a2a:	4831      	ldr	r0, [pc, #196]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a2c:	f7ff ff92 	bl	8000954 <uart_send>
			TM_HD44780_Clear();
 8000a30:	f005 fd8e 	bl	8006550 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "DOWN");
 8000a34:	4a32      	ldr	r2, [pc, #200]	; (8000b00 <TaskDisplayInit+0x170>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f005 fd95 	bl	8006568 <TM_HD44780_Puts>
		{
 8000a3e:	e04b      	b.n	8000ad8 <TaskDisplayInit+0x148>
		}
		else if (( (ADCValue > KEY_RIGHT_LOWER) && (ADCValue < KEY_RIGHT_UPPER) ))
 8000a40:	8abb      	ldrh	r3, [r7, #20]
 8000a42:	2b31      	cmp	r3, #49	; 0x31
 8000a44:	d810      	bhi.n	8000a68 <TaskDisplayInit+0xd8>
		{
			sprintf(usart_buffer,"RIGHT\r\n");
 8000a46:	4b2a      	ldr	r3, [pc, #168]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a48:	4a2e      	ldr	r2, [pc, #184]	; (8000b04 <TaskDisplayInit+0x174>)
 8000a4a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a4e:	e883 0003 	stmia.w	r3, {r0, r1}
			uart_send(usart_buffer);
 8000a52:	4827      	ldr	r0, [pc, #156]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a54:	f7ff ff7e 	bl	8000954 <uart_send>
			TM_HD44780_Clear();
 8000a58:	f005 fd7a 	bl	8006550 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "RIGHT");
 8000a5c:	4a2a      	ldr	r2, [pc, #168]	; (8000b08 <TaskDisplayInit+0x178>)
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2000      	movs	r0, #0
 8000a62:	f005 fd81 	bl	8006568 <TM_HD44780_Puts>
 8000a66:	e037      	b.n	8000ad8 <TaskDisplayInit+0x148>
		}
		else if (( (ADCValue > KEY_LEFT_LOWER) && (ADCValue < KEY_LEFT_UPPER) ))
 8000a68:	8abb      	ldrh	r3, [r7, #20]
 8000a6a:	f640 126a 	movw	r2, #2410	; 0x96a
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d919      	bls.n	8000aa6 <TaskDisplayInit+0x116>
 8000a72:	8abb      	ldrh	r3, [r7, #20]
 8000a74:	f640 12cd 	movw	r2, #2509	; 0x9cd
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d814      	bhi.n	8000aa6 <TaskDisplayInit+0x116>
		{
			sprintf(usart_buffer,"LEFT\r\n");
 8000a7c:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a7e:	4a23      	ldr	r2, [pc, #140]	; (8000b0c <TaskDisplayInit+0x17c>)
 8000a80:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000a84:	6018      	str	r0, [r3, #0]
 8000a86:	3304      	adds	r3, #4
 8000a88:	8019      	strh	r1, [r3, #0]
 8000a8a:	3302      	adds	r3, #2
 8000a8c:	0c0a      	lsrs	r2, r1, #16
 8000a8e:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000a90:	4817      	ldr	r0, [pc, #92]	; (8000af0 <TaskDisplayInit+0x160>)
 8000a92:	f7ff ff5f 	bl	8000954 <uart_send>
			TM_HD44780_Clear();
 8000a96:	f005 fd5b 	bl	8006550 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "LEFT");
 8000a9a:	4a1d      	ldr	r2, [pc, #116]	; (8000b10 <TaskDisplayInit+0x180>)
 8000a9c:	2100      	movs	r1, #0
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f005 fd62 	bl	8006568 <TM_HD44780_Puts>
		{
 8000aa4:	e018      	b.n	8000ad8 <TaskDisplayInit+0x148>
		}
		else if (( (ADCValue > KEY_SELECT_LOWER) && (ADCValue < KEY_SELECT_UPPER) ))
 8000aa6:	8abb      	ldrh	r3, [r7, #20]
 8000aa8:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d913      	bls.n	8000ad8 <TaskDisplayInit+0x148>
 8000ab0:	8abb      	ldrh	r3, [r7, #20]
 8000ab2:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000ab6:	4293      	cmp	r3, r2
 8000ab8:	d80e      	bhi.n	8000ad8 <TaskDisplayInit+0x148>
		{
			sprintf(usart_buffer,"SELECT\r\n");
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <TaskDisplayInit+0x160>)
 8000abc:	4a15      	ldr	r2, [pc, #84]	; (8000b14 <TaskDisplayInit+0x184>)
 8000abe:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ac0:	c303      	stmia	r3!, {r0, r1}
 8000ac2:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000ac4:	480a      	ldr	r0, [pc, #40]	; (8000af0 <TaskDisplayInit+0x160>)
 8000ac6:	f7ff ff45 	bl	8000954 <uart_send>
			TM_HD44780_Clear();
 8000aca:	f005 fd41 	bl	8006550 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "SELECT");
 8000ace:	4a12      	ldr	r2, [pc, #72]	; (8000b18 <TaskDisplayInit+0x188>)
 8000ad0:	2100      	movs	r1, #0
 8000ad2:	2000      	movs	r0, #0
 8000ad4:	f005 fd48 	bl	8006568 <TM_HD44780_Puts>
		}
	}
	HAL_ADC_Start(&hadc1);
 8000ad8:	4810      	ldr	r0, [pc, #64]	; (8000b1c <TaskDisplayInit+0x18c>)
 8000ada:	f000 fa6d 	bl	8000fb8 <HAL_ADC_Start>

	ADCValuebefore = ADCValue;
 8000ade:	8abb      	ldrh	r3, [r7, #20]
 8000ae0:	82fb      	strh	r3, [r7, #22]

    osDelay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f003 f935 	bl	8003d52 <osDelay>
	event = osMessageGet(ADCQueue, 100);
 8000ae8:	e75a      	b.n	80009a0 <TaskDisplayInit+0x10>
 8000aea:	bf00      	nop
 8000aec:	20004094 	.word	0x20004094
 8000af0:	20000000 	.word	0x20000000
 8000af4:	080069f0 	.word	0x080069f0
 8000af8:	080069f8 	.word	0x080069f8
 8000afc:	080069fc 	.word	0x080069fc
 8000b00:	08006a04 	.word	0x08006a04
 8000b04:	08006a0c 	.word	0x08006a0c
 8000b08:	08006a14 	.word	0x08006a14
 8000b0c:	08006a1c 	.word	0x08006a1c
 8000b10:	08006a24 	.word	0x08006a24
 8000b14:	08006a2c 	.word	0x08006a2c
 8000b18:	08006a38 	.word	0x08006a38
 8000b1c:	20004048 	.word	0x20004048

08000b20 <HAL_ADC_ConvCpltCallback>:
  }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <HAL_ADC_ConvCpltCallback+0x3c>)
 8000b2e:	4293      	cmp	r3, r2
 8000b30:	d110      	bne.n	8000b54 <HAL_ADC_ConvCpltCallback+0x34>
	{
		uint16_t ADCValue = HAL_ADC_GetValue(hadc);
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f000 fd17 	bl	8001566 <HAL_ADC_GetValue>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	81fb      	strh	r3, [r7, #14]
		if(osMessagePut (ADCQueue, ADCValue, 100) != osOK)
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_ADC_ConvCpltCallback+0x40>)
 8000b3e:	681b      	ldr	r3, [r3, #0]
 8000b40:	89f9      	ldrh	r1, [r7, #14]
 8000b42:	2264      	movs	r2, #100	; 0x64
 8000b44:	4618      	mov	r0, r3
 8000b46:	f003 f941 	bl	8003dcc <osMessagePut>
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	2b00      	cmp	r3, #0
 8000b4e:	d001      	beq.n	8000b54 <HAL_ADC_ConvCpltCallback+0x34>
		{
		  Error_Handler();
 8000b50:	f000 f82a 	bl	8000ba8 <Error_Handler>
		}
	}

}
 8000b54:	bf00      	nop
 8000b56:	3710      	adds	r7, #16
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40012000 	.word	0x40012000
 8000b60:	20004094 	.word	0x20004094

08000b64 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b6c:	2001      	movs	r0, #1
 8000b6e:	f003 f8f0 	bl	8003d52 <osDelay>
 8000b72:	e7fb      	b.n	8000b6c <StartDefaultTask+0x8>

08000b74 <Task2Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2Init */
void Task2Init(void const * argument)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b082      	sub	sp, #8
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2Init */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000b7c:	2001      	movs	r0, #1
 8000b7e:	f003 f8e8 	bl	8003d52 <osDelay>
 8000b82:	e7fb      	b.n	8000b7c <Task2Init+0x8>

08000b84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b92:	4293      	cmp	r3, r2
 8000b94:	d101      	bne.n	8000b9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b96:	f005 fac3 	bl	8006120 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b9a:	bf00      	nop
 8000b9c:	3708      	adds	r7, #8
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	bf00      	nop
 8000ba4:	40001000 	.word	0x40001000

08000ba8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
	...

08000bb8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b082      	sub	sp, #8
 8000bbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	607b      	str	r3, [r7, #4]
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x54>)
 8000bc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc6:	4a11      	ldr	r2, [pc, #68]	; (8000c0c <HAL_MspInit+0x54>)
 8000bc8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bcc:	6453      	str	r3, [r2, #68]	; 0x44
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x54>)
 8000bd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bd2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd6:	607b      	str	r3, [r7, #4]
 8000bd8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bda:	2300      	movs	r3, #0
 8000bdc:	603b      	str	r3, [r7, #0]
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x54>)
 8000be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be2:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_MspInit+0x54>)
 8000be4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <HAL_MspInit+0x54>)
 8000bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf2:	603b      	str	r3, [r7, #0]
 8000bf4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	210f      	movs	r1, #15
 8000bfa:	f06f 0001 	mvn.w	r0, #1
 8000bfe:	f000 ffc3 	bl	8001b88 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	bf00      	nop
 8000c04:	3708      	adds	r7, #8
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	40023800 	.word	0x40023800

08000c10 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c18:	f107 0314 	add.w	r3, r7, #20
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	601a      	str	r2, [r3, #0]
 8000c20:	605a      	str	r2, [r3, #4]
 8000c22:	609a      	str	r2, [r3, #8]
 8000c24:	60da      	str	r2, [r3, #12]
 8000c26:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a1b      	ldr	r2, [pc, #108]	; (8000c9c <HAL_ADC_MspInit+0x8c>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d12f      	bne.n	8000c92 <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c32:	2300      	movs	r3, #0
 8000c34:	613b      	str	r3, [r7, #16]
 8000c36:	4b1a      	ldr	r3, [pc, #104]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c3a:	4a19      	ldr	r2, [pc, #100]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c3c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c40:	6453      	str	r3, [r2, #68]	; 0x44
 8000c42:	4b17      	ldr	r3, [pc, #92]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c4a:	613b      	str	r3, [r7, #16]
 8000c4c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	4b13      	ldr	r3, [pc, #76]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c56:	4a12      	ldr	r2, [pc, #72]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c58:	f043 0301 	orr.w	r3, r3, #1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <HAL_ADC_MspInit+0x90>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c62:	f003 0301 	and.w	r3, r3, #1
 8000c66:	60fb      	str	r3, [r7, #12]
 8000c68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000c6a:	2301      	movs	r3, #1
 8000c6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c72:	2300      	movs	r3, #0
 8000c74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c76:	f107 0314 	add.w	r3, r7, #20
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4809      	ldr	r0, [pc, #36]	; (8000ca4 <HAL_ADC_MspInit+0x94>)
 8000c7e:	f000 ffcf 	bl	8001c20 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2105      	movs	r1, #5
 8000c86:	2012      	movs	r0, #18
 8000c88:	f000 ff7e 	bl	8001b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000c8c:	2012      	movs	r0, #18
 8000c8e:	f000 ff97 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3728      	adds	r7, #40	; 0x28
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40012000 	.word	0x40012000
 8000ca0:	40023800 	.word	0x40023800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08a      	sub	sp, #40	; 0x28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 0314 	add.w	r3, r7, #20
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_UART_MspInit+0x94>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d133      	bne.n	8000d32 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cca:	2300      	movs	r3, #0
 8000ccc:	613b      	str	r3, [r7, #16]
 8000cce:	4b1c      	ldr	r3, [pc, #112]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd2:	4a1b      	ldr	r2, [pc, #108]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000cda:	4b19      	ldr	r3, [pc, #100]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ce2:	613b      	str	r3, [r7, #16]
 8000ce4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	60fb      	str	r3, [r7, #12]
 8000cea:	4b15      	ldr	r3, [pc, #84]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cee:	4a14      	ldr	r2, [pc, #80]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf0:	f043 0301 	orr.w	r3, r3, #1
 8000cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf6:	4b12      	ldr	r3, [pc, #72]	; (8000d40 <HAL_UART_MspInit+0x98>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfa:	f003 0301 	and.w	r3, r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000d02:	230c      	movs	r3, #12
 8000d04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d06:	2302      	movs	r3, #2
 8000d08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0e:	2303      	movs	r3, #3
 8000d10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d12:	2307      	movs	r3, #7
 8000d14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d16:	f107 0314 	add.w	r3, r7, #20
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	4809      	ldr	r0, [pc, #36]	; (8000d44 <HAL_UART_MspInit+0x9c>)
 8000d1e:	f000 ff7f 	bl	8001c20 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000d22:	2200      	movs	r2, #0
 8000d24:	2105      	movs	r1, #5
 8000d26:	2026      	movs	r0, #38	; 0x26
 8000d28:	f000 ff2e 	bl	8001b88 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d2c:	2026      	movs	r0, #38	; 0x26
 8000d2e:	f000 ff47 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d32:	bf00      	nop
 8000d34:	3728      	adds	r7, #40	; 0x28
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	40004400 	.word	0x40004400
 8000d40:	40023800 	.word	0x40023800
 8000d44:	40020000 	.word	0x40020000

08000d48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d48:	b580      	push	{r7, lr}
 8000d4a:	b08c      	sub	sp, #48	; 0x30
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000d50:	2300      	movs	r3, #0
 8000d52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000d58:	2200      	movs	r2, #0
 8000d5a:	6879      	ldr	r1, [r7, #4]
 8000d5c:	2036      	movs	r0, #54	; 0x36
 8000d5e:	f000 ff13 	bl	8001b88 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000d62:	2036      	movs	r0, #54	; 0x36
 8000d64:	f000 ff2c 	bl	8001bc0 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d68:	2300      	movs	r3, #0
 8000d6a:	60fb      	str	r3, [r7, #12]
 8000d6c:	4b1f      	ldr	r3, [pc, #124]	; (8000dec <HAL_InitTick+0xa4>)
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_InitTick+0xa4>)
 8000d72:	f043 0310 	orr.w	r3, r3, #16
 8000d76:	6413      	str	r3, [r2, #64]	; 0x40
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_InitTick+0xa4>)
 8000d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7c:	f003 0310 	and.w	r3, r3, #16
 8000d80:	60fb      	str	r3, [r7, #12]
 8000d82:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d84:	f107 0210 	add.w	r2, r7, #16
 8000d88:	f107 0314 	add.w	r3, r7, #20
 8000d8c:	4611      	mov	r1, r2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f001 fa0c 	bl	80021ac <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000d94:	f001 f9e2 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	005b      	lsls	r3, r3, #1
 8000d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000da0:	4a13      	ldr	r2, [pc, #76]	; (8000df0 <HAL_InitTick+0xa8>)
 8000da2:	fba2 2303 	umull	r2, r3, r2, r3
 8000da6:	0c9b      	lsrs	r3, r3, #18
 8000da8:	3b01      	subs	r3, #1
 8000daa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000dac:	4b11      	ldr	r3, [pc, #68]	; (8000df4 <HAL_InitTick+0xac>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	; (8000df8 <HAL_InitTick+0xb0>)
 8000db0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000db2:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_InitTick+0xac>)
 8000db4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000db8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000dba:	4a0e      	ldr	r2, [pc, #56]	; (8000df4 <HAL_InitTick+0xac>)
 8000dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000dbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_InitTick+0xac>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000dcc:	4809      	ldr	r0, [pc, #36]	; (8000df4 <HAL_InitTick+0xac>)
 8000dce:	f001 fe19 	bl	8002a04 <HAL_TIM_Base_Init>
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d104      	bne.n	8000de2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000dd8:	4806      	ldr	r0, [pc, #24]	; (8000df4 <HAL_InitTick+0xac>)
 8000dda:	f001 fe48 	bl	8002a6e <HAL_TIM_Base_Start_IT>
 8000dde:	4603      	mov	r3, r0
 8000de0:	e000      	b.n	8000de4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000de2:	2301      	movs	r3, #1
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	3730      	adds	r7, #48	; 0x30
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40023800 	.word	0x40023800
 8000df0:	431bde83 	.word	0x431bde83
 8000df4:	200040dc 	.word	0x200040dc
 8000df8:	40001000 	.word	0x40001000

08000dfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e00:	bf00      	nop
 8000e02:	46bd      	mov	sp, r7
 8000e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e08:	4770      	bx	lr

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000e34:	4802      	ldr	r0, [pc, #8]	; (8000e40 <ADC_IRQHandler+0x10>)
 8000e36:	f000 fa55 	bl	80012e4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000e3a:	bf00      	nop
 8000e3c:	bd80      	pop	{r7, pc}
 8000e3e:	bf00      	nop
 8000e40:	20004048 	.word	0x20004048

08000e44 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e48:	4802      	ldr	r0, [pc, #8]	; (8000e54 <USART2_IRQHandler+0x10>)
 8000e4a:	f002 f8ff 	bl	800304c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e4e:	bf00      	nop
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	2000409c 	.word	0x2000409c

08000e58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <TIM6_DAC_IRQHandler+0x10>)
 8000e5e:	f001 fe2a 	bl	8002ab6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200040dc 	.word	0x200040dc

08000e6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e70:	4b08      	ldr	r3, [pc, #32]	; (8000e94 <SystemInit+0x28>)
 8000e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e76:	4a07      	ldr	r2, [pc, #28]	; (8000e94 <SystemInit+0x28>)
 8000e78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e80:	4b04      	ldr	r3, [pc, #16]	; (8000e94 <SystemInit+0x28>)
 8000e82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000e86:	609a      	str	r2, [r3, #8]
#endif
}
 8000e88:	bf00      	nop
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	e000ed00 	.word	0xe000ed00

08000e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ed0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000e9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000e9e:	e003      	b.n	8000ea8 <LoopCopyDataInit>

08000ea0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000ea0:	4b0c      	ldr	r3, [pc, #48]	; (8000ed4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000ea2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000ea4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000ea6:	3104      	adds	r1, #4

08000ea8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000ea8:	480b      	ldr	r0, [pc, #44]	; (8000ed8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000eaa:	4b0c      	ldr	r3, [pc, #48]	; (8000edc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000eac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000eae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000eb0:	d3f6      	bcc.n	8000ea0 <CopyDataInit>
  ldr  r2, =_sbss
 8000eb2:	4a0b      	ldr	r2, [pc, #44]	; (8000ee0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000eb4:	e002      	b.n	8000ebc <LoopFillZerobss>

08000eb6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000eb6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000eb8:	f842 3b04 	str.w	r3, [r2], #4

08000ebc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000ebc:	4b09      	ldr	r3, [pc, #36]	; (8000ee4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000ebe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000ec0:	d3f9      	bcc.n	8000eb6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ec2:	f7ff ffd3 	bl	8000e6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ec6:	f005 fce1 	bl	800688c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eca:	f7ff fb43 	bl	8000554 <main>
  bx  lr    
 8000ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000ed4:	08006a74 	.word	0x08006a74
  ldr  r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000edc:	20000040 	.word	0x20000040
  ldr  r2, =_sbss
 8000ee0:	20000040 	.word	0x20000040
  ldr  r3, = _ebss
 8000ee4:	2000411c 	.word	0x2000411c

08000ee8 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee8:	e7fe      	b.n	8000ee8 <CAN1_RX0_IRQHandler>
	...

08000eec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef0:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <HAL_Init+0x40>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4a0d      	ldr	r2, [pc, #52]	; (8000f2c <HAL_Init+0x40>)
 8000ef6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000efa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000efc:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <HAL_Init+0x40>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	4a0a      	ldr	r2, [pc, #40]	; (8000f2c <HAL_Init+0x40>)
 8000f02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000f06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f08:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <HAL_Init+0x40>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4a07      	ldr	r2, [pc, #28]	; (8000f2c <HAL_Init+0x40>)
 8000f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f14:	2003      	movs	r0, #3
 8000f16:	f000 fe2c 	bl	8001b72 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1a:	2000      	movs	r0, #0
 8000f1c:	f7ff ff14 	bl	8000d48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f20:	f7ff fe4a 	bl	8000bb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f24:	2300      	movs	r3, #0
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	40023c00 	.word	0x40023c00

08000f30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	2b00      	cmp	r3, #0
 8000f40:	d101      	bne.n	8000f46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000f42:	2301      	movs	r3, #1
 8000f44:	e033      	b.n	8000fae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d109      	bne.n	8000f62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f4e:	6878      	ldr	r0, [r7, #4]
 8000f50:	f7ff fe5e 	bl	8000c10 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	2200      	movs	r2, #0
 8000f58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f66:	f003 0310 	and.w	r3, r3, #16
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d118      	bne.n	8000fa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f72:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f76:	f023 0302 	bic.w	r3, r3, #2
 8000f7a:	f043 0202 	orr.w	r2, r3, #2
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000f82:	6878      	ldr	r0, [r7, #4]
 8000f84:	f000 fc42 	bl	800180c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f92:	f023 0303 	bic.w	r3, r3, #3
 8000f96:	f043 0201 	orr.w	r2, r3, #1
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	641a      	str	r2, [r3, #64]	; 0x40
 8000f9e:	e001      	b.n	8000fa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000fac:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	b085      	sub	sp, #20
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	d101      	bne.n	8000fd2 <HAL_ADC_Start+0x1a>
 8000fce:	2302      	movs	r3, #2
 8000fd0:	e0a5      	b.n	800111e <HAL_ADC_Start+0x166>
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689b      	ldr	r3, [r3, #8]
 8000fe0:	f003 0301 	and.w	r3, r3, #1
 8000fe4:	2b01      	cmp	r3, #1
 8000fe6:	d018      	beq.n	800101a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	689a      	ldr	r2, [r3, #8]
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	f042 0201 	orr.w	r2, r2, #1
 8000ff6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ff8:	4b4c      	ldr	r3, [pc, #304]	; (800112c <HAL_ADC_Start+0x174>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a4c      	ldr	r2, [pc, #304]	; (8001130 <HAL_ADC_Start+0x178>)
 8000ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8001002:	0c9a      	lsrs	r2, r3, #18
 8001004:	4613      	mov	r3, r2
 8001006:	005b      	lsls	r3, r3, #1
 8001008:	4413      	add	r3, r2
 800100a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800100c:	e002      	b.n	8001014 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800100e:	68bb      	ldr	r3, [r7, #8]
 8001010:	3b01      	subs	r3, #1
 8001012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001014:	68bb      	ldr	r3, [r7, #8]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d1f9      	bne.n	800100e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	689b      	ldr	r3, [r3, #8]
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	2b01      	cmp	r3, #1
 8001026:	d179      	bne.n	800111c <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001030:	f023 0301 	bic.w	r3, r3, #1
 8001034:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	685b      	ldr	r3, [r3, #4]
 8001042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001046:	2b00      	cmp	r3, #0
 8001048:	d007      	beq.n	800105a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001066:	d106      	bne.n	8001076 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800106c:	f023 0206 	bic.w	r2, r3, #6
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	645a      	str	r2, [r3, #68]	; 0x44
 8001074:	e002      	b.n	800107c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001084:	4b2b      	ldr	r3, [pc, #172]	; (8001134 <HAL_ADC_Start+0x17c>)
 8001086:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001090:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f003 031f 	and.w	r3, r3, #31
 800109a:	2b00      	cmp	r3, #0
 800109c:	d12a      	bne.n	80010f4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	4a25      	ldr	r2, [pc, #148]	; (8001138 <HAL_ADC_Start+0x180>)
 80010a4:	4293      	cmp	r3, r2
 80010a6:	d015      	beq.n	80010d4 <HAL_ADC_Start+0x11c>
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a23      	ldr	r2, [pc, #140]	; (800113c <HAL_ADC_Start+0x184>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d105      	bne.n	80010be <HAL_ADC_Start+0x106>
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_ADC_Start+0x17c>)
 80010b4:	685b      	ldr	r3, [r3, #4]
 80010b6:	f003 031f 	and.w	r3, r3, #31
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d00a      	beq.n	80010d4 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_ADC_Start+0x188>)
 80010c4:	4293      	cmp	r3, r2
 80010c6:	d129      	bne.n	800111c <HAL_ADC_Start+0x164>
 80010c8:	4b1a      	ldr	r3, [pc, #104]	; (8001134 <HAL_ADC_Start+0x17c>)
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 031f 	and.w	r3, r3, #31
 80010d0:	2b0f      	cmp	r3, #15
 80010d2:	d823      	bhi.n	800111c <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d11c      	bne.n	800111c <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	e013      	b.n	800111c <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a0f      	ldr	r2, [pc, #60]	; (8001138 <HAL_ADC_Start+0x180>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d10e      	bne.n	800111c <HAL_ADC_Start+0x164>
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d107      	bne.n	800111c <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800111a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 800111c:	2300      	movs	r3, #0
}
 800111e:	4618      	mov	r0, r3
 8001120:	3714      	adds	r7, #20
 8001122:	46bd      	mov	sp, r7
 8001124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001128:	4770      	bx	lr
 800112a:	bf00      	nop
 800112c:	20000034 	.word	0x20000034
 8001130:	431bde83 	.word	0x431bde83
 8001134:	40012300 	.word	0x40012300
 8001138:	40012000 	.word	0x40012000
 800113c:	40012100 	.word	0x40012100
 8001140:	40012200 	.word	0x40012200

08001144 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800114c:	2300      	movs	r3, #0
 800114e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001156:	2b01      	cmp	r3, #1
 8001158:	d101      	bne.n	800115e <HAL_ADC_Start_IT+0x1a>
 800115a:	2302      	movs	r3, #2
 800115c:	e0b0      	b.n	80012c0 <HAL_ADC_Start_IT+0x17c>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2201      	movs	r2, #1
 8001162:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	2b01      	cmp	r3, #1
 8001172:	d018      	beq.n	80011a6 <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	689a      	ldr	r2, [r3, #8]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0201 	orr.w	r2, r2, #1
 8001182:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001184:	4b51      	ldr	r3, [pc, #324]	; (80012cc <HAL_ADC_Start_IT+0x188>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a51      	ldr	r2, [pc, #324]	; (80012d0 <HAL_ADC_Start_IT+0x18c>)
 800118a:	fba2 2303 	umull	r2, r3, r2, r3
 800118e:	0c9a      	lsrs	r2, r3, #18
 8001190:	4613      	mov	r3, r2
 8001192:	005b      	lsls	r3, r3, #1
 8001194:	4413      	add	r3, r2
 8001196:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001198:	e002      	b.n	80011a0 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800119a:	68bb      	ldr	r3, [r7, #8]
 800119c:	3b01      	subs	r3, #1
 800119e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d1f9      	bne.n	800119a <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	2b01      	cmp	r3, #1
 80011b2:	f040 8084 	bne.w	80012be <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ba:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80011be:	f023 0301 	bic.w	r3, r3, #1
 80011c2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d007      	beq.n	80011e8 <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80011e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011f4:	d106      	bne.n	8001204 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011fa:	f023 0206 	bic.w	r2, r3, #6
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	645a      	str	r2, [r3, #68]	; 0x44
 8001202:	e002      	b.n	800120a <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	2200      	movs	r2, #0
 8001208:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	2200      	movs	r2, #0
 800120e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001212:	4b30      	ldr	r3, [pc, #192]	; (80012d4 <HAL_ADC_Start_IT+0x190>)
 8001214:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800121e:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	687a      	ldr	r2, [r7, #4]
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800122e:	f043 0320 	orr.w	r3, r3, #32
 8001232:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	f003 031f 	and.w	r3, r3, #31
 800123c:	2b00      	cmp	r3, #0
 800123e:	d12a      	bne.n	8001296 <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a24      	ldr	r2, [pc, #144]	; (80012d8 <HAL_ADC_Start_IT+0x194>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d015      	beq.n	8001276 <HAL_ADC_Start_IT+0x132>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a23      	ldr	r2, [pc, #140]	; (80012dc <HAL_ADC_Start_IT+0x198>)
 8001250:	4293      	cmp	r3, r2
 8001252:	d105      	bne.n	8001260 <HAL_ADC_Start_IT+0x11c>
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_ADC_Start_IT+0x190>)
 8001256:	685b      	ldr	r3, [r3, #4]
 8001258:	f003 031f 	and.w	r3, r3, #31
 800125c:	2b00      	cmp	r3, #0
 800125e:	d00a      	beq.n	8001276 <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a1e      	ldr	r2, [pc, #120]	; (80012e0 <HAL_ADC_Start_IT+0x19c>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d129      	bne.n	80012be <HAL_ADC_Start_IT+0x17a>
 800126a:	4b1a      	ldr	r3, [pc, #104]	; (80012d4 <HAL_ADC_Start_IT+0x190>)
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f003 031f 	and.w	r3, r3, #31
 8001272:	2b0f      	cmp	r3, #15
 8001274:	d823      	bhi.n	80012be <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11c      	bne.n	80012be <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001292:	609a      	str	r2, [r3, #8]
 8001294:	e013      	b.n	80012be <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	4a0f      	ldr	r2, [pc, #60]	; (80012d8 <HAL_ADC_Start_IT+0x194>)
 800129c:	4293      	cmp	r3, r2
 800129e:	d10e      	bne.n	80012be <HAL_ADC_Start_IT+0x17a>
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d107      	bne.n	80012be <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	689a      	ldr	r2, [r3, #8]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012bc:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 80012be:	2300      	movs	r3, #0
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3714      	adds	r7, #20
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	20000034 	.word	0x20000034
 80012d0:	431bde83 	.word	0x431bde83
 80012d4:	40012300 	.word	0x40012300
 80012d8:	40012000 	.word	0x40012000
 80012dc:	40012100 	.word	0x40012100
 80012e0:	40012200 	.word	0x40012200

080012e4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]
 80012f0:	2300      	movs	r3, #0
 80012f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	f003 0302 	and.w	r3, r3, #2
 80012fe:	2b02      	cmp	r3, #2
 8001300:	bf0c      	ite	eq
 8001302:	2301      	moveq	r3, #1
 8001304:	2300      	movne	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 0320 	and.w	r3, r3, #32
 8001314:	2b20      	cmp	r3, #32
 8001316:	bf0c      	ite	eq
 8001318:	2301      	moveq	r3, #1
 800131a:	2300      	movne	r3, #0
 800131c:	b2db      	uxtb	r3, r3
 800131e:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2b00      	cmp	r3, #0
 8001324:	d049      	beq.n	80013ba <HAL_ADC_IRQHandler+0xd6>
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d046      	beq.n	80013ba <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001330:	f003 0310 	and.w	r3, r3, #16
 8001334:	2b00      	cmp	r3, #0
 8001336:	d105      	bne.n	8001344 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	689b      	ldr	r3, [r3, #8]
 800134a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134e:	2b00      	cmp	r3, #0
 8001350:	d12b      	bne.n	80013aa <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001356:	2b00      	cmp	r3, #0
 8001358:	d127      	bne.n	80013aa <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001364:	2b00      	cmp	r3, #0
 8001366:	d006      	beq.n	8001376 <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	689b      	ldr	r3, [r3, #8]
 800136e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001372:	2b00      	cmp	r3, #0
 8001374:	d119      	bne.n	80013aa <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	685a      	ldr	r2, [r3, #4]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 0220 	bic.w	r2, r2, #32
 8001384:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d105      	bne.n	80013aa <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	f043 0201 	orr.w	r2, r3, #1
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013aa:	6878      	ldr	r0, [r7, #4]
 80013ac:	f7ff fbb8 	bl	8000b20 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f06f 0212 	mvn.w	r2, #18
 80013b8:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0304 	and.w	r3, r3, #4
 80013c4:	2b04      	cmp	r3, #4
 80013c6:	bf0c      	ite	eq
 80013c8:	2301      	moveq	r3, #1
 80013ca:	2300      	movne	r3, #0
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013da:	2b80      	cmp	r3, #128	; 0x80
 80013dc:	bf0c      	ite	eq
 80013de:	2301      	moveq	r3, #1
 80013e0:	2300      	movne	r3, #0
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d057      	beq.n	800149c <HAL_ADC_IRQHandler+0x1b8>
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d054      	beq.n	800149c <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f6:	f003 0310 	and.w	r3, r3, #16
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d105      	bne.n	800140a <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001402:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	689b      	ldr	r3, [r3, #8]
 8001410:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d139      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800141e:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001422:	2b00      	cmp	r3, #0
 8001424:	d006      	beq.n	8001434 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001430:	2b00      	cmp	r3, #0
 8001432:	d12b      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685b      	ldr	r3, [r3, #4]
 800143a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800143e:	2b00      	cmp	r3, #0
 8001440:	d124      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	689b      	ldr	r3, [r3, #8]
 8001448:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800144c:	2b00      	cmp	r3, #0
 800144e:	d11d      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001454:	2b00      	cmp	r3, #0
 8001456:	d119      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	685a      	ldr	r2, [r3, #4]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001466:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800146c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d105      	bne.n	800148c <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001484:	f043 0201 	orr.w	r2, r3, #1
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f000 fab9 	bl	8001a04 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f06f 020c 	mvn.w	r2, #12
 800149a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 0301 	and.w	r3, r3, #1
 80014a6:	2b01      	cmp	r3, #1
 80014a8:	bf0c      	ite	eq
 80014aa:	2301      	moveq	r3, #1
 80014ac:	2300      	movne	r3, #0
 80014ae:	b2db      	uxtb	r3, r3
 80014b0:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014bc:	2b40      	cmp	r3, #64	; 0x40
 80014be:	bf0c      	ite	eq
 80014c0:	2301      	moveq	r3, #1
 80014c2:	2300      	movne	r3, #0
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d017      	beq.n	80014fe <HAL_ADC_IRQHandler+0x21a>
 80014ce:	68bb      	ldr	r3, [r7, #8]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d014      	beq.n	80014fe <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	2b01      	cmp	r3, #1
 80014e0:	d10d      	bne.n	80014fe <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014e6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f000 f846 	bl	8001580 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f06f 0201 	mvn.w	r2, #1
 80014fc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0320 	and.w	r3, r3, #32
 8001508:	2b20      	cmp	r3, #32
 800150a:	bf0c      	ite	eq
 800150c:	2301      	moveq	r3, #1
 800150e:	2300      	movne	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800151e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001522:	bf0c      	ite	eq
 8001524:	2301      	moveq	r3, #1
 8001526:	2300      	movne	r3, #0
 8001528:	b2db      	uxtb	r3, r3
 800152a:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d015      	beq.n	800155e <HAL_ADC_IRQHandler+0x27a>
 8001532:	68bb      	ldr	r3, [r7, #8]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d012      	beq.n	800155e <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153c:	f043 0202 	orr.w	r2, r3, #2
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f06f 0220 	mvn.w	r2, #32
 800154c:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f820 	bl	8001594 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f06f 0220 	mvn.w	r2, #32
 800155c:	601a      	str	r2, [r3, #0]
  }
}
 800155e:	bf00      	nop
 8001560:	3710      	adds	r7, #16
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}

08001566 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001566:	b480      	push	{r7}
 8001568:	b083      	sub	sp, #12
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001574:	4618      	mov	r0, r3
 8001576:	370c      	adds	r7, #12
 8001578:	46bd      	mov	sp, r7
 800157a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157e:	4770      	bx	lr

08001580 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001580:	b480      	push	{r7}
 8001582:	b083      	sub	sp, #12
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001594:	b480      	push	{r7}
 8001596:	b083      	sub	sp, #12
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800159c:	bf00      	nop
 800159e:	370c      	adds	r7, #12
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80015a8:	b480      	push	{r7}
 80015aa:	b085      	sub	sp, #20
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80015b2:	2300      	movs	r3, #0
 80015b4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d101      	bne.n	80015c4 <HAL_ADC_ConfigChannel+0x1c>
 80015c0:	2302      	movs	r3, #2
 80015c2:	e113      	b.n	80017ec <HAL_ADC_ConfigChannel+0x244>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2201      	movs	r2, #1
 80015c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	d925      	bls.n	8001620 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	68d9      	ldr	r1, [r3, #12]
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	b29b      	uxth	r3, r3
 80015e0:	461a      	mov	r2, r3
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	3b1e      	subs	r3, #30
 80015ea:	2207      	movs	r2, #7
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	43da      	mvns	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	400a      	ands	r2, r1
 80015f8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	68d9      	ldr	r1, [r3, #12]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	683b      	ldr	r3, [r7, #0]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	b29b      	uxth	r3, r3
 800160a:	4618      	mov	r0, r3
 800160c:	4603      	mov	r3, r0
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4403      	add	r3, r0
 8001612:	3b1e      	subs	r3, #30
 8001614:	409a      	lsls	r2, r3
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	430a      	orrs	r2, r1
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	e022      	b.n	8001666 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6919      	ldr	r1, [r3, #16]
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	b29b      	uxth	r3, r3
 800162c:	461a      	mov	r2, r3
 800162e:	4613      	mov	r3, r2
 8001630:	005b      	lsls	r3, r3, #1
 8001632:	4413      	add	r3, r2
 8001634:	2207      	movs	r2, #7
 8001636:	fa02 f303 	lsl.w	r3, r2, r3
 800163a:	43da      	mvns	r2, r3
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	400a      	ands	r2, r1
 8001642:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	6919      	ldr	r1, [r3, #16]
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	b29b      	uxth	r3, r3
 8001654:	4618      	mov	r0, r3
 8001656:	4603      	mov	r3, r0
 8001658:	005b      	lsls	r3, r3, #1
 800165a:	4403      	add	r3, r0
 800165c:	409a      	lsls	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	430a      	orrs	r2, r1
 8001664:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b06      	cmp	r3, #6
 800166c:	d824      	bhi.n	80016b8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001674:	683b      	ldr	r3, [r7, #0]
 8001676:	685a      	ldr	r2, [r3, #4]
 8001678:	4613      	mov	r3, r2
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	4413      	add	r3, r2
 800167e:	3b05      	subs	r3, #5
 8001680:	221f      	movs	r2, #31
 8001682:	fa02 f303 	lsl.w	r3, r2, r3
 8001686:	43da      	mvns	r2, r3
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	400a      	ands	r2, r1
 800168e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	b29b      	uxth	r3, r3
 800169c:	4618      	mov	r0, r3
 800169e:	683b      	ldr	r3, [r7, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	4613      	mov	r3, r2
 80016a4:	009b      	lsls	r3, r3, #2
 80016a6:	4413      	add	r3, r2
 80016a8:	3b05      	subs	r3, #5
 80016aa:	fa00 f203 	lsl.w	r2, r0, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	430a      	orrs	r2, r1
 80016b4:	635a      	str	r2, [r3, #52]	; 0x34
 80016b6:	e04c      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80016b8:	683b      	ldr	r3, [r7, #0]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b0c      	cmp	r3, #12
 80016be:	d824      	bhi.n	800170a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	685a      	ldr	r2, [r3, #4]
 80016ca:	4613      	mov	r3, r2
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	4413      	add	r3, r2
 80016d0:	3b23      	subs	r3, #35	; 0x23
 80016d2:	221f      	movs	r2, #31
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43da      	mvns	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	400a      	ands	r2, r1
 80016e0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685a      	ldr	r2, [r3, #4]
 80016f4:	4613      	mov	r3, r2
 80016f6:	009b      	lsls	r3, r3, #2
 80016f8:	4413      	add	r3, r2
 80016fa:	3b23      	subs	r3, #35	; 0x23
 80016fc:	fa00 f203 	lsl.w	r2, r0, r3
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	430a      	orrs	r2, r1
 8001706:	631a      	str	r2, [r3, #48]	; 0x30
 8001708:	e023      	b.n	8001752 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	3b41      	subs	r3, #65	; 0x41
 800171c:	221f      	movs	r2, #31
 800171e:	fa02 f303 	lsl.w	r3, r2, r3
 8001722:	43da      	mvns	r2, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	400a      	ands	r2, r1
 800172a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685a      	ldr	r2, [r3, #4]
 800173e:	4613      	mov	r3, r2
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	4413      	add	r3, r2
 8001744:	3b41      	subs	r3, #65	; 0x41
 8001746:	fa00 f203 	lsl.w	r2, r0, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	430a      	orrs	r2, r1
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001752:	4b29      	ldr	r3, [pc, #164]	; (80017f8 <HAL_ADC_ConfigChannel+0x250>)
 8001754:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a28      	ldr	r2, [pc, #160]	; (80017fc <HAL_ADC_ConfigChannel+0x254>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d10f      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d8>
 8001760:	683b      	ldr	r3, [r7, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	2b12      	cmp	r3, #18
 8001766:	d10b      	bne.n	8001780 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a1d      	ldr	r2, [pc, #116]	; (80017fc <HAL_ADC_ConfigChannel+0x254>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12b      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x23a>
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4a1c      	ldr	r2, [pc, #112]	; (8001800 <HAL_ADC_ConfigChannel+0x258>)
 8001790:	4293      	cmp	r3, r2
 8001792:	d003      	beq.n	800179c <HAL_ADC_ConfigChannel+0x1f4>
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2b11      	cmp	r3, #17
 800179a:	d122      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	685b      	ldr	r3, [r3, #4]
 80017ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a11      	ldr	r2, [pc, #68]	; (8001800 <HAL_ADC_ConfigChannel+0x258>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d111      	bne.n	80017e2 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80017be:	4b11      	ldr	r3, [pc, #68]	; (8001804 <HAL_ADC_ConfigChannel+0x25c>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a11      	ldr	r2, [pc, #68]	; (8001808 <HAL_ADC_ConfigChannel+0x260>)
 80017c4:	fba2 2303 	umull	r2, r3, r2, r3
 80017c8:	0c9a      	lsrs	r2, r3, #18
 80017ca:	4613      	mov	r3, r2
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	4413      	add	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017d4:	e002      	b.n	80017dc <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80017d6:	68bb      	ldr	r3, [r7, #8]
 80017d8:	3b01      	subs	r3, #1
 80017da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d1f9      	bne.n	80017d6 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	40012300 	.word	0x40012300
 80017fc:	40012000 	.word	0x40012000
 8001800:	10000012 	.word	0x10000012
 8001804:	20000034 	.word	0x20000034
 8001808:	431bde83 	.word	0x431bde83

0800180c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800180c:	b480      	push	{r7}
 800180e:	b085      	sub	sp, #20
 8001810:	af00      	add	r7, sp, #0
 8001812:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001814:	4b79      	ldr	r3, [pc, #484]	; (80019fc <ADC_Init+0x1f0>)
 8001816:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	685b      	ldr	r3, [r3, #4]
 800181c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	431a      	orrs	r2, r3
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685a      	ldr	r2, [r3, #4]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001840:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	6859      	ldr	r1, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	691b      	ldr	r3, [r3, #16]
 800184c:	021a      	lsls	r2, r3, #8
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	430a      	orrs	r2, r1
 8001854:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	685a      	ldr	r2, [r3, #4]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001864:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6859      	ldr	r1, [r3, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	689a      	ldr	r2, [r3, #8]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	689a      	ldr	r2, [r3, #8]
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001886:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6899      	ldr	r1, [r3, #8]
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	68da      	ldr	r2, [r3, #12]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	430a      	orrs	r2, r1
 8001898:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800189e:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <ADC_Init+0x1f4>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d022      	beq.n	80018ea <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	689a      	ldr	r2, [r3, #8]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018b2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6899      	ldr	r1, [r3, #8]
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	430a      	orrs	r2, r1
 80018c4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	689a      	ldr	r2, [r3, #8]
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80018d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	6899      	ldr	r1, [r3, #8]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	430a      	orrs	r2, r1
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	e00f      	b.n	800190a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	689a      	ldr	r2, [r3, #8]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80018f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689a      	ldr	r2, [r3, #8]
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001908:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	689a      	ldr	r2, [r3, #8]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 0202 	bic.w	r2, r2, #2
 8001918:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6899      	ldr	r1, [r3, #8]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	7e1b      	ldrb	r3, [r3, #24]
 8001924:	005a      	lsls	r2, r3, #1
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	430a      	orrs	r2, r1
 800192c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d01b      	beq.n	8001970 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001946:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	685a      	ldr	r2, [r3, #4]
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001956:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	6859      	ldr	r1, [r3, #4]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001962:	3b01      	subs	r3, #1
 8001964:	035a      	lsls	r2, r3, #13
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	430a      	orrs	r2, r1
 800196c:	605a      	str	r2, [r3, #4]
 800196e:	e007      	b.n	8001980 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	685a      	ldr	r2, [r3, #4]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800197e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800198e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	69db      	ldr	r3, [r3, #28]
 800199a:	3b01      	subs	r3, #1
 800199c:	051a      	lsls	r2, r3, #20
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	689a      	ldr	r2, [r3, #8]
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80019b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	6899      	ldr	r1, [r3, #8]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80019c2:	025a      	lsls	r2, r3, #9
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	430a      	orrs	r2, r1
 80019ca:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689a      	ldr	r2, [r3, #8]
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80019da:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	6899      	ldr	r1, [r3, #8]
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	695b      	ldr	r3, [r3, #20]
 80019e6:	029a      	lsls	r2, r3, #10
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	430a      	orrs	r2, r1
 80019ee:	609a      	str	r2, [r3, #8]
}
 80019f0:	bf00      	nop
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fa:	4770      	bx	lr
 80019fc:	40012300 	.word	0x40012300
 8001a00:	0f000001 	.word	0x0f000001

08001a04 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001a0c:	bf00      	nop
 8001a0e:	370c      	adds	r7, #12
 8001a10:	46bd      	mov	sp, r7
 8001a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a16:	4770      	bx	lr

08001a18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	b085      	sub	sp, #20
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a28:	4b0c      	ldr	r3, [pc, #48]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a2a:	68db      	ldr	r3, [r3, #12]
 8001a2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a2e:	68ba      	ldr	r2, [r7, #8]
 8001a30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a34:	4013      	ands	r3, r2
 8001a36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a40:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a4a:	4a04      	ldr	r2, [pc, #16]	; (8001a5c <__NVIC_SetPriorityGrouping+0x44>)
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	60d3      	str	r3, [r2, #12]
}
 8001a50:	bf00      	nop
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	e000ed00 	.word	0xe000ed00

08001a60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <__NVIC_GetPriorityGrouping+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	0a1b      	lsrs	r3, r3, #8
 8001a6a:	f003 0307 	and.w	r3, r3, #7
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr
 8001a78:	e000ed00 	.word	0xe000ed00

08001a7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b083      	sub	sp, #12
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	4603      	mov	r3, r0
 8001a84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	db0b      	blt.n	8001aa6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	f003 021f 	and.w	r2, r3, #31
 8001a94:	4907      	ldr	r1, [pc, #28]	; (8001ab4 <__NVIC_EnableIRQ+0x38>)
 8001a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a9a:	095b      	lsrs	r3, r3, #5
 8001a9c:	2001      	movs	r0, #1
 8001a9e:	fa00 f202 	lsl.w	r2, r0, r2
 8001aa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	370c      	adds	r7, #12
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	e000e100 	.word	0xe000e100

08001ab8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	6039      	str	r1, [r7, #0]
 8001ac2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	db0a      	blt.n	8001ae2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001acc:	683b      	ldr	r3, [r7, #0]
 8001ace:	b2da      	uxtb	r2, r3
 8001ad0:	490c      	ldr	r1, [pc, #48]	; (8001b04 <__NVIC_SetPriority+0x4c>)
 8001ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad6:	0112      	lsls	r2, r2, #4
 8001ad8:	b2d2      	uxtb	r2, r2
 8001ada:	440b      	add	r3, r1
 8001adc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ae0:	e00a      	b.n	8001af8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	b2da      	uxtb	r2, r3
 8001ae6:	4908      	ldr	r1, [pc, #32]	; (8001b08 <__NVIC_SetPriority+0x50>)
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	f003 030f 	and.w	r3, r3, #15
 8001aee:	3b04      	subs	r3, #4
 8001af0:	0112      	lsls	r2, r2, #4
 8001af2:	b2d2      	uxtb	r2, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	761a      	strb	r2, [r3, #24]
}
 8001af8:	bf00      	nop
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b02:	4770      	bx	lr
 8001b04:	e000e100 	.word	0xe000e100
 8001b08:	e000ed00 	.word	0xe000ed00

08001b0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	f003 0307 	and.w	r3, r3, #7
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b20:	69fb      	ldr	r3, [r7, #28]
 8001b22:	f1c3 0307 	rsb	r3, r3, #7
 8001b26:	2b04      	cmp	r3, #4
 8001b28:	bf28      	it	cs
 8001b2a:	2304      	movcs	r3, #4
 8001b2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	3304      	adds	r3, #4
 8001b32:	2b06      	cmp	r3, #6
 8001b34:	d902      	bls.n	8001b3c <NVIC_EncodePriority+0x30>
 8001b36:	69fb      	ldr	r3, [r7, #28]
 8001b38:	3b03      	subs	r3, #3
 8001b3a:	e000      	b.n	8001b3e <NVIC_EncodePriority+0x32>
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b40:	f04f 32ff 	mov.w	r2, #4294967295
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43da      	mvns	r2, r3
 8001b4c:	68bb      	ldr	r3, [r7, #8]
 8001b4e:	401a      	ands	r2, r3
 8001b50:	697b      	ldr	r3, [r7, #20]
 8001b52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	697b      	ldr	r3, [r7, #20]
 8001b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5e:	43d9      	mvns	r1, r3
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b64:	4313      	orrs	r3, r2
         );
}
 8001b66:	4618      	mov	r0, r3
 8001b68:	3724      	adds	r7, #36	; 0x24
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b70:	4770      	bx	lr

08001b72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b082      	sub	sp, #8
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b7a:	6878      	ldr	r0, [r7, #4]
 8001b7c:	f7ff ff4c 	bl	8001a18 <__NVIC_SetPriorityGrouping>
}
 8001b80:	bf00      	nop
 8001b82:	3708      	adds	r7, #8
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}

08001b88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b086      	sub	sp, #24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
 8001b94:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b9a:	f7ff ff61 	bl	8001a60 <__NVIC_GetPriorityGrouping>
 8001b9e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	68b9      	ldr	r1, [r7, #8]
 8001ba4:	6978      	ldr	r0, [r7, #20]
 8001ba6:	f7ff ffb1 	bl	8001b0c <NVIC_EncodePriority>
 8001baa:	4602      	mov	r2, r0
 8001bac:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bb0:	4611      	mov	r1, r2
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	f7ff ff80 	bl	8001ab8 <__NVIC_SetPriority>
}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}

08001bc0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f7ff ff54 	bl	8001a7c <__NVIC_EnableIRQ>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d004      	beq.n	8001bfa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2280      	movs	r2, #128	; 0x80
 8001bf4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	e00c      	b.n	8001c14 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2205      	movs	r2, #5
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	681a      	ldr	r2, [r3, #0]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f022 0201 	bic.w	r2, r2, #1
 8001c10:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001c12:	2300      	movs	r3, #0
}
 8001c14:	4618      	mov	r0, r3
 8001c16:	370c      	adds	r7, #12
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1e:	4770      	bx	lr

08001c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b089      	sub	sp, #36	; 0x24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c32:	2300      	movs	r3, #0
 8001c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c36:	2300      	movs	r3, #0
 8001c38:	61fb      	str	r3, [r7, #28]
 8001c3a:	e165      	b.n	8001f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	69fb      	ldr	r3, [r7, #28]
 8001c40:	fa02 f303 	lsl.w	r3, r2, r3
 8001c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	697a      	ldr	r2, [r7, #20]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c50:	693a      	ldr	r2, [r7, #16]
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	429a      	cmp	r2, r3
 8001c56:	f040 8154 	bne.w	8001f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d00b      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	685b      	ldr	r3, [r3, #4]
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	d007      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c6e:	2b11      	cmp	r3, #17
 8001c70:	d003      	beq.n	8001c7a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b12      	cmp	r3, #18
 8001c78:	d130      	bne.n	8001cdc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	689b      	ldr	r3, [r3, #8]
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	2203      	movs	r2, #3
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	68da      	ldr	r2, [r3, #12]
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	005b      	lsls	r3, r3, #1
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb0:	2201      	movs	r2, #1
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	091b      	lsrs	r3, r3, #4
 8001cc6:	f003 0201 	and.w	r2, r3, #1
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ce2:	69fb      	ldr	r3, [r7, #28]
 8001ce4:	005b      	lsls	r3, r3, #1
 8001ce6:	2203      	movs	r2, #3
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	689a      	ldr	r2, [r3, #8]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	005b      	lsls	r3, r3, #1
 8001cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4313      	orrs	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	69ba      	ldr	r2, [r7, #24]
 8001d0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d003      	beq.n	8001d1c <HAL_GPIO_Init+0xfc>
 8001d14:	683b      	ldr	r3, [r7, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	2b12      	cmp	r3, #18
 8001d1a:	d123      	bne.n	8001d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	08da      	lsrs	r2, r3, #3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3208      	adds	r2, #8
 8001d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	f003 0307 	and.w	r3, r3, #7
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	220f      	movs	r2, #15
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	69ba      	ldr	r2, [r7, #24]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	691a      	ldr	r2, [r3, #16]
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	f003 0307 	and.w	r3, r3, #7
 8001d4a:	009b      	lsls	r3, r3, #2
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4313      	orrs	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	08da      	lsrs	r2, r3, #3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	3208      	adds	r2, #8
 8001d5e:	69b9      	ldr	r1, [r7, #24]
 8001d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	005b      	lsls	r3, r3, #1
 8001d6e:	2203      	movs	r2, #3
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f003 0203 	and.w	r2, r3, #3
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	005b      	lsls	r3, r3, #1
 8001d88:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8c:	69ba      	ldr	r2, [r7, #24]
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d98:	683b      	ldr	r3, [r7, #0]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	f000 80ae 	beq.w	8001f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
 8001daa:	4b5c      	ldr	r3, [pc, #368]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a5b      	ldr	r2, [pc, #364]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b59      	ldr	r3, [pc, #356]	; (8001f1c <HAL_GPIO_Init+0x2fc>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dc2:	4a57      	ldr	r2, [pc, #348]	; (8001f20 <HAL_GPIO_Init+0x300>)
 8001dc4:	69fb      	ldr	r3, [r7, #28]
 8001dc6:	089b      	lsrs	r3, r3, #2
 8001dc8:	3302      	adds	r3, #2
 8001dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 0303 	and.w	r3, r3, #3
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	220f      	movs	r2, #15
 8001dda:	fa02 f303 	lsl.w	r3, r2, r3
 8001dde:	43db      	mvns	r3, r3
 8001de0:	69ba      	ldr	r2, [r7, #24]
 8001de2:	4013      	ands	r3, r2
 8001de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a4e      	ldr	r2, [pc, #312]	; (8001f24 <HAL_GPIO_Init+0x304>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d025      	beq.n	8001e3a <HAL_GPIO_Init+0x21a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a4d      	ldr	r2, [pc, #308]	; (8001f28 <HAL_GPIO_Init+0x308>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d01f      	beq.n	8001e36 <HAL_GPIO_Init+0x216>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a4c      	ldr	r2, [pc, #304]	; (8001f2c <HAL_GPIO_Init+0x30c>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d019      	beq.n	8001e32 <HAL_GPIO_Init+0x212>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a4b      	ldr	r2, [pc, #300]	; (8001f30 <HAL_GPIO_Init+0x310>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d013      	beq.n	8001e2e <HAL_GPIO_Init+0x20e>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	4a4a      	ldr	r2, [pc, #296]	; (8001f34 <HAL_GPIO_Init+0x314>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d00d      	beq.n	8001e2a <HAL_GPIO_Init+0x20a>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4a49      	ldr	r2, [pc, #292]	; (8001f38 <HAL_GPIO_Init+0x318>)
 8001e12:	4293      	cmp	r3, r2
 8001e14:	d007      	beq.n	8001e26 <HAL_GPIO_Init+0x206>
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	4a48      	ldr	r2, [pc, #288]	; (8001f3c <HAL_GPIO_Init+0x31c>)
 8001e1a:	4293      	cmp	r3, r2
 8001e1c:	d101      	bne.n	8001e22 <HAL_GPIO_Init+0x202>
 8001e1e:	2306      	movs	r3, #6
 8001e20:	e00c      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e22:	2307      	movs	r3, #7
 8001e24:	e00a      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e26:	2305      	movs	r3, #5
 8001e28:	e008      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e2a:	2304      	movs	r3, #4
 8001e2c:	e006      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e2e:	2303      	movs	r3, #3
 8001e30:	e004      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e32:	2302      	movs	r3, #2
 8001e34:	e002      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e36:	2301      	movs	r3, #1
 8001e38:	e000      	b.n	8001e3c <HAL_GPIO_Init+0x21c>
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	69fa      	ldr	r2, [r7, #28]
 8001e3e:	f002 0203 	and.w	r2, r2, #3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4093      	lsls	r3, r2
 8001e46:	69ba      	ldr	r2, [r7, #24]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e4c:	4934      	ldr	r1, [pc, #208]	; (8001f20 <HAL_GPIO_Init+0x300>)
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e5a:	4b39      	ldr	r3, [pc, #228]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e7e:	4a30      	ldr	r2, [pc, #192]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e84:	4b2e      	ldr	r3, [pc, #184]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eae:	4b24      	ldr	r3, [pc, #144]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eb0:	689b      	ldr	r3, [r3, #8]
 8001eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eb4:	693b      	ldr	r3, [r7, #16]
 8001eb6:	43db      	mvns	r3, r3
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	4013      	ands	r3, r2
 8001ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001eca:	69ba      	ldr	r2, [r7, #24]
 8001ecc:	693b      	ldr	r3, [r7, #16]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ed2:	4a1b      	ldr	r2, [pc, #108]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001ed4:	69bb      	ldr	r3, [r7, #24]
 8001ed6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ed8:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d003      	beq.n	8001efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001ef4:	69ba      	ldr	r2, [r7, #24]
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001efc:	4a10      	ldr	r2, [pc, #64]	; (8001f40 <HAL_GPIO_Init+0x320>)
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	3301      	adds	r3, #1
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	69fb      	ldr	r3, [r7, #28]
 8001f0a:	2b0f      	cmp	r3, #15
 8001f0c:	f67f ae96 	bls.w	8001c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f10:	bf00      	nop
 8001f12:	3724      	adds	r7, #36	; 0x24
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	40023800 	.word	0x40023800
 8001f20:	40013800 	.word	0x40013800
 8001f24:	40020000 	.word	0x40020000
 8001f28:	40020400 	.word	0x40020400
 8001f2c:	40020800 	.word	0x40020800
 8001f30:	40020c00 	.word	0x40020c00
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40021400 	.word	0x40021400
 8001f3c:	40021800 	.word	0x40021800
 8001f40:	40013c00 	.word	0x40013c00

08001f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f44:	b480      	push	{r7}
 8001f46:	b083      	sub	sp, #12
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	807b      	strh	r3, [r7, #2]
 8001f50:	4613      	mov	r3, r2
 8001f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f54:	787b      	ldrb	r3, [r7, #1]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d003      	beq.n	8001f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f60:	e003      	b.n	8001f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f62:	887b      	ldrh	r3, [r7, #2]
 8001f64:	041a      	lsls	r2, r3, #16
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	619a      	str	r2, [r3, #24]
}
 8001f6a:	bf00      	nop
 8001f6c:	370c      	adds	r7, #12
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f74:	4770      	bx	lr
	...

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0cc      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b68      	ldr	r3, [pc, #416]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 030f 	and.w	r3, r3, #15
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d90c      	bls.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b65      	ldr	r3, [pc, #404]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fa2:	4b63      	ldr	r3, [pc, #396]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 030f 	and.w	r3, r3, #15
 8001faa:	683a      	ldr	r2, [r7, #0]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d001      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fb0:	2301      	movs	r3, #1
 8001fb2:	e0b8      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0302 	and.w	r3, r3, #2
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d020      	beq.n	8002002 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f003 0304 	and.w	r3, r3, #4
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d005      	beq.n	8001fd8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fcc:	4b59      	ldr	r3, [pc, #356]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	4a58      	ldr	r2, [pc, #352]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fd6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f003 0308 	and.w	r3, r3, #8
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d005      	beq.n	8001ff0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001fe4:	4b53      	ldr	r3, [pc, #332]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	4a52      	ldr	r2, [pc, #328]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001fea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001fee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ff0:	4b50      	ldr	r3, [pc, #320]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	494d      	ldr	r1, [pc, #308]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	f003 0301 	and.w	r3, r3, #1
 800200a:	2b00      	cmp	r3, #0
 800200c:	d044      	beq.n	8002098 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b01      	cmp	r3, #1
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002016:	4b47      	ldr	r3, [pc, #284]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d119      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e07f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b02      	cmp	r3, #2
 800202c:	d003      	beq.n	8002036 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002032:	2b03      	cmp	r3, #3
 8002034:	d107      	bne.n	8002046 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002036:	4b3f      	ldr	r3, [pc, #252]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203e:	2b00      	cmp	r3, #0
 8002040:	d109      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002042:	2301      	movs	r3, #1
 8002044:	e06f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002046:	4b3b      	ldr	r3, [pc, #236]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 0302 	and.w	r3, r3, #2
 800204e:	2b00      	cmp	r3, #0
 8002050:	d101      	bne.n	8002056 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e067      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002056:	4b37      	ldr	r3, [pc, #220]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	689b      	ldr	r3, [r3, #8]
 800205a:	f023 0203 	bic.w	r2, r3, #3
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	4934      	ldr	r1, [pc, #208]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002064:	4313      	orrs	r3, r2
 8002066:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002068:	f004 f90a 	bl	8006280 <HAL_GetTick>
 800206c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800206e:	e00a      	b.n	8002086 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002070:	f004 f906 	bl	8006280 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e04f      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002086:	4b2b      	ldr	r3, [pc, #172]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002088:	689b      	ldr	r3, [r3, #8]
 800208a:	f003 020c 	and.w	r2, r3, #12
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	429a      	cmp	r2, r3
 8002096:	d1eb      	bne.n	8002070 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002098:	4b25      	ldr	r3, [pc, #148]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	683a      	ldr	r2, [r7, #0]
 80020a2:	429a      	cmp	r2, r3
 80020a4:	d20c      	bcs.n	80020c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020a6:	4b22      	ldr	r3, [pc, #136]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	b2d2      	uxtb	r2, r2
 80020ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ae:	4b20      	ldr	r3, [pc, #128]	; (8002130 <HAL_RCC_ClockConfig+0x1b8>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 030f 	and.w	r3, r3, #15
 80020b6:	683a      	ldr	r2, [r7, #0]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	d001      	beq.n	80020c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020bc:	2301      	movs	r3, #1
 80020be:	e032      	b.n	8002126 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f003 0304 	and.w	r3, r3, #4
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020cc:	4b19      	ldr	r3, [pc, #100]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ce:	689b      	ldr	r3, [r3, #8]
 80020d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	4916      	ldr	r1, [pc, #88]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020da:	4313      	orrs	r3, r2
 80020dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f003 0308 	and.w	r3, r3, #8
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d009      	beq.n	80020fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020ea:	4b12      	ldr	r3, [pc, #72]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020ec:	689b      	ldr	r3, [r3, #8]
 80020ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691b      	ldr	r3, [r3, #16]
 80020f6:	00db      	lsls	r3, r3, #3
 80020f8:	490e      	ldr	r1, [pc, #56]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 80020fa:	4313      	orrs	r3, r2
 80020fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80020fe:	f000 f887 	bl	8002210 <HAL_RCC_GetSysClockFreq>
 8002102:	4601      	mov	r1, r0
 8002104:	4b0b      	ldr	r3, [pc, #44]	; (8002134 <HAL_RCC_ClockConfig+0x1bc>)
 8002106:	689b      	ldr	r3, [r3, #8]
 8002108:	091b      	lsrs	r3, r3, #4
 800210a:	f003 030f 	and.w	r3, r3, #15
 800210e:	4a0a      	ldr	r2, [pc, #40]	; (8002138 <HAL_RCC_ClockConfig+0x1c0>)
 8002110:	5cd3      	ldrb	r3, [r2, r3]
 8002112:	fa21 f303 	lsr.w	r3, r1, r3
 8002116:	4a09      	ldr	r2, [pc, #36]	; (800213c <HAL_RCC_ClockConfig+0x1c4>)
 8002118:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800211a:	4b09      	ldr	r3, [pc, #36]	; (8002140 <HAL_RCC_ClockConfig+0x1c8>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f7fe fe12 	bl	8000d48 <HAL_InitTick>

  return HAL_OK;
 8002124:	2300      	movs	r3, #0
}
 8002126:	4618      	mov	r0, r3
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40023c00 	.word	0x40023c00
 8002134:	40023800 	.word	0x40023800
 8002138:	08006a4c 	.word	0x08006a4c
 800213c:	20000034 	.word	0x20000034
 8002140:	20000038 	.word	0x20000038

08002144 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002148:	4b03      	ldr	r3, [pc, #12]	; (8002158 <HAL_RCC_GetHCLKFreq+0x14>)
 800214a:	681b      	ldr	r3, [r3, #0]
}
 800214c:	4618      	mov	r0, r3
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	20000034 	.word	0x20000034

0800215c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002160:	f7ff fff0 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 8002164:	4601      	mov	r1, r0
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	0a9b      	lsrs	r3, r3, #10
 800216c:	f003 0307 	and.w	r3, r3, #7
 8002170:	4a03      	ldr	r2, [pc, #12]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002172:	5cd3      	ldrb	r3, [r2, r3]
 8002174:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40023800 	.word	0x40023800
 8002180:	08006a5c 	.word	0x08006a5c

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002188:	f7ff ffdc 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 800218c:	4601      	mov	r1, r0
 800218e:	4b05      	ldr	r3, [pc, #20]	; (80021a4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0b5b      	lsrs	r3, r3, #13
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4a03      	ldr	r2, [pc, #12]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800219a:	5cd3      	ldrb	r3, [r2, r3]
 800219c:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	bd80      	pop	{r7, pc}
 80021a4:	40023800 	.word	0x40023800
 80021a8:	08006a5c 	.word	0x08006a5c

080021ac <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b083      	sub	sp, #12
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
 80021b4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	220f      	movs	r2, #15
 80021ba:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80021bc:	4b12      	ldr	r3, [pc, #72]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	f003 0203 	and.w	r2, r3, #3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021ca:	689b      	ldr	r3, [r3, #8]
 80021cc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80021d4:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80021e0:	4b09      	ldr	r3, [pc, #36]	; (8002208 <HAL_RCC_GetClockConfig+0x5c>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	08db      	lsrs	r3, r3, #3
 80021e6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80021ee:	4b07      	ldr	r3, [pc, #28]	; (800220c <HAL_RCC_GetClockConfig+0x60>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 020f 	and.w	r2, r3, #15
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	601a      	str	r2, [r3, #0]
}
 80021fa:	bf00      	nop
 80021fc:	370c      	adds	r7, #12
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40023800 	.word	0x40023800
 800220c:	40023c00 	.word	0x40023c00

08002210 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002212:	b087      	sub	sp, #28
 8002214:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 800221e:	2300      	movs	r3, #0
 8002220:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002222:	2300      	movs	r3, #0
 8002224:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002226:	2300      	movs	r3, #0
 8002228:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800222a:	4bc6      	ldr	r3, [pc, #792]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	f003 030c 	and.w	r3, r3, #12
 8002232:	2b0c      	cmp	r3, #12
 8002234:	f200 817e 	bhi.w	8002534 <HAL_RCC_GetSysClockFreq+0x324>
 8002238:	a201      	add	r2, pc, #4	; (adr r2, 8002240 <HAL_RCC_GetSysClockFreq+0x30>)
 800223a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800223e:	bf00      	nop
 8002240:	08002275 	.word	0x08002275
 8002244:	08002535 	.word	0x08002535
 8002248:	08002535 	.word	0x08002535
 800224c:	08002535 	.word	0x08002535
 8002250:	0800227b 	.word	0x0800227b
 8002254:	08002535 	.word	0x08002535
 8002258:	08002535 	.word	0x08002535
 800225c:	08002535 	.word	0x08002535
 8002260:	08002281 	.word	0x08002281
 8002264:	08002535 	.word	0x08002535
 8002268:	08002535 	.word	0x08002535
 800226c:	08002535 	.word	0x08002535
 8002270:	080023dd 	.word	0x080023dd
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002274:	4bb4      	ldr	r3, [pc, #720]	; (8002548 <HAL_RCC_GetSysClockFreq+0x338>)
 8002276:	613b      	str	r3, [r7, #16]
       break;
 8002278:	e15f      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800227a:	4bb4      	ldr	r3, [pc, #720]	; (800254c <HAL_RCC_GetSysClockFreq+0x33c>)
 800227c:	613b      	str	r3, [r7, #16]
      break;
 800227e:	e15c      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002280:	4bb0      	ldr	r3, [pc, #704]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002288:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800228a:	4bae      	ldr	r3, [pc, #696]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d04a      	beq.n	800232c <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002296:	4bab      	ldr	r3, [pc, #684]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	099b      	lsrs	r3, r3, #6
 800229c:	f04f 0400 	mov.w	r4, #0
 80022a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80022a4:	f04f 0200 	mov.w	r2, #0
 80022a8:	ea03 0501 	and.w	r5, r3, r1
 80022ac:	ea04 0602 	and.w	r6, r4, r2
 80022b0:	4629      	mov	r1, r5
 80022b2:	4632      	mov	r2, r6
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	f04f 0400 	mov.w	r4, #0
 80022bc:	0154      	lsls	r4, r2, #5
 80022be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80022c2:	014b      	lsls	r3, r1, #5
 80022c4:	4619      	mov	r1, r3
 80022c6:	4622      	mov	r2, r4
 80022c8:	1b49      	subs	r1, r1, r5
 80022ca:	eb62 0206 	sbc.w	r2, r2, r6
 80022ce:	f04f 0300 	mov.w	r3, #0
 80022d2:	f04f 0400 	mov.w	r4, #0
 80022d6:	0194      	lsls	r4, r2, #6
 80022d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80022dc:	018b      	lsls	r3, r1, #6
 80022de:	1a5b      	subs	r3, r3, r1
 80022e0:	eb64 0402 	sbc.w	r4, r4, r2
 80022e4:	f04f 0100 	mov.w	r1, #0
 80022e8:	f04f 0200 	mov.w	r2, #0
 80022ec:	00e2      	lsls	r2, r4, #3
 80022ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80022f2:	00d9      	lsls	r1, r3, #3
 80022f4:	460b      	mov	r3, r1
 80022f6:	4614      	mov	r4, r2
 80022f8:	195b      	adds	r3, r3, r5
 80022fa:	eb44 0406 	adc.w	r4, r4, r6
 80022fe:	f04f 0100 	mov.w	r1, #0
 8002302:	f04f 0200 	mov.w	r2, #0
 8002306:	0262      	lsls	r2, r4, #9
 8002308:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800230c:	0259      	lsls	r1, r3, #9
 800230e:	460b      	mov	r3, r1
 8002310:	4614      	mov	r4, r2
 8002312:	4618      	mov	r0, r3
 8002314:	4621      	mov	r1, r4
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	f04f 0400 	mov.w	r4, #0
 800231c:	461a      	mov	r2, r3
 800231e:	4623      	mov	r3, r4
 8002320:	f7fd ff7e 	bl	8000220 <__aeabi_uldivmod>
 8002324:	4603      	mov	r3, r0
 8002326:	460c      	mov	r4, r1
 8002328:	617b      	str	r3, [r7, #20]
 800232a:	e049      	b.n	80023c0 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800232c:	4b85      	ldr	r3, [pc, #532]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	099b      	lsrs	r3, r3, #6
 8002332:	f04f 0400 	mov.w	r4, #0
 8002336:	f240 11ff 	movw	r1, #511	; 0x1ff
 800233a:	f04f 0200 	mov.w	r2, #0
 800233e:	ea03 0501 	and.w	r5, r3, r1
 8002342:	ea04 0602 	and.w	r6, r4, r2
 8002346:	4629      	mov	r1, r5
 8002348:	4632      	mov	r2, r6
 800234a:	f04f 0300 	mov.w	r3, #0
 800234e:	f04f 0400 	mov.w	r4, #0
 8002352:	0154      	lsls	r4, r2, #5
 8002354:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002358:	014b      	lsls	r3, r1, #5
 800235a:	4619      	mov	r1, r3
 800235c:	4622      	mov	r2, r4
 800235e:	1b49      	subs	r1, r1, r5
 8002360:	eb62 0206 	sbc.w	r2, r2, r6
 8002364:	f04f 0300 	mov.w	r3, #0
 8002368:	f04f 0400 	mov.w	r4, #0
 800236c:	0194      	lsls	r4, r2, #6
 800236e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002372:	018b      	lsls	r3, r1, #6
 8002374:	1a5b      	subs	r3, r3, r1
 8002376:	eb64 0402 	sbc.w	r4, r4, r2
 800237a:	f04f 0100 	mov.w	r1, #0
 800237e:	f04f 0200 	mov.w	r2, #0
 8002382:	00e2      	lsls	r2, r4, #3
 8002384:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002388:	00d9      	lsls	r1, r3, #3
 800238a:	460b      	mov	r3, r1
 800238c:	4614      	mov	r4, r2
 800238e:	195b      	adds	r3, r3, r5
 8002390:	eb44 0406 	adc.w	r4, r4, r6
 8002394:	f04f 0100 	mov.w	r1, #0
 8002398:	f04f 0200 	mov.w	r2, #0
 800239c:	02a2      	lsls	r2, r4, #10
 800239e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80023a2:	0299      	lsls	r1, r3, #10
 80023a4:	460b      	mov	r3, r1
 80023a6:	4614      	mov	r4, r2
 80023a8:	4618      	mov	r0, r3
 80023aa:	4621      	mov	r1, r4
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	f04f 0400 	mov.w	r4, #0
 80023b2:	461a      	mov	r2, r3
 80023b4:	4623      	mov	r3, r4
 80023b6:	f7fd ff33 	bl	8000220 <__aeabi_uldivmod>
 80023ba:	4603      	mov	r3, r0
 80023bc:	460c      	mov	r4, r1
 80023be:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80023c0:	4b60      	ldr	r3, [pc, #384]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	0c1b      	lsrs	r3, r3, #16
 80023c6:	f003 0303 	and.w	r3, r3, #3
 80023ca:	3301      	adds	r3, #1
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80023d0:	697a      	ldr	r2, [r7, #20]
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023d8:	613b      	str	r3, [r7, #16]
      break;
 80023da:	e0ae      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023dc:	4b59      	ldr	r3, [pc, #356]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023e4:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023e6:	4b57      	ldr	r3, [pc, #348]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d04a      	beq.n	8002488 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023f2:	4b54      	ldr	r3, [pc, #336]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	099b      	lsrs	r3, r3, #6
 80023f8:	f04f 0400 	mov.w	r4, #0
 80023fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002400:	f04f 0200 	mov.w	r2, #0
 8002404:	ea03 0501 	and.w	r5, r3, r1
 8002408:	ea04 0602 	and.w	r6, r4, r2
 800240c:	4629      	mov	r1, r5
 800240e:	4632      	mov	r2, r6
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	f04f 0400 	mov.w	r4, #0
 8002418:	0154      	lsls	r4, r2, #5
 800241a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800241e:	014b      	lsls	r3, r1, #5
 8002420:	4619      	mov	r1, r3
 8002422:	4622      	mov	r2, r4
 8002424:	1b49      	subs	r1, r1, r5
 8002426:	eb62 0206 	sbc.w	r2, r2, r6
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	f04f 0400 	mov.w	r4, #0
 8002432:	0194      	lsls	r4, r2, #6
 8002434:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002438:	018b      	lsls	r3, r1, #6
 800243a:	1a5b      	subs	r3, r3, r1
 800243c:	eb64 0402 	sbc.w	r4, r4, r2
 8002440:	f04f 0100 	mov.w	r1, #0
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	00e2      	lsls	r2, r4, #3
 800244a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800244e:	00d9      	lsls	r1, r3, #3
 8002450:	460b      	mov	r3, r1
 8002452:	4614      	mov	r4, r2
 8002454:	195b      	adds	r3, r3, r5
 8002456:	eb44 0406 	adc.w	r4, r4, r6
 800245a:	f04f 0100 	mov.w	r1, #0
 800245e:	f04f 0200 	mov.w	r2, #0
 8002462:	0262      	lsls	r2, r4, #9
 8002464:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8002468:	0259      	lsls	r1, r3, #9
 800246a:	460b      	mov	r3, r1
 800246c:	4614      	mov	r4, r2
 800246e:	4618      	mov	r0, r3
 8002470:	4621      	mov	r1, r4
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f04f 0400 	mov.w	r4, #0
 8002478:	461a      	mov	r2, r3
 800247a:	4623      	mov	r3, r4
 800247c:	f7fd fed0 	bl	8000220 <__aeabi_uldivmod>
 8002480:	4603      	mov	r3, r0
 8002482:	460c      	mov	r4, r1
 8002484:	617b      	str	r3, [r7, #20]
 8002486:	e049      	b.n	800251c <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002488:	4b2e      	ldr	r3, [pc, #184]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	099b      	lsrs	r3, r3, #6
 800248e:	f04f 0400 	mov.w	r4, #0
 8002492:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002496:	f04f 0200 	mov.w	r2, #0
 800249a:	ea03 0501 	and.w	r5, r3, r1
 800249e:	ea04 0602 	and.w	r6, r4, r2
 80024a2:	4629      	mov	r1, r5
 80024a4:	4632      	mov	r2, r6
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	f04f 0400 	mov.w	r4, #0
 80024ae:	0154      	lsls	r4, r2, #5
 80024b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80024b4:	014b      	lsls	r3, r1, #5
 80024b6:	4619      	mov	r1, r3
 80024b8:	4622      	mov	r2, r4
 80024ba:	1b49      	subs	r1, r1, r5
 80024bc:	eb62 0206 	sbc.w	r2, r2, r6
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	f04f 0400 	mov.w	r4, #0
 80024c8:	0194      	lsls	r4, r2, #6
 80024ca:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80024ce:	018b      	lsls	r3, r1, #6
 80024d0:	1a5b      	subs	r3, r3, r1
 80024d2:	eb64 0402 	sbc.w	r4, r4, r2
 80024d6:	f04f 0100 	mov.w	r1, #0
 80024da:	f04f 0200 	mov.w	r2, #0
 80024de:	00e2      	lsls	r2, r4, #3
 80024e0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80024e4:	00d9      	lsls	r1, r3, #3
 80024e6:	460b      	mov	r3, r1
 80024e8:	4614      	mov	r4, r2
 80024ea:	195b      	adds	r3, r3, r5
 80024ec:	eb44 0406 	adc.w	r4, r4, r6
 80024f0:	f04f 0100 	mov.w	r1, #0
 80024f4:	f04f 0200 	mov.w	r2, #0
 80024f8:	02a2      	lsls	r2, r4, #10
 80024fa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80024fe:	0299      	lsls	r1, r3, #10
 8002500:	460b      	mov	r3, r1
 8002502:	4614      	mov	r4, r2
 8002504:	4618      	mov	r0, r3
 8002506:	4621      	mov	r1, r4
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	f04f 0400 	mov.w	r4, #0
 800250e:	461a      	mov	r2, r3
 8002510:	4623      	mov	r3, r4
 8002512:	f7fd fe85 	bl	8000220 <__aeabi_uldivmod>
 8002516:	4603      	mov	r3, r0
 8002518:	460c      	mov	r4, r1
 800251a:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800251c:	4b09      	ldr	r3, [pc, #36]	; (8002544 <HAL_RCC_GetSysClockFreq+0x334>)
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0f1b      	lsrs	r3, r3, #28
 8002522:	f003 0307 	and.w	r3, r3, #7
 8002526:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8002528:	697a      	ldr	r2, [r7, #20]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002530:	613b      	str	r3, [r7, #16]
      break;
 8002532:	e002      	b.n	800253a <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002534:	4b04      	ldr	r3, [pc, #16]	; (8002548 <HAL_RCC_GetSysClockFreq+0x338>)
 8002536:	613b      	str	r3, [r7, #16]
      break;
 8002538:	bf00      	nop
    }
  }
  return sysclockfreq;
 800253a:	693b      	ldr	r3, [r7, #16]
}
 800253c:	4618      	mov	r0, r3
 800253e:	371c      	adds	r7, #28
 8002540:	46bd      	mov	sp, r7
 8002542:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002544:	40023800 	.word	0x40023800
 8002548:	00f42400 	.word	0x00f42400
 800254c:	007a1200 	.word	0x007a1200

08002550 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b086      	sub	sp, #24
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002558:	2300      	movs	r3, #0
 800255a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	f003 0301 	and.w	r3, r3, #1
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 8083 	beq.w	8002670 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800256a:	4b95      	ldr	r3, [pc, #596]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	f003 030c 	and.w	r3, r3, #12
 8002572:	2b04      	cmp	r3, #4
 8002574:	d019      	beq.n	80025aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002576:	4b92      	ldr	r3, [pc, #584]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800257e:	2b08      	cmp	r3, #8
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002582:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800258a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800258e:	d00c      	beq.n	80025aa <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002590:	4b8b      	ldr	r3, [pc, #556]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002598:	2b0c      	cmp	r3, #12
 800259a:	d112      	bne.n	80025c2 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800259c:	4b88      	ldr	r3, [pc, #544]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025a8:	d10b      	bne.n	80025c2 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025aa:	4b85      	ldr	r3, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d05b      	beq.n	800266e <HAL_RCC_OscConfig+0x11e>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d157      	bne.n	800266e <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	e216      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	685b      	ldr	r3, [r3, #4]
 80025c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025ca:	d106      	bne.n	80025da <HAL_RCC_OscConfig+0x8a>
 80025cc:	4b7c      	ldr	r3, [pc, #496]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	4a7b      	ldr	r2, [pc, #492]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d6:	6013      	str	r3, [r2, #0]
 80025d8:	e01d      	b.n	8002616 <HAL_RCC_OscConfig+0xc6>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025e2:	d10c      	bne.n	80025fe <HAL_RCC_OscConfig+0xae>
 80025e4:	4b76      	ldr	r3, [pc, #472]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025ea:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025ee:	6013      	str	r3, [r2, #0]
 80025f0:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a72      	ldr	r2, [pc, #456]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80025f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025fa:	6013      	str	r3, [r2, #0]
 80025fc:	e00b      	b.n	8002616 <HAL_RCC_OscConfig+0xc6>
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a6f      	ldr	r2, [pc, #444]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002604:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	4b6d      	ldr	r3, [pc, #436]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4a6c      	ldr	r2, [pc, #432]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002610:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002614:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d013      	beq.n	8002646 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261e:	f003 fe2f 	bl	8006280 <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002624:	e008      	b.n	8002638 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002626:	f003 fe2b 	bl	8006280 <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b64      	cmp	r3, #100	; 0x64
 8002632:	d901      	bls.n	8002638 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e1db      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002638:	4b61      	ldr	r3, [pc, #388]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d0f0      	beq.n	8002626 <HAL_RCC_OscConfig+0xd6>
 8002644:	e014      	b.n	8002670 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002646:	f003 fe1b 	bl	8006280 <HAL_GetTick>
 800264a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800264c:	e008      	b.n	8002660 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800264e:	f003 fe17 	bl	8006280 <HAL_GetTick>
 8002652:	4602      	mov	r2, r0
 8002654:	693b      	ldr	r3, [r7, #16]
 8002656:	1ad3      	subs	r3, r2, r3
 8002658:	2b64      	cmp	r3, #100	; 0x64
 800265a:	d901      	bls.n	8002660 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 800265c:	2303      	movs	r3, #3
 800265e:	e1c7      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002660:	4b57      	ldr	r3, [pc, #348]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002668:	2b00      	cmp	r3, #0
 800266a:	d1f0      	bne.n	800264e <HAL_RCC_OscConfig+0xfe>
 800266c:	e000      	b.n	8002670 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800266e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0302 	and.w	r3, r3, #2
 8002678:	2b00      	cmp	r3, #0
 800267a:	d06f      	beq.n	800275c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800267c:	4b50      	ldr	r3, [pc, #320]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 030c 	and.w	r3, r3, #12
 8002684:	2b00      	cmp	r3, #0
 8002686:	d017      	beq.n	80026b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002688:	4b4d      	ldr	r3, [pc, #308]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002690:	2b08      	cmp	r3, #8
 8002692:	d105      	bne.n	80026a0 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002694:	4b4a      	ldr	r3, [pc, #296]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800269c:	2b00      	cmp	r3, #0
 800269e:	d00b      	beq.n	80026b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026a0:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80026a8:	2b0c      	cmp	r3, #12
 80026aa:	d11c      	bne.n	80026e6 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ac:	4b44      	ldr	r3, [pc, #272]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d116      	bne.n	80026e6 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026b8:	4b41      	ldr	r3, [pc, #260]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d005      	beq.n	80026d0 <HAL_RCC_OscConfig+0x180>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	2b01      	cmp	r3, #1
 80026ca:	d001      	beq.n	80026d0 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80026cc:	2301      	movs	r3, #1
 80026ce:	e18f      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d0:	4b3b      	ldr	r3, [pc, #236]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	691b      	ldr	r3, [r3, #16]
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4938      	ldr	r1, [pc, #224]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 80026e0:	4313      	orrs	r3, r2
 80026e2:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026e4:	e03a      	b.n	800275c <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	68db      	ldr	r3, [r3, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d020      	beq.n	8002730 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026ee:	4b35      	ldr	r3, [pc, #212]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 80026f0:	2201      	movs	r2, #1
 80026f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f4:	f003 fdc4 	bl	8006280 <HAL_GetTick>
 80026f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026fa:	e008      	b.n	800270e <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026fc:	f003 fdc0 	bl	8006280 <HAL_GetTick>
 8002700:	4602      	mov	r2, r0
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	2b02      	cmp	r3, #2
 8002708:	d901      	bls.n	800270e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800270a:	2303      	movs	r3, #3
 800270c:	e170      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800270e:	4b2c      	ldr	r3, [pc, #176]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f003 0302 	and.w	r3, r3, #2
 8002716:	2b00      	cmp	r3, #0
 8002718:	d0f0      	beq.n	80026fc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800271a:	4b29      	ldr	r3, [pc, #164]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	00db      	lsls	r3, r3, #3
 8002728:	4925      	ldr	r1, [pc, #148]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]
 800272e:	e015      	b.n	800275c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002730:	4b24      	ldr	r3, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0x274>)
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002736:	f003 fda3 	bl	8006280 <HAL_GetTick>
 800273a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800273c:	e008      	b.n	8002750 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800273e:	f003 fd9f 	bl	8006280 <HAL_GetTick>
 8002742:	4602      	mov	r2, r0
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	1ad3      	subs	r3, r2, r3
 8002748:	2b02      	cmp	r3, #2
 800274a:	d901      	bls.n	8002750 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e14f      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002750:	4b1b      	ldr	r3, [pc, #108]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f003 0302 	and.w	r3, r3, #2
 8002758:	2b00      	cmp	r3, #0
 800275a:	d1f0      	bne.n	800273e <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0308 	and.w	r3, r3, #8
 8002764:	2b00      	cmp	r3, #0
 8002766:	d037      	beq.n	80027d8 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	2b00      	cmp	r3, #0
 800276e:	d016      	beq.n	800279e <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002770:	4b15      	ldr	r3, [pc, #84]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 8002772:	2201      	movs	r2, #1
 8002774:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002776:	f003 fd83 	bl	8006280 <HAL_GetTick>
 800277a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800277c:	e008      	b.n	8002790 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800277e:	f003 fd7f 	bl	8006280 <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	693b      	ldr	r3, [r7, #16]
 8002786:	1ad3      	subs	r3, r2, r3
 8002788:	2b02      	cmp	r3, #2
 800278a:	d901      	bls.n	8002790 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800278c:	2303      	movs	r3, #3
 800278e:	e12f      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002790:	4b0b      	ldr	r3, [pc, #44]	; (80027c0 <HAL_RCC_OscConfig+0x270>)
 8002792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d0f0      	beq.n	800277e <HAL_RCC_OscConfig+0x22e>
 800279c:	e01c      	b.n	80027d8 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <HAL_RCC_OscConfig+0x278>)
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a4:	f003 fd6c 	bl	8006280 <HAL_GetTick>
 80027a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027aa:	e00f      	b.n	80027cc <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027ac:	f003 fd68 	bl	8006280 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	693b      	ldr	r3, [r7, #16]
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b02      	cmp	r3, #2
 80027b8:	d908      	bls.n	80027cc <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e118      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
 80027be:	bf00      	nop
 80027c0:	40023800 	.word	0x40023800
 80027c4:	42470000 	.word	0x42470000
 80027c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027cc:	4b8a      	ldr	r3, [pc, #552]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80027ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d0:	f003 0302 	and.w	r3, r3, #2
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1e9      	bne.n	80027ac <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0304 	and.w	r3, r3, #4
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f000 8097 	beq.w	8002914 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027ea:	4b83      	ldr	r3, [pc, #524]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80027ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d10f      	bne.n	8002816 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027f6:	2300      	movs	r3, #0
 80027f8:	60fb      	str	r3, [r7, #12]
 80027fa:	4b7f      	ldr	r3, [pc, #508]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027fe:	4a7e      	ldr	r2, [pc, #504]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002800:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002804:	6413      	str	r3, [r2, #64]	; 0x40
 8002806:	4b7c      	ldr	r3, [pc, #496]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002812:	2301      	movs	r3, #1
 8002814:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002816:	4b79      	ldr	r3, [pc, #484]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800281e:	2b00      	cmp	r3, #0
 8002820:	d118      	bne.n	8002854 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002822:	4b76      	ldr	r3, [pc, #472]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a75      	ldr	r2, [pc, #468]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 8002828:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800282c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800282e:	f003 fd27 	bl	8006280 <HAL_GetTick>
 8002832:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002834:	e008      	b.n	8002848 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002836:	f003 fd23 	bl	8006280 <HAL_GetTick>
 800283a:	4602      	mov	r2, r0
 800283c:	693b      	ldr	r3, [r7, #16]
 800283e:	1ad3      	subs	r3, r2, r3
 8002840:	2b02      	cmp	r3, #2
 8002842:	d901      	bls.n	8002848 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002844:	2303      	movs	r3, #3
 8002846:	e0d3      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002848:	4b6c      	ldr	r3, [pc, #432]	; (80029fc <HAL_RCC_OscConfig+0x4ac>)
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002850:	2b00      	cmp	r3, #0
 8002852:	d0f0      	beq.n	8002836 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	2b01      	cmp	r3, #1
 800285a:	d106      	bne.n	800286a <HAL_RCC_OscConfig+0x31a>
 800285c:	4b66      	ldr	r3, [pc, #408]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800285e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002860:	4a65      	ldr	r2, [pc, #404]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002862:	f043 0301 	orr.w	r3, r3, #1
 8002866:	6713      	str	r3, [r2, #112]	; 0x70
 8002868:	e01c      	b.n	80028a4 <HAL_RCC_OscConfig+0x354>
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	2b05      	cmp	r3, #5
 8002870:	d10c      	bne.n	800288c <HAL_RCC_OscConfig+0x33c>
 8002872:	4b61      	ldr	r3, [pc, #388]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002874:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002876:	4a60      	ldr	r2, [pc, #384]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002878:	f043 0304 	orr.w	r3, r3, #4
 800287c:	6713      	str	r3, [r2, #112]	; 0x70
 800287e:	4b5e      	ldr	r3, [pc, #376]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002882:	4a5d      	ldr	r2, [pc, #372]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6713      	str	r3, [r2, #112]	; 0x70
 800288a:	e00b      	b.n	80028a4 <HAL_RCC_OscConfig+0x354>
 800288c:	4b5a      	ldr	r3, [pc, #360]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002890:	4a59      	ldr	r2, [pc, #356]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002892:	f023 0301 	bic.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	; 0x70
 8002898:	4b57      	ldr	r3, [pc, #348]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800289a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289c:	4a56      	ldr	r2, [pc, #344]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800289e:	f023 0304 	bic.w	r3, r3, #4
 80028a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d015      	beq.n	80028d8 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f003 fce8 	bl	8006280 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f003 fce4 	bl	8006280 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e092      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	4b4b      	ldr	r3, [pc, #300]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d0ee      	beq.n	80028b4 <HAL_RCC_OscConfig+0x364>
 80028d6:	e014      	b.n	8002902 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d8:	f003 fcd2 	bl	8006280 <HAL_GetTick>
 80028dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028de:	e00a      	b.n	80028f6 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028e0:	f003 fcce 	bl	8006280 <HAL_GetTick>
 80028e4:	4602      	mov	r2, r0
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	1ad3      	subs	r3, r2, r3
 80028ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80028ee:	4293      	cmp	r3, r2
 80028f0:	d901      	bls.n	80028f6 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 80028f2:	2303      	movs	r3, #3
 80028f4:	e07c      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	4b40      	ldr	r3, [pc, #256]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80028f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028fa:	f003 0302 	and.w	r3, r3, #2
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d1ee      	bne.n	80028e0 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002902:	7dfb      	ldrb	r3, [r7, #23]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d105      	bne.n	8002914 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002908:	4b3b      	ldr	r3, [pc, #236]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800290a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290c:	4a3a      	ldr	r2, [pc, #232]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800290e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002912:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	699b      	ldr	r3, [r3, #24]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d068      	beq.n	80029ee <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800291c:	4b36      	ldr	r3, [pc, #216]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800291e:	689b      	ldr	r3, [r3, #8]
 8002920:	f003 030c 	and.w	r3, r3, #12
 8002924:	2b08      	cmp	r3, #8
 8002926:	d060      	beq.n	80029ea <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	699b      	ldr	r3, [r3, #24]
 800292c:	2b02      	cmp	r3, #2
 800292e:	d145      	bne.n	80029bc <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002930:	4b33      	ldr	r3, [pc, #204]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002936:	f003 fca3 	bl	8006280 <HAL_GetTick>
 800293a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800293c:	e008      	b.n	8002950 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800293e:	f003 fc9f 	bl	8006280 <HAL_GetTick>
 8002942:	4602      	mov	r2, r0
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	1ad3      	subs	r3, r2, r3
 8002948:	2b02      	cmp	r3, #2
 800294a:	d901      	bls.n	8002950 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 800294c:	2303      	movs	r3, #3
 800294e:	e04f      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002950:	4b29      	ldr	r3, [pc, #164]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002958:	2b00      	cmp	r3, #0
 800295a:	d1f0      	bne.n	800293e <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	69da      	ldr	r2, [r3, #28]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a1b      	ldr	r3, [r3, #32]
 8002964:	431a      	orrs	r2, r3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296a:	019b      	lsls	r3, r3, #6
 800296c:	431a      	orrs	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002972:	085b      	lsrs	r3, r3, #1
 8002974:	3b01      	subs	r3, #1
 8002976:	041b      	lsls	r3, r3, #16
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297e:	061b      	lsls	r3, r3, #24
 8002980:	431a      	orrs	r2, r3
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002986:	071b      	lsls	r3, r3, #28
 8002988:	491b      	ldr	r1, [pc, #108]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 800298a:	4313      	orrs	r3, r2
 800298c:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800298e:	4b1c      	ldr	r3, [pc, #112]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 8002990:	2201      	movs	r2, #1
 8002992:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002994:	f003 fc74 	bl	8006280 <HAL_GetTick>
 8002998:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800299a:	e008      	b.n	80029ae <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299c:	f003 fc70 	bl	8006280 <HAL_GetTick>
 80029a0:	4602      	mov	r2, r0
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	1ad3      	subs	r3, r2, r3
 80029a6:	2b02      	cmp	r3, #2
 80029a8:	d901      	bls.n	80029ae <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 80029aa:	2303      	movs	r3, #3
 80029ac:	e020      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d0f0      	beq.n	800299c <HAL_RCC_OscConfig+0x44c>
 80029ba:	e018      	b.n	80029ee <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <HAL_RCC_OscConfig+0x4b0>)
 80029be:	2200      	movs	r2, #0
 80029c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c2:	f003 fc5d 	bl	8006280 <HAL_GetTick>
 80029c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029c8:	e008      	b.n	80029dc <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ca:	f003 fc59 	bl	8006280 <HAL_GetTick>
 80029ce:	4602      	mov	r2, r0
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	1ad3      	subs	r3, r2, r3
 80029d4:	2b02      	cmp	r3, #2
 80029d6:	d901      	bls.n	80029dc <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 80029d8:	2303      	movs	r3, #3
 80029da:	e009      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029dc:	4b06      	ldr	r3, [pc, #24]	; (80029f8 <HAL_RCC_OscConfig+0x4a8>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d1f0      	bne.n	80029ca <HAL_RCC_OscConfig+0x47a>
 80029e8:	e001      	b.n	80029ee <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80029ea:	2301      	movs	r3, #1
 80029ec:	e000      	b.n	80029f0 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3718      	adds	r7, #24
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40007000 	.word	0x40007000
 8002a00:	42470060 	.word	0x42470060

08002a04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e01d      	b.n	8002a52 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d106      	bne.n	8002a30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2200      	movs	r2, #0
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f815 	bl	8002a5a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	2202      	movs	r2, #2
 8002a34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681a      	ldr	r2, [r3, #0]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	3304      	adds	r3, #4
 8002a40:	4619      	mov	r1, r3
 8002a42:	4610      	mov	r0, r2
 8002a44:	f000 f968 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a50:	2300      	movs	r3, #0
}
 8002a52:	4618      	mov	r0, r3
 8002a54:	3708      	adds	r7, #8
 8002a56:	46bd      	mov	sp, r7
 8002a58:	bd80      	pop	{r7, pc}

08002a5a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr

08002a6e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a6e:	b480      	push	{r7}
 8002a70:	b085      	sub	sp, #20
 8002a72:	af00      	add	r7, sp, #0
 8002a74:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	68da      	ldr	r2, [r3, #12]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	2b06      	cmp	r3, #6
 8002a96:	d007      	beq.n	8002aa8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f042 0201 	orr.w	r2, r2, #1
 8002aa6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002ab6:	b580      	push	{r7, lr}
 8002ab8:	b082      	sub	sp, #8
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0302 	and.w	r3, r3, #2
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d122      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d11b      	bne.n	8002b12 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0202 	mvn.w	r2, #2
 8002ae2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	f003 0303 	and.w	r3, r3, #3
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d003      	beq.n	8002b00 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002af8:	6878      	ldr	r0, [r7, #4]
 8002afa:	f000 f8ee 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002afe:	e005      	b.n	8002b0c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b00:	6878      	ldr	r0, [r7, #4]
 8002b02:	f000 f8e0 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f8f1 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b04      	cmp	r3, #4
 8002b1e:	d122      	bne.n	8002b66 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	2b04      	cmp	r3, #4
 8002b2c:	d11b      	bne.n	8002b66 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f06f 0204 	mvn.w	r2, #4
 8002b36:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2202      	movs	r2, #2
 8002b3c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d003      	beq.n	8002b54 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 f8c4 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002b52:	e005      	b.n	8002b60 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f000 f8b6 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 f8c7 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	691b      	ldr	r3, [r3, #16]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b08      	cmp	r3, #8
 8002b72:	d122      	bne.n	8002bba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	68db      	ldr	r3, [r3, #12]
 8002b7a:	f003 0308 	and.w	r3, r3, #8
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d11b      	bne.n	8002bba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	f06f 0208 	mvn.w	r2, #8
 8002b8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2204      	movs	r2, #4
 8002b90:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	69db      	ldr	r3, [r3, #28]
 8002b98:	f003 0303 	and.w	r3, r3, #3
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d003      	beq.n	8002ba8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f89a 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002ba6:	e005      	b.n	8002bb4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f88c 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	f000 f89d 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	2200      	movs	r2, #0
 8002bb8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	691b      	ldr	r3, [r3, #16]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	d122      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	68db      	ldr	r3, [r3, #12]
 8002bce:	f003 0310 	and.w	r3, r3, #16
 8002bd2:	2b10      	cmp	r3, #16
 8002bd4:	d11b      	bne.n	8002c0e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f06f 0210 	mvn.w	r2, #16
 8002bde:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2208      	movs	r2, #8
 8002be4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	69db      	ldr	r3, [r3, #28]
 8002bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f870 	bl	8002cda <HAL_TIM_IC_CaptureCallback>
 8002bfa:	e005      	b.n	8002c08 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f000 f862 	bl	8002cc6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c02:	6878      	ldr	r0, [r7, #4]
 8002c04:	f000 f873 	bl	8002cee <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d10e      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d107      	bne.n	8002c3a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f06f 0201 	mvn.w	r2, #1
 8002c32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7fd ffa5 	bl	8000b84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	2b80      	cmp	r3, #128	; 0x80
 8002c46:	d10e      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	68db      	ldr	r3, [r3, #12]
 8002c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c52:	2b80      	cmp	r3, #128	; 0x80
 8002c54:	d107      	bne.n	8002c66 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002c5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 f903 	bl	8002e6c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	691b      	ldr	r3, [r3, #16]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c70:	2b40      	cmp	r3, #64	; 0x40
 8002c72:	d10e      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c7e:	2b40      	cmp	r3, #64	; 0x40
 8002c80:	d107      	bne.n	8002c92 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f838 	bl	8002d02 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	691b      	ldr	r3, [r3, #16]
 8002c98:	f003 0320 	and.w	r3, r3, #32
 8002c9c:	2b20      	cmp	r3, #32
 8002c9e:	d10e      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f003 0320 	and.w	r3, r3, #32
 8002caa:	2b20      	cmp	r3, #32
 8002cac:	d107      	bne.n	8002cbe <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f06f 0220 	mvn.w	r2, #32
 8002cb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f8cd 	bl	8002e58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3708      	adds	r7, #8
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002cf6:	bf00      	nop
 8002cf8:	370c      	adds	r7, #12
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr

08002d02 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002d0a:	bf00      	nop
 8002d0c:	370c      	adds	r7, #12
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
	...

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a40      	ldr	r2, [pc, #256]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d013      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00f      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a3d      	ldr	r2, [pc, #244]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d00b      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a3c      	ldr	r2, [pc, #240]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d007      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a3b      	ldr	r2, [pc, #236]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d003      	beq.n	8002d58 <TIM_Base_SetConfig+0x40>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	4a3a      	ldr	r2, [pc, #232]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d54:	4293      	cmp	r3, r2
 8002d56:	d108      	bne.n	8002d6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685b      	ldr	r3, [r3, #4]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a2f      	ldr	r2, [pc, #188]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d02b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d78:	d027      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a2c      	ldr	r2, [pc, #176]	; (8002e30 <TIM_Base_SetConfig+0x118>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d023      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a2b      	ldr	r2, [pc, #172]	; (8002e34 <TIM_Base_SetConfig+0x11c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a2a      	ldr	r2, [pc, #168]	; (8002e38 <TIM_Base_SetConfig+0x120>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a29      	ldr	r2, [pc, #164]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d017      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a28      	ldr	r2, [pc, #160]	; (8002e40 <TIM_Base_SetConfig+0x128>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a27      	ldr	r2, [pc, #156]	; (8002e44 <TIM_Base_SetConfig+0x12c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00f      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a26      	ldr	r2, [pc, #152]	; (8002e48 <TIM_Base_SetConfig+0x130>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d00b      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a25      	ldr	r2, [pc, #148]	; (8002e4c <TIM_Base_SetConfig+0x134>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d007      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4a24      	ldr	r2, [pc, #144]	; (8002e50 <TIM_Base_SetConfig+0x138>)
 8002dbe:	4293      	cmp	r3, r2
 8002dc0:	d003      	beq.n	8002dca <TIM_Base_SetConfig+0xb2>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	4a23      	ldr	r2, [pc, #140]	; (8002e54 <TIM_Base_SetConfig+0x13c>)
 8002dc6:	4293      	cmp	r3, r2
 8002dc8:	d108      	bne.n	8002ddc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002dd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	68db      	ldr	r3, [r3, #12]
 8002dd6:	68fa      	ldr	r2, [r7, #12]
 8002dd8:	4313      	orrs	r3, r2
 8002dda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	695b      	ldr	r3, [r3, #20]
 8002de6:	4313      	orrs	r3, r2
 8002de8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68fa      	ldr	r2, [r7, #12]
 8002dee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	689a      	ldr	r2, [r3, #8]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681a      	ldr	r2, [r3, #0]
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a0a      	ldr	r2, [pc, #40]	; (8002e2c <TIM_Base_SetConfig+0x114>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0xf8>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a0c      	ldr	r2, [pc, #48]	; (8002e3c <TIM_Base_SetConfig+0x124>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d103      	bne.n	8002e18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	691a      	ldr	r2, [r3, #16]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2201      	movs	r2, #1
 8002e1c:	615a      	str	r2, [r3, #20]
}
 8002e1e:	bf00      	nop
 8002e20:	3714      	adds	r7, #20
 8002e22:	46bd      	mov	sp, r7
 8002e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e28:	4770      	bx	lr
 8002e2a:	bf00      	nop
 8002e2c:	40010000 	.word	0x40010000
 8002e30:	40000400 	.word	0x40000400
 8002e34:	40000800 	.word	0x40000800
 8002e38:	40000c00 	.word	0x40000c00
 8002e3c:	40010400 	.word	0x40010400
 8002e40:	40014000 	.word	0x40014000
 8002e44:	40014400 	.word	0x40014400
 8002e48:	40014800 	.word	0x40014800
 8002e4c:	40001800 	.word	0x40001800
 8002e50:	40001c00 	.word	0x40001c00
 8002e54:	40002000 	.word	0x40002000

08002e58 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b083      	sub	sp, #12
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002e60:	bf00      	nop
 8002e62:	370c      	adds	r7, #12
 8002e64:	46bd      	mov	sp, r7
 8002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6a:	4770      	bx	lr

08002e6c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002e74:	bf00      	nop
 8002e76:	370c      	adds	r7, #12
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7e:	4770      	bx	lr

08002e80 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d101      	bne.n	8002e92 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e8e:	2301      	movs	r3, #1
 8002e90:	e03f      	b.n	8002f12 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d106      	bne.n	8002eac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ea6:	6878      	ldr	r0, [r7, #4]
 8002ea8:	f7fd fefe 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2224      	movs	r2, #36	; 0x24
 8002eb0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	68da      	ldr	r2, [r3, #12]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ec2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f000 fb4b 	bl	8003560 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	691a      	ldr	r2, [r3, #16]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ed8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	695a      	ldr	r2, [r3, #20]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ee8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68da      	ldr	r2, [r3, #12]
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ef8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	2200      	movs	r2, #0
 8002efe:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002f10:	2300      	movs	r3, #0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}

08002f1a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f1a:	b580      	push	{r7, lr}
 8002f1c:	b088      	sub	sp, #32
 8002f1e:	af02      	add	r7, sp, #8
 8002f20:	60f8      	str	r0, [r7, #12]
 8002f22:	60b9      	str	r1, [r7, #8]
 8002f24:	603b      	str	r3, [r7, #0]
 8002f26:	4613      	mov	r3, r2
 8002f28:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f34:	b2db      	uxtb	r3, r3
 8002f36:	2b20      	cmp	r3, #32
 8002f38:	f040 8083 	bne.w	8003042 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d002      	beq.n	8002f48 <HAL_UART_Transmit+0x2e>
 8002f42:	88fb      	ldrh	r3, [r7, #6]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d101      	bne.n	8002f4c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e07b      	b.n	8003044 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d101      	bne.n	8002f5a <HAL_UART_Transmit+0x40>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e074      	b.n	8003044 <HAL_UART_Transmit+0x12a>
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	2200      	movs	r2, #0
 8002f66:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2221      	movs	r2, #33	; 0x21
 8002f6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002f70:	f003 f986 	bl	8006280 <HAL_GetTick>
 8002f74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	88fa      	ldrh	r2, [r7, #6]
 8002f7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	88fa      	ldrh	r2, [r7, #6]
 8002f80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8002f8a:	e042      	b.n	8003012 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	3b01      	subs	r3, #1
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fa2:	d122      	bne.n	8002fea <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	9300      	str	r3, [sp, #0]
 8002fa8:	697b      	ldr	r3, [r7, #20]
 8002faa:	2200      	movs	r2, #0
 8002fac:	2180      	movs	r1, #128	; 0x80
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 f96a 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e042      	b.n	8003044 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	881b      	ldrh	r3, [r3, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fd0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d103      	bne.n	8002fe2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	3302      	adds	r3, #2
 8002fde:	60bb      	str	r3, [r7, #8]
 8002fe0:	e017      	b.n	8003012 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	60bb      	str	r3, [r7, #8]
 8002fe8:	e013      	b.n	8003012 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002fea:	683b      	ldr	r3, [r7, #0]
 8002fec:	9300      	str	r3, [sp, #0]
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	2180      	movs	r1, #128	; 0x80
 8002ff4:	68f8      	ldr	r0, [r7, #12]
 8002ff6:	f000 f947 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 8002ffa:	4603      	mov	r3, r0
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d001      	beq.n	8003004 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8003000:	2303      	movs	r3, #3
 8003002:	e01f      	b.n	8003044 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8003004:	68bb      	ldr	r3, [r7, #8]
 8003006:	1c5a      	adds	r2, r3, #1
 8003008:	60ba      	str	r2, [r7, #8]
 800300a:	781a      	ldrb	r2, [r3, #0]
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003016:	b29b      	uxth	r3, r3
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1b7      	bne.n	8002f8c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	9300      	str	r3, [sp, #0]
 8003020:	697b      	ldr	r3, [r7, #20]
 8003022:	2200      	movs	r2, #0
 8003024:	2140      	movs	r1, #64	; 0x40
 8003026:	68f8      	ldr	r0, [r7, #12]
 8003028:	f000 f92e 	bl	8003288 <UART_WaitOnFlagUntilTimeout>
 800302c:	4603      	mov	r3, r0
 800302e:	2b00      	cmp	r3, #0
 8003030:	d001      	beq.n	8003036 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e006      	b.n	8003044 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800303e:	2300      	movs	r3, #0
 8003040:	e000      	b.n	8003044 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003042:	2302      	movs	r3, #2
  }
}
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b088      	sub	sp, #32
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695b      	ldr	r3, [r3, #20]
 800306a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800306c:	2300      	movs	r3, #0
 800306e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003070:	2300      	movs	r3, #0
 8003072:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	f003 030f 	and.w	r3, r3, #15
 800307a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d10d      	bne.n	800309e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	f003 0320 	and.w	r3, r3, #32
 8003088:	2b00      	cmp	r3, #0
 800308a:	d008      	beq.n	800309e <HAL_UART_IRQHandler+0x52>
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	f003 0320 	and.w	r3, r3, #32
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f9e0 	bl	800345c <UART_Receive_IT>
      return;
 800309c:	e0d1      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800309e:	693b      	ldr	r3, [r7, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 80b0 	beq.w	8003206 <HAL_UART_IRQHandler+0x1ba>
 80030a6:	697b      	ldr	r3, [r7, #20]
 80030a8:	f003 0301 	and.w	r3, r3, #1
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d105      	bne.n	80030bc <HAL_UART_IRQHandler+0x70>
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	f000 80a5 	beq.w	8003206 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80030bc:	69fb      	ldr	r3, [r7, #28]
 80030be:	f003 0301 	and.w	r3, r3, #1
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00a      	beq.n	80030dc <HAL_UART_IRQHandler+0x90>
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d005      	beq.n	80030dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030d4:	f043 0201 	orr.w	r2, r3, #1
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	f003 0304 	and.w	r3, r3, #4
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d00a      	beq.n	80030fc <HAL_UART_IRQHandler+0xb0>
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f003 0301 	and.w	r3, r3, #1
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d005      	beq.n	80030fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030f4:	f043 0202 	orr.w	r2, r3, #2
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d00a      	beq.n	800311c <HAL_UART_IRQHandler+0xd0>
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f003 0301 	and.w	r3, r3, #1
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003114:	f043 0204 	orr.w	r2, r3, #4
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800311c:	69fb      	ldr	r3, [r7, #28]
 800311e:	f003 0308 	and.w	r3, r3, #8
 8003122:	2b00      	cmp	r3, #0
 8003124:	d00f      	beq.n	8003146 <HAL_UART_IRQHandler+0xfa>
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f003 0320 	and.w	r3, r3, #32
 800312c:	2b00      	cmp	r3, #0
 800312e:	d104      	bne.n	800313a <HAL_UART_IRQHandler+0xee>
 8003130:	697b      	ldr	r3, [r7, #20]
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	2b00      	cmp	r3, #0
 8003138:	d005      	beq.n	8003146 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800313e:	f043 0208 	orr.w	r2, r3, #8
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800314a:	2b00      	cmp	r3, #0
 800314c:	d078      	beq.n	8003240 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f003 0320 	and.w	r3, r3, #32
 8003154:	2b00      	cmp	r3, #0
 8003156:	d007      	beq.n	8003168 <HAL_UART_IRQHandler+0x11c>
 8003158:	69bb      	ldr	r3, [r7, #24]
 800315a:	f003 0320 	and.w	r3, r3, #32
 800315e:	2b00      	cmp	r3, #0
 8003160:	d002      	beq.n	8003168 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f000 f97a 	bl	800345c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	695b      	ldr	r3, [r3, #20]
 800316e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003172:	2b40      	cmp	r3, #64	; 0x40
 8003174:	bf0c      	ite	eq
 8003176:	2301      	moveq	r3, #1
 8003178:	2300      	movne	r3, #0
 800317a:	b2db      	uxtb	r3, r3
 800317c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	2b00      	cmp	r3, #0
 8003188:	d102      	bne.n	8003190 <HAL_UART_IRQHandler+0x144>
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d031      	beq.n	80031f4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 f8c3 	bl	800331c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031a0:	2b40      	cmp	r3, #64	; 0x40
 80031a2:	d123      	bne.n	80031ec <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	695a      	ldr	r2, [r3, #20]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031b2:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d013      	beq.n	80031e4 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c0:	4a21      	ldr	r2, [pc, #132]	; (8003248 <HAL_UART_IRQHandler+0x1fc>)
 80031c2:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fe fd07 	bl	8001bdc <HAL_DMA_Abort_IT>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d016      	beq.n	8003202 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80031d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80031de:	4610      	mov	r0, r2
 80031e0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e2:	e00e      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031e4:	6878      	ldr	r0, [r7, #4]
 80031e6:	f000 f845 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031ea:	e00a      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f000 f841 	bl	8003274 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031f2:	e006      	b.n	8003202 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031f4:	6878      	ldr	r0, [r7, #4]
 80031f6:	f000 f83d 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8003200:	e01e      	b.n	8003240 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003202:	bf00      	nop
    return;
 8003204:	e01c      	b.n	8003240 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800320c:	2b00      	cmp	r3, #0
 800320e:	d008      	beq.n	8003222 <HAL_UART_IRQHandler+0x1d6>
 8003210:	69bb      	ldr	r3, [r7, #24]
 8003212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003216:	2b00      	cmp	r3, #0
 8003218:	d003      	beq.n	8003222 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	f000 f8b0 	bl	8003380 <UART_Transmit_IT>
    return;
 8003220:	e00f      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <HAL_UART_IRQHandler+0x1f6>
 800322c:	69bb      	ldr	r3, [r7, #24]
 800322e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003232:	2b00      	cmp	r3, #0
 8003234:	d005      	beq.n	8003242 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8003236:	6878      	ldr	r0, [r7, #4]
 8003238:	f000 f8f8 	bl	800342c <UART_EndTransmit_IT>
    return;
 800323c:	bf00      	nop
 800323e:	e000      	b.n	8003242 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003240:	bf00      	nop
  }
}
 8003242:	3720      	adds	r7, #32
 8003244:	46bd      	mov	sp, r7
 8003246:	bd80      	pop	{r7, pc}
 8003248:	08003359 	.word	0x08003359

0800324c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800324c:	b480      	push	{r7}
 800324e:	b083      	sub	sp, #12
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003254:	bf00      	nop
 8003256:	370c      	adds	r7, #12
 8003258:	46bd      	mov	sp, r7
 800325a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325e:	4770      	bx	lr

08003260 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003260:	b480      	push	{r7}
 8003262:	b083      	sub	sp, #12
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003274:	b480      	push	{r7}
 8003276:	b083      	sub	sp, #12
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800327c:	bf00      	nop
 800327e:	370c      	adds	r7, #12
 8003280:	46bd      	mov	sp, r7
 8003282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003286:	4770      	bx	lr

08003288 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	603b      	str	r3, [r7, #0]
 8003294:	4613      	mov	r3, r2
 8003296:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003298:	e02c      	b.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032a0:	d028      	beq.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80032a2:	69bb      	ldr	r3, [r7, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d007      	beq.n	80032b8 <UART_WaitOnFlagUntilTimeout+0x30>
 80032a8:	f002 ffea 	bl	8006280 <HAL_GetTick>
 80032ac:	4602      	mov	r2, r0
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	1ad3      	subs	r3, r2, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d21d      	bcs.n	80032f4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	68da      	ldr	r2, [r3, #12]
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032c6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	695a      	ldr	r2, [r3, #20]
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	2220      	movs	r2, #32
 80032e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80032f0:	2303      	movs	r3, #3
 80032f2:	e00f      	b.n	8003314 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	4013      	ands	r3, r2
 80032fe:	68ba      	ldr	r2, [r7, #8]
 8003300:	429a      	cmp	r2, r3
 8003302:	bf0c      	ite	eq
 8003304:	2301      	moveq	r3, #1
 8003306:	2300      	movne	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	79fb      	ldrb	r3, [r7, #7]
 800330e:	429a      	cmp	r2, r3
 8003310:	d0c3      	beq.n	800329a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003312:	2300      	movs	r3, #0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3710      	adds	r7, #16
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800331c:	b480      	push	{r7}
 800331e:	b083      	sub	sp, #12
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68da      	ldr	r2, [r3, #12]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003332:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	695a      	ldr	r2, [r3, #20]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f022 0201 	bic.w	r2, r2, #1
 8003342:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003356:	4770      	bx	lr

08003358 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003364:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	2200      	movs	r2, #0
 800336a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003372:	68f8      	ldr	r0, [r7, #12]
 8003374:	f7ff ff7e 	bl	8003274 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003378:	bf00      	nop
 800337a:	3710      	adds	r7, #16
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}

08003380 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003380:	b480      	push	{r7}
 8003382:	b085      	sub	sp, #20
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800338e:	b2db      	uxtb	r3, r3
 8003390:	2b21      	cmp	r3, #33	; 0x21
 8003392:	d144      	bne.n	800341e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800339c:	d11a      	bne.n	80033d4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6a1b      	ldr	r3, [r3, #32]
 80033a2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	881b      	ldrh	r3, [r3, #0]
 80033a8:	461a      	mov	r2, r3
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033b2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	691b      	ldr	r3, [r3, #16]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	1c9a      	adds	r2, r3, #2
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	621a      	str	r2, [r3, #32]
 80033c6:	e00e      	b.n	80033e6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a1b      	ldr	r3, [r3, #32]
 80033cc:	1c5a      	adds	r2, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	621a      	str	r2, [r3, #32]
 80033d2:	e008      	b.n	80033e6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6a1b      	ldr	r3, [r3, #32]
 80033d8:	1c59      	adds	r1, r3, #1
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	6211      	str	r1, [r2, #32]
 80033de:	781a      	ldrb	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	687a      	ldr	r2, [r7, #4]
 80033f2:	4619      	mov	r1, r3
 80033f4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d10f      	bne.n	800341a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	68da      	ldr	r2, [r3, #12]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003408:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	68da      	ldr	r2, [r3, #12]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003418:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	e000      	b.n	8003420 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800341e:	2302      	movs	r3, #2
  }
}
 8003420:	4618      	mov	r0, r3
 8003422:	3714      	adds	r7, #20
 8003424:	46bd      	mov	sp, r7
 8003426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342a:	4770      	bx	lr

0800342c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	68da      	ldr	r2, [r3, #12]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003442:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2220      	movs	r2, #32
 8003448:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fefd 	bl	800324c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003452:	2300      	movs	r3, #0
}
 8003454:	4618      	mov	r0, r3
 8003456:	3708      	adds	r7, #8
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800346a:	b2db      	uxtb	r3, r3
 800346c:	2b22      	cmp	r3, #34	; 0x22
 800346e:	d171      	bne.n	8003554 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689b      	ldr	r3, [r3, #8]
 8003474:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003478:	d123      	bne.n	80034c2 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800347e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	691b      	ldr	r3, [r3, #16]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d10e      	bne.n	80034a6 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	b29b      	uxth	r3, r3
 8003490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003494:	b29a      	uxth	r2, r3
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800349e:	1c9a      	adds	r2, r3, #2
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	629a      	str	r2, [r3, #40]	; 0x28
 80034a4:	e029      	b.n	80034fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	b2db      	uxtb	r3, r3
 80034b0:	b29a      	uxth	r2, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ba:	1c5a      	adds	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	629a      	str	r2, [r3, #40]	; 0x28
 80034c0:	e01b      	b.n	80034fa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	691b      	ldr	r3, [r3, #16]
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10a      	bne.n	80034e0 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	6858      	ldr	r0, [r3, #4]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d4:	1c59      	adds	r1, r3, #1
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	6291      	str	r1, [r2, #40]	; 0x28
 80034da:	b2c2      	uxtb	r2, r0
 80034dc:	701a      	strb	r2, [r3, #0]
 80034de:	e00c      	b.n	80034fa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	b2da      	uxtb	r2, r3
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034ec:	1c58      	adds	r0, r3, #1
 80034ee:	6879      	ldr	r1, [r7, #4]
 80034f0:	6288      	str	r0, [r1, #40]	; 0x28
 80034f2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80034f6:	b2d2      	uxtb	r2, r2
 80034f8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29b      	uxth	r3, r3
 8003504:	687a      	ldr	r2, [r7, #4]
 8003506:	4619      	mov	r1, r3
 8003508:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800350a:	2b00      	cmp	r3, #0
 800350c:	d120      	bne.n	8003550 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0220 	bic.w	r2, r2, #32
 800351c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	68da      	ldr	r2, [r3, #12]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800352c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695a      	ldr	r2, [r3, #20]
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2220      	movs	r2, #32
 8003542:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f7ff fe8a 	bl	8003260 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800354c:	2300      	movs	r3, #0
 800354e:	e002      	b.n	8003556 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003550:	2300      	movs	r3, #0
 8003552:	e000      	b.n	8003556 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003554:	2302      	movs	r3, #2
  }
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}
	...

08003560 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003564:	b085      	sub	sp, #20
 8003566:	af00      	add	r7, sp, #0
 8003568:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	691b      	ldr	r3, [r3, #16]
 8003570:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	430a      	orrs	r2, r1
 800357e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	691b      	ldr	r3, [r3, #16]
 8003588:	431a      	orrs	r2, r3
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4313      	orrs	r3, r2
 8003596:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	68db      	ldr	r3, [r3, #12]
 800359e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80035a2:	f023 030c 	bic.w	r3, r3, #12
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	6812      	ldr	r2, [r2, #0]
 80035aa:	68f9      	ldr	r1, [r7, #12]
 80035ac:	430b      	orrs	r3, r1
 80035ae:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	695b      	ldr	r3, [r3, #20]
 80035b6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	699a      	ldr	r2, [r3, #24]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ce:	f040 818b 	bne.w	80038e8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4ac1      	ldr	r2, [pc, #772]	; (80038dc <UART_SetConfig+0x37c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d005      	beq.n	80035e8 <UART_SetConfig+0x88>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4abf      	ldr	r2, [pc, #764]	; (80038e0 <UART_SetConfig+0x380>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	f040 80bd 	bne.w	8003762 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035e8:	f7fe fdcc 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 80035ec:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	461d      	mov	r5, r3
 80035f2:	f04f 0600 	mov.w	r6, #0
 80035f6:	46a8      	mov	r8, r5
 80035f8:	46b1      	mov	r9, r6
 80035fa:	eb18 0308 	adds.w	r3, r8, r8
 80035fe:	eb49 0409 	adc.w	r4, r9, r9
 8003602:	4698      	mov	r8, r3
 8003604:	46a1      	mov	r9, r4
 8003606:	eb18 0805 	adds.w	r8, r8, r5
 800360a:	eb49 0906 	adc.w	r9, r9, r6
 800360e:	f04f 0100 	mov.w	r1, #0
 8003612:	f04f 0200 	mov.w	r2, #0
 8003616:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800361a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800361e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003622:	4688      	mov	r8, r1
 8003624:	4691      	mov	r9, r2
 8003626:	eb18 0005 	adds.w	r0, r8, r5
 800362a:	eb49 0106 	adc.w	r1, r9, r6
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	461d      	mov	r5, r3
 8003634:	f04f 0600 	mov.w	r6, #0
 8003638:	196b      	adds	r3, r5, r5
 800363a:	eb46 0406 	adc.w	r4, r6, r6
 800363e:	461a      	mov	r2, r3
 8003640:	4623      	mov	r3, r4
 8003642:	f7fc fded 	bl	8000220 <__aeabi_uldivmod>
 8003646:	4603      	mov	r3, r0
 8003648:	460c      	mov	r4, r1
 800364a:	461a      	mov	r2, r3
 800364c:	4ba5      	ldr	r3, [pc, #660]	; (80038e4 <UART_SetConfig+0x384>)
 800364e:	fba3 2302 	umull	r2, r3, r3, r2
 8003652:	095b      	lsrs	r3, r3, #5
 8003654:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	461d      	mov	r5, r3
 800365c:	f04f 0600 	mov.w	r6, #0
 8003660:	46a9      	mov	r9, r5
 8003662:	46b2      	mov	sl, r6
 8003664:	eb19 0309 	adds.w	r3, r9, r9
 8003668:	eb4a 040a 	adc.w	r4, sl, sl
 800366c:	4699      	mov	r9, r3
 800366e:	46a2      	mov	sl, r4
 8003670:	eb19 0905 	adds.w	r9, r9, r5
 8003674:	eb4a 0a06 	adc.w	sl, sl, r6
 8003678:	f04f 0100 	mov.w	r1, #0
 800367c:	f04f 0200 	mov.w	r2, #0
 8003680:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003684:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003688:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800368c:	4689      	mov	r9, r1
 800368e:	4692      	mov	sl, r2
 8003690:	eb19 0005 	adds.w	r0, r9, r5
 8003694:	eb4a 0106 	adc.w	r1, sl, r6
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	461d      	mov	r5, r3
 800369e:	f04f 0600 	mov.w	r6, #0
 80036a2:	196b      	adds	r3, r5, r5
 80036a4:	eb46 0406 	adc.w	r4, r6, r6
 80036a8:	461a      	mov	r2, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	f7fc fdb8 	bl	8000220 <__aeabi_uldivmod>
 80036b0:	4603      	mov	r3, r0
 80036b2:	460c      	mov	r4, r1
 80036b4:	461a      	mov	r2, r3
 80036b6:	4b8b      	ldr	r3, [pc, #556]	; (80038e4 <UART_SetConfig+0x384>)
 80036b8:	fba3 1302 	umull	r1, r3, r3, r2
 80036bc:	095b      	lsrs	r3, r3, #5
 80036be:	2164      	movs	r1, #100	; 0x64
 80036c0:	fb01 f303 	mul.w	r3, r1, r3
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	00db      	lsls	r3, r3, #3
 80036c8:	3332      	adds	r3, #50	; 0x32
 80036ca:	4a86      	ldr	r2, [pc, #536]	; (80038e4 <UART_SetConfig+0x384>)
 80036cc:	fba2 2303 	umull	r2, r3, r2, r3
 80036d0:	095b      	lsrs	r3, r3, #5
 80036d2:	005b      	lsls	r3, r3, #1
 80036d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80036d8:	4498      	add	r8, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	461d      	mov	r5, r3
 80036de:	f04f 0600 	mov.w	r6, #0
 80036e2:	46a9      	mov	r9, r5
 80036e4:	46b2      	mov	sl, r6
 80036e6:	eb19 0309 	adds.w	r3, r9, r9
 80036ea:	eb4a 040a 	adc.w	r4, sl, sl
 80036ee:	4699      	mov	r9, r3
 80036f0:	46a2      	mov	sl, r4
 80036f2:	eb19 0905 	adds.w	r9, r9, r5
 80036f6:	eb4a 0a06 	adc.w	sl, sl, r6
 80036fa:	f04f 0100 	mov.w	r1, #0
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003706:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800370a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800370e:	4689      	mov	r9, r1
 8003710:	4692      	mov	sl, r2
 8003712:	eb19 0005 	adds.w	r0, r9, r5
 8003716:	eb4a 0106 	adc.w	r1, sl, r6
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	461d      	mov	r5, r3
 8003720:	f04f 0600 	mov.w	r6, #0
 8003724:	196b      	adds	r3, r5, r5
 8003726:	eb46 0406 	adc.w	r4, r6, r6
 800372a:	461a      	mov	r2, r3
 800372c:	4623      	mov	r3, r4
 800372e:	f7fc fd77 	bl	8000220 <__aeabi_uldivmod>
 8003732:	4603      	mov	r3, r0
 8003734:	460c      	mov	r4, r1
 8003736:	461a      	mov	r2, r3
 8003738:	4b6a      	ldr	r3, [pc, #424]	; (80038e4 <UART_SetConfig+0x384>)
 800373a:	fba3 1302 	umull	r1, r3, r3, r2
 800373e:	095b      	lsrs	r3, r3, #5
 8003740:	2164      	movs	r1, #100	; 0x64
 8003742:	fb01 f303 	mul.w	r3, r1, r3
 8003746:	1ad3      	subs	r3, r2, r3
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	3332      	adds	r3, #50	; 0x32
 800374c:	4a65      	ldr	r2, [pc, #404]	; (80038e4 <UART_SetConfig+0x384>)
 800374e:	fba2 2303 	umull	r2, r3, r2, r3
 8003752:	095b      	lsrs	r3, r3, #5
 8003754:	f003 0207 	and.w	r2, r3, #7
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4442      	add	r2, r8
 800375e:	609a      	str	r2, [r3, #8]
 8003760:	e26f      	b.n	8003c42 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003762:	f7fe fcfb 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003766:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	461d      	mov	r5, r3
 800376c:	f04f 0600 	mov.w	r6, #0
 8003770:	46a8      	mov	r8, r5
 8003772:	46b1      	mov	r9, r6
 8003774:	eb18 0308 	adds.w	r3, r8, r8
 8003778:	eb49 0409 	adc.w	r4, r9, r9
 800377c:	4698      	mov	r8, r3
 800377e:	46a1      	mov	r9, r4
 8003780:	eb18 0805 	adds.w	r8, r8, r5
 8003784:	eb49 0906 	adc.w	r9, r9, r6
 8003788:	f04f 0100 	mov.w	r1, #0
 800378c:	f04f 0200 	mov.w	r2, #0
 8003790:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003794:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003798:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800379c:	4688      	mov	r8, r1
 800379e:	4691      	mov	r9, r2
 80037a0:	eb18 0005 	adds.w	r0, r8, r5
 80037a4:	eb49 0106 	adc.w	r1, r9, r6
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	685b      	ldr	r3, [r3, #4]
 80037ac:	461d      	mov	r5, r3
 80037ae:	f04f 0600 	mov.w	r6, #0
 80037b2:	196b      	adds	r3, r5, r5
 80037b4:	eb46 0406 	adc.w	r4, r6, r6
 80037b8:	461a      	mov	r2, r3
 80037ba:	4623      	mov	r3, r4
 80037bc:	f7fc fd30 	bl	8000220 <__aeabi_uldivmod>
 80037c0:	4603      	mov	r3, r0
 80037c2:	460c      	mov	r4, r1
 80037c4:	461a      	mov	r2, r3
 80037c6:	4b47      	ldr	r3, [pc, #284]	; (80038e4 <UART_SetConfig+0x384>)
 80037c8:	fba3 2302 	umull	r2, r3, r3, r2
 80037cc:	095b      	lsrs	r3, r3, #5
 80037ce:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	461d      	mov	r5, r3
 80037d6:	f04f 0600 	mov.w	r6, #0
 80037da:	46a9      	mov	r9, r5
 80037dc:	46b2      	mov	sl, r6
 80037de:	eb19 0309 	adds.w	r3, r9, r9
 80037e2:	eb4a 040a 	adc.w	r4, sl, sl
 80037e6:	4699      	mov	r9, r3
 80037e8:	46a2      	mov	sl, r4
 80037ea:	eb19 0905 	adds.w	r9, r9, r5
 80037ee:	eb4a 0a06 	adc.w	sl, sl, r6
 80037f2:	f04f 0100 	mov.w	r1, #0
 80037f6:	f04f 0200 	mov.w	r2, #0
 80037fa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80037fe:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003802:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003806:	4689      	mov	r9, r1
 8003808:	4692      	mov	sl, r2
 800380a:	eb19 0005 	adds.w	r0, r9, r5
 800380e:	eb4a 0106 	adc.w	r1, sl, r6
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	461d      	mov	r5, r3
 8003818:	f04f 0600 	mov.w	r6, #0
 800381c:	196b      	adds	r3, r5, r5
 800381e:	eb46 0406 	adc.w	r4, r6, r6
 8003822:	461a      	mov	r2, r3
 8003824:	4623      	mov	r3, r4
 8003826:	f7fc fcfb 	bl	8000220 <__aeabi_uldivmod>
 800382a:	4603      	mov	r3, r0
 800382c:	460c      	mov	r4, r1
 800382e:	461a      	mov	r2, r3
 8003830:	4b2c      	ldr	r3, [pc, #176]	; (80038e4 <UART_SetConfig+0x384>)
 8003832:	fba3 1302 	umull	r1, r3, r3, r2
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	2164      	movs	r1, #100	; 0x64
 800383a:	fb01 f303 	mul.w	r3, r1, r3
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	00db      	lsls	r3, r3, #3
 8003842:	3332      	adds	r3, #50	; 0x32
 8003844:	4a27      	ldr	r2, [pc, #156]	; (80038e4 <UART_SetConfig+0x384>)
 8003846:	fba2 2303 	umull	r2, r3, r2, r3
 800384a:	095b      	lsrs	r3, r3, #5
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003852:	4498      	add	r8, r3
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	461d      	mov	r5, r3
 8003858:	f04f 0600 	mov.w	r6, #0
 800385c:	46a9      	mov	r9, r5
 800385e:	46b2      	mov	sl, r6
 8003860:	eb19 0309 	adds.w	r3, r9, r9
 8003864:	eb4a 040a 	adc.w	r4, sl, sl
 8003868:	4699      	mov	r9, r3
 800386a:	46a2      	mov	sl, r4
 800386c:	eb19 0905 	adds.w	r9, r9, r5
 8003870:	eb4a 0a06 	adc.w	sl, sl, r6
 8003874:	f04f 0100 	mov.w	r1, #0
 8003878:	f04f 0200 	mov.w	r2, #0
 800387c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003880:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003884:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003888:	4689      	mov	r9, r1
 800388a:	4692      	mov	sl, r2
 800388c:	eb19 0005 	adds.w	r0, r9, r5
 8003890:	eb4a 0106 	adc.w	r1, sl, r6
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	461d      	mov	r5, r3
 800389a:	f04f 0600 	mov.w	r6, #0
 800389e:	196b      	adds	r3, r5, r5
 80038a0:	eb46 0406 	adc.w	r4, r6, r6
 80038a4:	461a      	mov	r2, r3
 80038a6:	4623      	mov	r3, r4
 80038a8:	f7fc fcba 	bl	8000220 <__aeabi_uldivmod>
 80038ac:	4603      	mov	r3, r0
 80038ae:	460c      	mov	r4, r1
 80038b0:	461a      	mov	r2, r3
 80038b2:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <UART_SetConfig+0x384>)
 80038b4:	fba3 1302 	umull	r1, r3, r3, r2
 80038b8:	095b      	lsrs	r3, r3, #5
 80038ba:	2164      	movs	r1, #100	; 0x64
 80038bc:	fb01 f303 	mul.w	r3, r1, r3
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	00db      	lsls	r3, r3, #3
 80038c4:	3332      	adds	r3, #50	; 0x32
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <UART_SetConfig+0x384>)
 80038c8:	fba2 2303 	umull	r2, r3, r2, r3
 80038cc:	095b      	lsrs	r3, r3, #5
 80038ce:	f003 0207 	and.w	r2, r3, #7
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4442      	add	r2, r8
 80038d8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80038da:	e1b2      	b.n	8003c42 <UART_SetConfig+0x6e2>
 80038dc:	40011000 	.word	0x40011000
 80038e0:	40011400 	.word	0x40011400
 80038e4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4ad7      	ldr	r2, [pc, #860]	; (8003c4c <UART_SetConfig+0x6ec>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d005      	beq.n	80038fe <UART_SetConfig+0x39e>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4ad6      	ldr	r2, [pc, #856]	; (8003c50 <UART_SetConfig+0x6f0>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	f040 80d1 	bne.w	8003aa0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80038fe:	f7fe fc41 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8003902:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003904:	68bb      	ldr	r3, [r7, #8]
 8003906:	469a      	mov	sl, r3
 8003908:	f04f 0b00 	mov.w	fp, #0
 800390c:	46d0      	mov	r8, sl
 800390e:	46d9      	mov	r9, fp
 8003910:	eb18 0308 	adds.w	r3, r8, r8
 8003914:	eb49 0409 	adc.w	r4, r9, r9
 8003918:	4698      	mov	r8, r3
 800391a:	46a1      	mov	r9, r4
 800391c:	eb18 080a 	adds.w	r8, r8, sl
 8003920:	eb49 090b 	adc.w	r9, r9, fp
 8003924:	f04f 0100 	mov.w	r1, #0
 8003928:	f04f 0200 	mov.w	r2, #0
 800392c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003930:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003934:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003938:	4688      	mov	r8, r1
 800393a:	4691      	mov	r9, r2
 800393c:	eb1a 0508 	adds.w	r5, sl, r8
 8003940:	eb4b 0609 	adc.w	r6, fp, r9
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	685b      	ldr	r3, [r3, #4]
 8003948:	4619      	mov	r1, r3
 800394a:	f04f 0200 	mov.w	r2, #0
 800394e:	f04f 0300 	mov.w	r3, #0
 8003952:	f04f 0400 	mov.w	r4, #0
 8003956:	0094      	lsls	r4, r2, #2
 8003958:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800395c:	008b      	lsls	r3, r1, #2
 800395e:	461a      	mov	r2, r3
 8003960:	4623      	mov	r3, r4
 8003962:	4628      	mov	r0, r5
 8003964:	4631      	mov	r1, r6
 8003966:	f7fc fc5b 	bl	8000220 <__aeabi_uldivmod>
 800396a:	4603      	mov	r3, r0
 800396c:	460c      	mov	r4, r1
 800396e:	461a      	mov	r2, r3
 8003970:	4bb8      	ldr	r3, [pc, #736]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003972:	fba3 2302 	umull	r2, r3, r3, r2
 8003976:	095b      	lsrs	r3, r3, #5
 8003978:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	469b      	mov	fp, r3
 8003980:	f04f 0c00 	mov.w	ip, #0
 8003984:	46d9      	mov	r9, fp
 8003986:	46e2      	mov	sl, ip
 8003988:	eb19 0309 	adds.w	r3, r9, r9
 800398c:	eb4a 040a 	adc.w	r4, sl, sl
 8003990:	4699      	mov	r9, r3
 8003992:	46a2      	mov	sl, r4
 8003994:	eb19 090b 	adds.w	r9, r9, fp
 8003998:	eb4a 0a0c 	adc.w	sl, sl, ip
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039b0:	4689      	mov	r9, r1
 80039b2:	4692      	mov	sl, r2
 80039b4:	eb1b 0509 	adds.w	r5, fp, r9
 80039b8:	eb4c 060a 	adc.w	r6, ip, sl
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	4619      	mov	r1, r3
 80039c2:	f04f 0200 	mov.w	r2, #0
 80039c6:	f04f 0300 	mov.w	r3, #0
 80039ca:	f04f 0400 	mov.w	r4, #0
 80039ce:	0094      	lsls	r4, r2, #2
 80039d0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80039d4:	008b      	lsls	r3, r1, #2
 80039d6:	461a      	mov	r2, r3
 80039d8:	4623      	mov	r3, r4
 80039da:	4628      	mov	r0, r5
 80039dc:	4631      	mov	r1, r6
 80039de:	f7fc fc1f 	bl	8000220 <__aeabi_uldivmod>
 80039e2:	4603      	mov	r3, r0
 80039e4:	460c      	mov	r4, r1
 80039e6:	461a      	mov	r2, r3
 80039e8:	4b9a      	ldr	r3, [pc, #616]	; (8003c54 <UART_SetConfig+0x6f4>)
 80039ea:	fba3 1302 	umull	r1, r3, r3, r2
 80039ee:	095b      	lsrs	r3, r3, #5
 80039f0:	2164      	movs	r1, #100	; 0x64
 80039f2:	fb01 f303 	mul.w	r3, r1, r3
 80039f6:	1ad3      	subs	r3, r2, r3
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	3332      	adds	r3, #50	; 0x32
 80039fc:	4a95      	ldr	r2, [pc, #596]	; (8003c54 <UART_SetConfig+0x6f4>)
 80039fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003a02:	095b      	lsrs	r3, r3, #5
 8003a04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a08:	4498      	add	r8, r3
 8003a0a:	68bb      	ldr	r3, [r7, #8]
 8003a0c:	469b      	mov	fp, r3
 8003a0e:	f04f 0c00 	mov.w	ip, #0
 8003a12:	46d9      	mov	r9, fp
 8003a14:	46e2      	mov	sl, ip
 8003a16:	eb19 0309 	adds.w	r3, r9, r9
 8003a1a:	eb4a 040a 	adc.w	r4, sl, sl
 8003a1e:	4699      	mov	r9, r3
 8003a20:	46a2      	mov	sl, r4
 8003a22:	eb19 090b 	adds.w	r9, r9, fp
 8003a26:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a36:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003a3a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003a3e:	4689      	mov	r9, r1
 8003a40:	4692      	mov	sl, r2
 8003a42:	eb1b 0509 	adds.w	r5, fp, r9
 8003a46:	eb4c 060a 	adc.w	r6, ip, sl
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	685b      	ldr	r3, [r3, #4]
 8003a4e:	4619      	mov	r1, r3
 8003a50:	f04f 0200 	mov.w	r2, #0
 8003a54:	f04f 0300 	mov.w	r3, #0
 8003a58:	f04f 0400 	mov.w	r4, #0
 8003a5c:	0094      	lsls	r4, r2, #2
 8003a5e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003a62:	008b      	lsls	r3, r1, #2
 8003a64:	461a      	mov	r2, r3
 8003a66:	4623      	mov	r3, r4
 8003a68:	4628      	mov	r0, r5
 8003a6a:	4631      	mov	r1, r6
 8003a6c:	f7fc fbd8 	bl	8000220 <__aeabi_uldivmod>
 8003a70:	4603      	mov	r3, r0
 8003a72:	460c      	mov	r4, r1
 8003a74:	461a      	mov	r2, r3
 8003a76:	4b77      	ldr	r3, [pc, #476]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003a78:	fba3 1302 	umull	r1, r3, r3, r2
 8003a7c:	095b      	lsrs	r3, r3, #5
 8003a7e:	2164      	movs	r1, #100	; 0x64
 8003a80:	fb01 f303 	mul.w	r3, r1, r3
 8003a84:	1ad3      	subs	r3, r2, r3
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	4a72      	ldr	r2, [pc, #456]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003a8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a90:	095b      	lsrs	r3, r3, #5
 8003a92:	f003 020f 	and.w	r2, r3, #15
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	4442      	add	r2, r8
 8003a9c:	609a      	str	r2, [r3, #8]
 8003a9e:	e0d0      	b.n	8003c42 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aa0:	f7fe fb5c 	bl	800215c <HAL_RCC_GetPCLK1Freq>
 8003aa4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	469a      	mov	sl, r3
 8003aaa:	f04f 0b00 	mov.w	fp, #0
 8003aae:	46d0      	mov	r8, sl
 8003ab0:	46d9      	mov	r9, fp
 8003ab2:	eb18 0308 	adds.w	r3, r8, r8
 8003ab6:	eb49 0409 	adc.w	r4, r9, r9
 8003aba:	4698      	mov	r8, r3
 8003abc:	46a1      	mov	r9, r4
 8003abe:	eb18 080a 	adds.w	r8, r8, sl
 8003ac2:	eb49 090b 	adc.w	r9, r9, fp
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	f04f 0200 	mov.w	r2, #0
 8003ace:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003ad2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003ad6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003ada:	4688      	mov	r8, r1
 8003adc:	4691      	mov	r9, r2
 8003ade:	eb1a 0508 	adds.w	r5, sl, r8
 8003ae2:	eb4b 0609 	adc.w	r6, fp, r9
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	685b      	ldr	r3, [r3, #4]
 8003aea:	4619      	mov	r1, r3
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	f04f 0400 	mov.w	r4, #0
 8003af8:	0094      	lsls	r4, r2, #2
 8003afa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003afe:	008b      	lsls	r3, r1, #2
 8003b00:	461a      	mov	r2, r3
 8003b02:	4623      	mov	r3, r4
 8003b04:	4628      	mov	r0, r5
 8003b06:	4631      	mov	r1, r6
 8003b08:	f7fc fb8a 	bl	8000220 <__aeabi_uldivmod>
 8003b0c:	4603      	mov	r3, r0
 8003b0e:	460c      	mov	r4, r1
 8003b10:	461a      	mov	r2, r3
 8003b12:	4b50      	ldr	r3, [pc, #320]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003b14:	fba3 2302 	umull	r2, r3, r3, r2
 8003b18:	095b      	lsrs	r3, r3, #5
 8003b1a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	469b      	mov	fp, r3
 8003b22:	f04f 0c00 	mov.w	ip, #0
 8003b26:	46d9      	mov	r9, fp
 8003b28:	46e2      	mov	sl, ip
 8003b2a:	eb19 0309 	adds.w	r3, r9, r9
 8003b2e:	eb4a 040a 	adc.w	r4, sl, sl
 8003b32:	4699      	mov	r9, r3
 8003b34:	46a2      	mov	sl, r4
 8003b36:	eb19 090b 	adds.w	r9, r9, fp
 8003b3a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003b3e:	f04f 0100 	mov.w	r1, #0
 8003b42:	f04f 0200 	mov.w	r2, #0
 8003b46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b4a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b4e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b52:	4689      	mov	r9, r1
 8003b54:	4692      	mov	sl, r2
 8003b56:	eb1b 0509 	adds.w	r5, fp, r9
 8003b5a:	eb4c 060a 	adc.w	r6, ip, sl
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	4619      	mov	r1, r3
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	f04f 0400 	mov.w	r4, #0
 8003b70:	0094      	lsls	r4, r2, #2
 8003b72:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003b76:	008b      	lsls	r3, r1, #2
 8003b78:	461a      	mov	r2, r3
 8003b7a:	4623      	mov	r3, r4
 8003b7c:	4628      	mov	r0, r5
 8003b7e:	4631      	mov	r1, r6
 8003b80:	f7fc fb4e 	bl	8000220 <__aeabi_uldivmod>
 8003b84:	4603      	mov	r3, r0
 8003b86:	460c      	mov	r4, r1
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4b32      	ldr	r3, [pc, #200]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8003b90:	095b      	lsrs	r3, r3, #5
 8003b92:	2164      	movs	r1, #100	; 0x64
 8003b94:	fb01 f303 	mul.w	r3, r1, r3
 8003b98:	1ad3      	subs	r3, r2, r3
 8003b9a:	011b      	lsls	r3, r3, #4
 8003b9c:	3332      	adds	r3, #50	; 0x32
 8003b9e:	4a2d      	ldr	r2, [pc, #180]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003ba0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba4:	095b      	lsrs	r3, r3, #5
 8003ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003baa:	4498      	add	r8, r3
 8003bac:	68bb      	ldr	r3, [r7, #8]
 8003bae:	469b      	mov	fp, r3
 8003bb0:	f04f 0c00 	mov.w	ip, #0
 8003bb4:	46d9      	mov	r9, fp
 8003bb6:	46e2      	mov	sl, ip
 8003bb8:	eb19 0309 	adds.w	r3, r9, r9
 8003bbc:	eb4a 040a 	adc.w	r4, sl, sl
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	46a2      	mov	sl, r4
 8003bc4:	eb19 090b 	adds.w	r9, r9, fp
 8003bc8:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	f04f 0200 	mov.w	r2, #0
 8003bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003bdc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003be0:	4689      	mov	r9, r1
 8003be2:	4692      	mov	sl, r2
 8003be4:	eb1b 0509 	adds.w	r5, fp, r9
 8003be8:	eb4c 060a 	adc.w	r6, ip, sl
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	f04f 0400 	mov.w	r4, #0
 8003bfe:	0094      	lsls	r4, r2, #2
 8003c00:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c04:	008b      	lsls	r3, r1, #2
 8003c06:	461a      	mov	r2, r3
 8003c08:	4623      	mov	r3, r4
 8003c0a:	4628      	mov	r0, r5
 8003c0c:	4631      	mov	r1, r6
 8003c0e:	f7fc fb07 	bl	8000220 <__aeabi_uldivmod>
 8003c12:	4603      	mov	r3, r0
 8003c14:	460c      	mov	r4, r1
 8003c16:	461a      	mov	r2, r3
 8003c18:	4b0e      	ldr	r3, [pc, #56]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003c1a:	fba3 1302 	umull	r1, r3, r3, r2
 8003c1e:	095b      	lsrs	r3, r3, #5
 8003c20:	2164      	movs	r1, #100	; 0x64
 8003c22:	fb01 f303 	mul.w	r3, r1, r3
 8003c26:	1ad3      	subs	r3, r2, r3
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	3332      	adds	r3, #50	; 0x32
 8003c2c:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <UART_SetConfig+0x6f4>)
 8003c2e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c32:	095b      	lsrs	r3, r3, #5
 8003c34:	f003 020f 	and.w	r2, r3, #15
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4442      	add	r2, r8
 8003c3e:	609a      	str	r2, [r3, #8]
}
 8003c40:	e7ff      	b.n	8003c42 <UART_SetConfig+0x6e2>
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c4c:	40011000 	.word	0x40011000
 8003c50:	40011400 	.word	0x40011400
 8003c54:	51eb851f 	.word	0x51eb851f

08003c58 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003c58:	b480      	push	{r7}
 8003c5a:	b085      	sub	sp, #20
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	4603      	mov	r3, r0
 8003c60:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003c62:	2300      	movs	r3, #0
 8003c64:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003c66:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003c6a:	2b84      	cmp	r3, #132	; 0x84
 8003c6c:	d005      	beq.n	8003c7a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003c6e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	4413      	add	r3, r2
 8003c76:	3303      	adds	r3, #3
 8003c78:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003c7a:	68fb      	ldr	r3, [r7, #12]
}
 8003c7c:	4618      	mov	r0, r3
 8003c7e:	3714      	adds	r7, #20
 8003c80:	46bd      	mov	sp, r7
 8003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c86:	4770      	bx	lr

08003c88 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b083      	sub	sp, #12
 8003c8c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003c8e:	f3ef 8305 	mrs	r3, IPSR
 8003c92:	607b      	str	r3, [r7, #4]
  return(result);
 8003c94:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	bf14      	ite	ne
 8003c9a:	2301      	movne	r3, #1
 8003c9c:	2300      	moveq	r3, #0
 8003c9e:	b2db      	uxtb	r3, r3
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cb0:	f001 f8dc 	bl	8004e6c <vTaskStartScheduler>
  
  return osOK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	bd80      	pop	{r7, pc}

08003cba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cba:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cbc:	b089      	sub	sp, #36	; 0x24
 8003cbe:	af04      	add	r7, sp, #16
 8003cc0:	6078      	str	r0, [r7, #4]
 8003cc2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d020      	beq.n	8003d0e <osThreadCreate+0x54>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01c      	beq.n	8003d0e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685c      	ldr	r4, [r3, #4]
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681d      	ldr	r5, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691e      	ldr	r6, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f7ff ffb6 	bl	8003c58 <makeFreeRtosPriority>
 8003cec:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	695b      	ldr	r3, [r3, #20]
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003cf6:	9202      	str	r2, [sp, #8]
 8003cf8:	9301      	str	r3, [sp, #4]
 8003cfa:	9100      	str	r1, [sp, #0]
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	4632      	mov	r2, r6
 8003d00:	4629      	mov	r1, r5
 8003d02:	4620      	mov	r0, r4
 8003d04:	f000 fef7 	bl	8004af6 <xTaskCreateStatic>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	60fb      	str	r3, [r7, #12]
 8003d0c:	e01c      	b.n	8003d48 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	685c      	ldr	r4, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d1a:	b29e      	uxth	r6, r3
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003d22:	4618      	mov	r0, r3
 8003d24:	f7ff ff98 	bl	8003c58 <makeFreeRtosPriority>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	f107 030c 	add.w	r3, r7, #12
 8003d2e:	9301      	str	r3, [sp, #4]
 8003d30:	9200      	str	r2, [sp, #0]
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	4632      	mov	r2, r6
 8003d36:	4629      	mov	r1, r5
 8003d38:	4620      	mov	r0, r4
 8003d3a:	f000 ff35 	bl	8004ba8 <xTaskCreate>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	2b01      	cmp	r3, #1
 8003d42:	d001      	beq.n	8003d48 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8003d44:	2300      	movs	r3, #0
 8003d46:	e000      	b.n	8003d4a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8003d48:	68fb      	ldr	r3, [r7, #12]
}
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	3714      	adds	r7, #20
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d52 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d001      	beq.n	8003d68 <osDelay+0x16>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	e000      	b.n	8003d6a <osDelay+0x18>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f84a 	bl	8004e04 <vTaskDelay>
  
  return osOK;
 8003d70:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d72:	4618      	mov	r0, r3
 8003d74:	3710      	adds	r7, #16
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd80      	pop	{r7, pc}

08003d7a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8003d7a:	b590      	push	{r4, r7, lr}
 8003d7c:	b085      	sub	sp, #20
 8003d7e:	af02      	add	r7, sp, #8
 8003d80:	6078      	str	r0, [r7, #4]
 8003d82:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d012      	beq.n	8003db2 <osMessageCreate+0x38>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00e      	beq.n	8003db2 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	6818      	ldr	r0, [r3, #0]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	6859      	ldr	r1, [r3, #4]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	689a      	ldr	r2, [r3, #8]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	68dc      	ldr	r4, [r3, #12]
 8003da4:	2300      	movs	r3, #0
 8003da6:	9300      	str	r3, [sp, #0]
 8003da8:	4623      	mov	r3, r4
 8003daa:	f000 f9df 	bl	800416c <xQueueGenericCreateStatic>
 8003dae:	4603      	mov	r3, r0
 8003db0:	e008      	b.n	8003dc4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6818      	ldr	r0, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	f000 fa47 	bl	8004250 <xQueueGenericCreate>
 8003dc2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	370c      	adds	r7, #12
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd90      	pop	{r4, r7, pc}

08003dcc <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b086      	sub	sp, #24
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	60f8      	str	r0, [r7, #12]
 8003dd4:	60b9      	str	r1, [r7, #8]
 8003dd6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d101      	bne.n	8003dea <osMessagePut+0x1e>
    ticks = 1;
 8003de6:	2301      	movs	r3, #1
 8003de8:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8003dea:	f7ff ff4d 	bl	8003c88 <inHandlerMode>
 8003dee:	4603      	mov	r3, r0
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d018      	beq.n	8003e26 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8003df4:	f107 0210 	add.w	r2, r7, #16
 8003df8:	f107 0108 	add.w	r1, r7, #8
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 fb7c 	bl	80044fc <xQueueGenericSendFromISR>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d001      	beq.n	8003e0e <osMessagePut+0x42>
      return osErrorOS;
 8003e0a:	23ff      	movs	r3, #255	; 0xff
 8003e0c:	e018      	b.n	8003e40 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d014      	beq.n	8003e3e <osMessagePut+0x72>
 8003e14:	4b0c      	ldr	r3, [pc, #48]	; (8003e48 <osMessagePut+0x7c>)
 8003e16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	f3bf 8f6f 	isb	sy
 8003e24:	e00b      	b.n	8003e3e <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8003e26:	f107 0108 	add.w	r1, r7, #8
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	68f8      	ldr	r0, [r7, #12]
 8003e30:	f000 fa6a 	bl	8004308 <xQueueGenericSend>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b01      	cmp	r3, #1
 8003e38:	d001      	beq.n	8003e3e <osMessagePut+0x72>
      return osErrorOS;
 8003e3a:	23ff      	movs	r3, #255	; 0xff
 8003e3c:	e000      	b.n	8003e40 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8003e3e:	2300      	movs	r3, #0
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	3718      	adds	r7, #24
 8003e44:	46bd      	mov	sp, r7
 8003e46:	bd80      	pop	{r7, pc}
 8003e48:	e000ed04 	.word	0xe000ed04

08003e4c <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8003e4c:	b590      	push	{r4, r7, lr}
 8003e4e:	b08b      	sub	sp, #44	; 0x2c
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	60f8      	str	r0, [r7, #12]
 8003e54:	60b9      	str	r1, [r7, #8]
 8003e56:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8003e58:	68bb      	ldr	r3, [r7, #8]
 8003e5a:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8003e5c:	2300      	movs	r3, #0
 8003e5e:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10a      	bne.n	8003e7c <osMessageGet+0x30>
    event.status = osErrorParameter;
 8003e66:	2380      	movs	r3, #128	; 0x80
 8003e68:	617b      	str	r3, [r7, #20]
    return event;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	461c      	mov	r4, r3
 8003e6e:	f107 0314 	add.w	r3, r7, #20
 8003e72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003e76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003e7a:	e054      	b.n	8003f26 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8003e80:	2300      	movs	r3, #0
 8003e82:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e8a:	d103      	bne.n	8003e94 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8003e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8003e90:	627b      	str	r3, [r7, #36]	; 0x24
 8003e92:	e009      	b.n	8003ea8 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d006      	beq.n	8003ea8 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d101      	bne.n	8003ea8 <osMessageGet+0x5c>
      ticks = 1;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8003ea8:	f7ff feee 	bl	8003c88 <inHandlerMode>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d01c      	beq.n	8003eec <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8003eb2:	f107 0220 	add.w	r2, r7, #32
 8003eb6:	f107 0314 	add.w	r3, r7, #20
 8003eba:	3304      	adds	r3, #4
 8003ebc:	4619      	mov	r1, r3
 8003ebe:	68b8      	ldr	r0, [r7, #8]
 8003ec0:	f000 fc8c 	bl	80047dc <xQueueReceiveFromISR>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d102      	bne.n	8003ed0 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8003eca:	2310      	movs	r3, #16
 8003ecc:	617b      	str	r3, [r7, #20]
 8003ece:	e001      	b.n	8003ed4 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8003ed0:	2300      	movs	r3, #0
 8003ed2:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003ed4:	6a3b      	ldr	r3, [r7, #32]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d01d      	beq.n	8003f16 <osMessageGet+0xca>
 8003eda:	4b15      	ldr	r3, [pc, #84]	; (8003f30 <osMessageGet+0xe4>)
 8003edc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ee0:	601a      	str	r2, [r3, #0]
 8003ee2:	f3bf 8f4f 	dsb	sy
 8003ee6:	f3bf 8f6f 	isb	sy
 8003eea:	e014      	b.n	8003f16 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8003eec:	f107 0314 	add.w	r3, r7, #20
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	68b8      	ldr	r0, [r7, #8]
 8003ef8:	f000 fb94 	bl	8004624 <xQueueReceive>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d102      	bne.n	8003f08 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8003f02:	2310      	movs	r3, #16
 8003f04:	617b      	str	r3, [r7, #20]
 8003f06:	e006      	b.n	8003f16 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8003f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <osMessageGet+0xc6>
 8003f0e:	2300      	movs	r3, #0
 8003f10:	e000      	b.n	8003f14 <osMessageGet+0xc8>
 8003f12:	2340      	movs	r3, #64	; 0x40
 8003f14:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	461c      	mov	r4, r3
 8003f1a:	f107 0314 	add.w	r3, r7, #20
 8003f1e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003f22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8003f26:	68f8      	ldr	r0, [r7, #12]
 8003f28:	372c      	adds	r7, #44	; 0x2c
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	bd90      	pop	{r4, r7, pc}
 8003f2e:	bf00      	nop
 8003f30:	e000ed04 	.word	0xe000ed04

08003f34 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	f103 0208 	add.w	r2, r3, #8
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f04f 32ff 	mov.w	r2, #4294967295
 8003f4c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f103 0208 	add.w	r2, r3, #8
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	f103 0208 	add.w	r2, r3, #8
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003f68:	bf00      	nop
 8003f6a:	370c      	adds	r7, #12
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003f82:	bf00      	nop
 8003f84:	370c      	adds	r7, #12
 8003f86:	46bd      	mov	sp, r7
 8003f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8c:	4770      	bx	lr

08003f8e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003f8e:	b480      	push	{r7}
 8003f90:	b085      	sub	sp, #20
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	6078      	str	r0, [r7, #4]
 8003f96:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003f9e:	683b      	ldr	r3, [r7, #0]
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	683a      	ldr	r2, [r7, #0]
 8003fb2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	687a      	ldr	r2, [r7, #4]
 8003fbe:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	1c5a      	adds	r2, r3, #1
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	601a      	str	r2, [r3, #0]
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b085      	sub	sp, #20
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
 8003fde:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fec:	d103      	bne.n	8003ff6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	e00c      	b.n	8004010 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	3308      	adds	r3, #8
 8003ffa:	60fb      	str	r3, [r7, #12]
 8003ffc:	e002      	b.n	8004004 <vListInsert+0x2e>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	68ba      	ldr	r2, [r7, #8]
 800400c:	429a      	cmp	r2, r3
 800400e:	d2f6      	bcs.n	8003ffe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	683a      	ldr	r2, [r7, #0]
 800401e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	68fa      	ldr	r2, [r7, #12]
 8004024:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	683a      	ldr	r2, [r7, #0]
 800402a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	687a      	ldr	r2, [r7, #4]
 8004030:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	1c5a      	adds	r2, r3, #1
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	601a      	str	r2, [r3, #0]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004048:	b480      	push	{r7}
 800404a:	b085      	sub	sp, #20
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	6892      	ldr	r2, [r2, #8]
 800405e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	687a      	ldr	r2, [r7, #4]
 8004066:	6852      	ldr	r2, [r2, #4]
 8004068:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	685b      	ldr	r3, [r3, #4]
 800406e:	687a      	ldr	r2, [r7, #4]
 8004070:	429a      	cmp	r2, r3
 8004072:	d103      	bne.n	800407c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	1e5a      	subs	r2, r3, #1
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	681b      	ldr	r3, [r3, #0]
}
 8004090:	4618      	mov	r0, r3
 8004092:	3714      	adds	r7, #20
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b084      	sub	sp, #16
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
 80040a4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d109      	bne.n	80040c4 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80040b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b4:	f383 8811 	msr	BASEPRI, r3
 80040b8:	f3bf 8f6f 	isb	sy
 80040bc:	f3bf 8f4f 	dsb	sy
 80040c0:	60bb      	str	r3, [r7, #8]
 80040c2:	e7fe      	b.n	80040c2 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80040c4:	f001 fd02 	bl	8005acc <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681a      	ldr	r2, [r3, #0]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040d0:	68f9      	ldr	r1, [r7, #12]
 80040d2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040d4:	fb01 f303 	mul.w	r3, r1, r3
 80040d8:	441a      	add	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	2200      	movs	r2, #0
 80040e2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681a      	ldr	r2, [r3, #0]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040f4:	3b01      	subs	r3, #1
 80040f6:	68f9      	ldr	r1, [r7, #12]
 80040f8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	441a      	add	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	22ff      	movs	r2, #255	; 0xff
 8004108:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	22ff      	movs	r2, #255	; 0xff
 8004110:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d114      	bne.n	8004144 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d01a      	beq.n	8004158 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3310      	adds	r3, #16
 8004126:	4618      	mov	r0, r3
 8004128:	f001 f8e2 	bl	80052f0 <xTaskRemoveFromEventList>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d012      	beq.n	8004158 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004132:	4b0d      	ldr	r3, [pc, #52]	; (8004168 <xQueueGenericReset+0xcc>)
 8004134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004138:	601a      	str	r2, [r3, #0]
 800413a:	f3bf 8f4f 	dsb	sy
 800413e:	f3bf 8f6f 	isb	sy
 8004142:	e009      	b.n	8004158 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	3310      	adds	r3, #16
 8004148:	4618      	mov	r0, r3
 800414a:	f7ff fef3 	bl	8003f34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	3324      	adds	r3, #36	; 0x24
 8004152:	4618      	mov	r0, r3
 8004154:	f7ff feee 	bl	8003f34 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004158:	f001 fce6 	bl	8005b28 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800415c:	2301      	movs	r3, #1
}
 800415e:	4618      	mov	r0, r3
 8004160:	3710      	adds	r7, #16
 8004162:	46bd      	mov	sp, r7
 8004164:	bd80      	pop	{r7, pc}
 8004166:	bf00      	nop
 8004168:	e000ed04 	.word	0xe000ed04

0800416c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800416c:	b580      	push	{r7, lr}
 800416e:	b08e      	sub	sp, #56	; 0x38
 8004170:	af02      	add	r7, sp, #8
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
 8004178:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d109      	bne.n	8004194 <xQueueGenericCreateStatic+0x28>
 8004180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004184:	f383 8811 	msr	BASEPRI, r3
 8004188:	f3bf 8f6f 	isb	sy
 800418c:	f3bf 8f4f 	dsb	sy
 8004190:	62bb      	str	r3, [r7, #40]	; 0x28
 8004192:	e7fe      	b.n	8004192 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d109      	bne.n	80041ae <xQueueGenericCreateStatic+0x42>
 800419a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800419e:	f383 8811 	msr	BASEPRI, r3
 80041a2:	f3bf 8f6f 	isb	sy
 80041a6:	f3bf 8f4f 	dsb	sy
 80041aa:	627b      	str	r3, [r7, #36]	; 0x24
 80041ac:	e7fe      	b.n	80041ac <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d002      	beq.n	80041ba <xQueueGenericCreateStatic+0x4e>
 80041b4:	68bb      	ldr	r3, [r7, #8]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d001      	beq.n	80041be <xQueueGenericCreateStatic+0x52>
 80041ba:	2301      	movs	r3, #1
 80041bc:	e000      	b.n	80041c0 <xQueueGenericCreateStatic+0x54>
 80041be:	2300      	movs	r3, #0
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d109      	bne.n	80041d8 <xQueueGenericCreateStatic+0x6c>
 80041c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041c8:	f383 8811 	msr	BASEPRI, r3
 80041cc:	f3bf 8f6f 	isb	sy
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	623b      	str	r3, [r7, #32]
 80041d6:	e7fe      	b.n	80041d6 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d102      	bne.n	80041e4 <xQueueGenericCreateStatic+0x78>
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d101      	bne.n	80041e8 <xQueueGenericCreateStatic+0x7c>
 80041e4:	2301      	movs	r3, #1
 80041e6:	e000      	b.n	80041ea <xQueueGenericCreateStatic+0x7e>
 80041e8:	2300      	movs	r3, #0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d109      	bne.n	8004202 <xQueueGenericCreateStatic+0x96>
 80041ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041f2:	f383 8811 	msr	BASEPRI, r3
 80041f6:	f3bf 8f6f 	isb	sy
 80041fa:	f3bf 8f4f 	dsb	sy
 80041fe:	61fb      	str	r3, [r7, #28]
 8004200:	e7fe      	b.n	8004200 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004202:	2348      	movs	r3, #72	; 0x48
 8004204:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004206:	697b      	ldr	r3, [r7, #20]
 8004208:	2b48      	cmp	r3, #72	; 0x48
 800420a:	d009      	beq.n	8004220 <xQueueGenericCreateStatic+0xb4>
 800420c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004210:	f383 8811 	msr	BASEPRI, r3
 8004214:	f3bf 8f6f 	isb	sy
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	61bb      	str	r3, [r7, #24]
 800421e:	e7fe      	b.n	800421e <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004226:	2b00      	cmp	r3, #0
 8004228:	d00d      	beq.n	8004246 <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800422a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800422c:	2201      	movs	r2, #1
 800422e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004232:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004238:	9300      	str	r3, [sp, #0]
 800423a:	4613      	mov	r3, r2
 800423c:	687a      	ldr	r2, [r7, #4]
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	68f8      	ldr	r0, [r7, #12]
 8004242:	f000 f842 	bl	80042ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004248:	4618      	mov	r0, r3
 800424a:	3730      	adds	r7, #48	; 0x30
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004250:	b580      	push	{r7, lr}
 8004252:	b08a      	sub	sp, #40	; 0x28
 8004254:	af02      	add	r7, sp, #8
 8004256:	60f8      	str	r0, [r7, #12]
 8004258:	60b9      	str	r1, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d109      	bne.n	8004278 <xQueueGenericCreate+0x28>
 8004264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004268:	f383 8811 	msr	BASEPRI, r3
 800426c:	f3bf 8f6f 	isb	sy
 8004270:	f3bf 8f4f 	dsb	sy
 8004274:	613b      	str	r3, [r7, #16]
 8004276:	e7fe      	b.n	8004276 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d102      	bne.n	8004284 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800427e:	2300      	movs	r3, #0
 8004280:	61fb      	str	r3, [r7, #28]
 8004282:	e004      	b.n	800428e <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	68ba      	ldr	r2, [r7, #8]
 8004288:	fb02 f303 	mul.w	r3, r2, r3
 800428c:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 800428e:	69fb      	ldr	r3, [r7, #28]
 8004290:	3348      	adds	r3, #72	; 0x48
 8004292:	4618      	mov	r0, r3
 8004294:	f001 fd34 	bl	8005d00 <pvPortMalloc>
 8004298:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d00f      	beq.n	80042c0 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	3348      	adds	r3, #72	; 0x48
 80042a4:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80042ae:	79fa      	ldrb	r2, [r7, #7]
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	4613      	mov	r3, r2
 80042b6:	697a      	ldr	r2, [r7, #20]
 80042b8:	68b9      	ldr	r1, [r7, #8]
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 f805 	bl	80042ca <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80042c0:	69bb      	ldr	r3, [r7, #24]
	}
 80042c2:	4618      	mov	r0, r3
 80042c4:	3720      	adds	r7, #32
 80042c6:	46bd      	mov	sp, r7
 80042c8:	bd80      	pop	{r7, pc}

080042ca <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80042ca:	b580      	push	{r7, lr}
 80042cc:	b084      	sub	sp, #16
 80042ce:	af00      	add	r7, sp, #0
 80042d0:	60f8      	str	r0, [r7, #12]
 80042d2:	60b9      	str	r1, [r7, #8]
 80042d4:	607a      	str	r2, [r7, #4]
 80042d6:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d103      	bne.n	80042e6 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	69ba      	ldr	r2, [r7, #24]
 80042e2:	601a      	str	r2, [r3, #0]
 80042e4:	e002      	b.n	80042ec <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	687a      	ldr	r2, [r7, #4]
 80042ea:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80042ec:	69bb      	ldr	r3, [r7, #24]
 80042ee:	68fa      	ldr	r2, [r7, #12]
 80042f0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80042f8:	2101      	movs	r1, #1
 80042fa:	69b8      	ldr	r0, [r7, #24]
 80042fc:	f7ff fece 	bl	800409c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004300:	bf00      	nop
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}

08004308 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004308:	b580      	push	{r7, lr}
 800430a:	b08e      	sub	sp, #56	; 0x38
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]
 8004314:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004316:	2300      	movs	r3, #0
 8004318:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800431e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004320:	2b00      	cmp	r3, #0
 8004322:	d109      	bne.n	8004338 <xQueueGenericSend+0x30>
 8004324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004328:	f383 8811 	msr	BASEPRI, r3
 800432c:	f3bf 8f6f 	isb	sy
 8004330:	f3bf 8f4f 	dsb	sy
 8004334:	62bb      	str	r3, [r7, #40]	; 0x28
 8004336:	e7fe      	b.n	8004336 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d103      	bne.n	8004346 <xQueueGenericSend+0x3e>
 800433e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004340:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004342:	2b00      	cmp	r3, #0
 8004344:	d101      	bne.n	800434a <xQueueGenericSend+0x42>
 8004346:	2301      	movs	r3, #1
 8004348:	e000      	b.n	800434c <xQueueGenericSend+0x44>
 800434a:	2300      	movs	r3, #0
 800434c:	2b00      	cmp	r3, #0
 800434e:	d109      	bne.n	8004364 <xQueueGenericSend+0x5c>
 8004350:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004354:	f383 8811 	msr	BASEPRI, r3
 8004358:	f3bf 8f6f 	isb	sy
 800435c:	f3bf 8f4f 	dsb	sy
 8004360:	627b      	str	r3, [r7, #36]	; 0x24
 8004362:	e7fe      	b.n	8004362 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d103      	bne.n	8004372 <xQueueGenericSend+0x6a>
 800436a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800436e:	2b01      	cmp	r3, #1
 8004370:	d101      	bne.n	8004376 <xQueueGenericSend+0x6e>
 8004372:	2301      	movs	r3, #1
 8004374:	e000      	b.n	8004378 <xQueueGenericSend+0x70>
 8004376:	2300      	movs	r3, #0
 8004378:	2b00      	cmp	r3, #0
 800437a:	d109      	bne.n	8004390 <xQueueGenericSend+0x88>
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	623b      	str	r3, [r7, #32]
 800438e:	e7fe      	b.n	800438e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004390:	f001 f96a 	bl	8005668 <xTaskGetSchedulerState>
 8004394:	4603      	mov	r3, r0
 8004396:	2b00      	cmp	r3, #0
 8004398:	d102      	bne.n	80043a0 <xQueueGenericSend+0x98>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2b00      	cmp	r3, #0
 800439e:	d101      	bne.n	80043a4 <xQueueGenericSend+0x9c>
 80043a0:	2301      	movs	r3, #1
 80043a2:	e000      	b.n	80043a6 <xQueueGenericSend+0x9e>
 80043a4:	2300      	movs	r3, #0
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <xQueueGenericSend+0xb6>
 80043aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ae:	f383 8811 	msr	BASEPRI, r3
 80043b2:	f3bf 8f6f 	isb	sy
 80043b6:	f3bf 8f4f 	dsb	sy
 80043ba:	61fb      	str	r3, [r7, #28]
 80043bc:	e7fe      	b.n	80043bc <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043be:	f001 fb85 	bl	8005acc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80043c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043ca:	429a      	cmp	r2, r3
 80043cc:	d302      	bcc.n	80043d4 <xQueueGenericSend+0xcc>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	2b02      	cmp	r3, #2
 80043d2:	d129      	bne.n	8004428 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043d4:	683a      	ldr	r2, [r7, #0]
 80043d6:	68b9      	ldr	r1, [r7, #8]
 80043d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80043da:	f000 fa7c 	bl	80048d6 <prvCopyDataToQueue>
 80043de:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d010      	beq.n	800440a <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	3324      	adds	r3, #36	; 0x24
 80043ec:	4618      	mov	r0, r3
 80043ee:	f000 ff7f 	bl	80052f0 <xTaskRemoveFromEventList>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80043f8:	4b3f      	ldr	r3, [pc, #252]	; (80044f8 <xQueueGenericSend+0x1f0>)
 80043fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	f3bf 8f4f 	dsb	sy
 8004404:	f3bf 8f6f 	isb	sy
 8004408:	e00a      	b.n	8004420 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800440a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800440c:	2b00      	cmp	r3, #0
 800440e:	d007      	beq.n	8004420 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004410:	4b39      	ldr	r3, [pc, #228]	; (80044f8 <xQueueGenericSend+0x1f0>)
 8004412:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	f3bf 8f4f 	dsb	sy
 800441c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004420:	f001 fb82 	bl	8005b28 <vPortExitCritical>
				return pdPASS;
 8004424:	2301      	movs	r3, #1
 8004426:	e063      	b.n	80044f0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d103      	bne.n	8004436 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800442e:	f001 fb7b 	bl	8005b28 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004432:	2300      	movs	r3, #0
 8004434:	e05c      	b.n	80044f0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004438:	2b00      	cmp	r3, #0
 800443a:	d106      	bne.n	800444a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800443c:	f107 0314 	add.w	r3, r7, #20
 8004440:	4618      	mov	r0, r3
 8004442:	f000 ffb7 	bl	80053b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004446:	2301      	movs	r3, #1
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800444a:	f001 fb6d 	bl	8005b28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800444e:	f000 fd6b 	bl	8004f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004452:	f001 fb3b 	bl	8005acc <vPortEnterCritical>
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800445c:	b25b      	sxtb	r3, r3
 800445e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004462:	d103      	bne.n	800446c <xQueueGenericSend+0x164>
 8004464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800446c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800446e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004472:	b25b      	sxtb	r3, r3
 8004474:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004478:	d103      	bne.n	8004482 <xQueueGenericSend+0x17a>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	2200      	movs	r2, #0
 800447e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004482:	f001 fb51 	bl	8005b28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004486:	1d3a      	adds	r2, r7, #4
 8004488:	f107 0314 	add.w	r3, r7, #20
 800448c:	4611      	mov	r1, r2
 800448e:	4618      	mov	r0, r3
 8004490:	f000 ffa6 	bl	80053e0 <xTaskCheckForTimeOut>
 8004494:	4603      	mov	r3, r0
 8004496:	2b00      	cmp	r3, #0
 8004498:	d124      	bne.n	80044e4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800449a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800449c:	f000 fb13 	bl	8004ac6 <prvIsQueueFull>
 80044a0:	4603      	mov	r3, r0
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d018      	beq.n	80044d8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	3310      	adds	r3, #16
 80044aa:	687a      	ldr	r2, [r7, #4]
 80044ac:	4611      	mov	r1, r2
 80044ae:	4618      	mov	r0, r3
 80044b0:	f000 fefa 	bl	80052a8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80044b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044b6:	f000 fa9e 	bl	80049f6 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80044ba:	f000 fd43 	bl	8004f44 <xTaskResumeAll>
 80044be:	4603      	mov	r3, r0
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f af7c 	bne.w	80043be <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80044c6:	4b0c      	ldr	r3, [pc, #48]	; (80044f8 <xQueueGenericSend+0x1f0>)
 80044c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044cc:	601a      	str	r2, [r3, #0]
 80044ce:	f3bf 8f4f 	dsb	sy
 80044d2:	f3bf 8f6f 	isb	sy
 80044d6:	e772      	b.n	80043be <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80044d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044da:	f000 fa8c 	bl	80049f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80044de:	f000 fd31 	bl	8004f44 <xTaskResumeAll>
 80044e2:	e76c      	b.n	80043be <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80044e4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80044e6:	f000 fa86 	bl	80049f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80044ea:	f000 fd2b 	bl	8004f44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80044ee:	2300      	movs	r3, #0
		}
	}
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3738      	adds	r7, #56	; 0x38
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	e000ed04 	.word	0xe000ed04

080044fc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08e      	sub	sp, #56	; 0x38
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800450e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004510:	2b00      	cmp	r3, #0
 8004512:	d109      	bne.n	8004528 <xQueueGenericSendFromISR+0x2c>
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
 8004526:	e7fe      	b.n	8004526 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d103      	bne.n	8004536 <xQueueGenericSendFromISR+0x3a>
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d101      	bne.n	800453a <xQueueGenericSendFromISR+0x3e>
 8004536:	2301      	movs	r3, #1
 8004538:	e000      	b.n	800453c <xQueueGenericSendFromISR+0x40>
 800453a:	2300      	movs	r3, #0
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <xQueueGenericSendFromISR+0x58>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	623b      	str	r3, [r7, #32]
 8004552:	e7fe      	b.n	8004552 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b02      	cmp	r3, #2
 8004558:	d103      	bne.n	8004562 <xQueueGenericSendFromISR+0x66>
 800455a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b01      	cmp	r3, #1
 8004560:	d101      	bne.n	8004566 <xQueueGenericSendFromISR+0x6a>
 8004562:	2301      	movs	r3, #1
 8004564:	e000      	b.n	8004568 <xQueueGenericSendFromISR+0x6c>
 8004566:	2300      	movs	r3, #0
 8004568:	2b00      	cmp	r3, #0
 800456a:	d109      	bne.n	8004580 <xQueueGenericSendFromISR+0x84>
 800456c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004570:	f383 8811 	msr	BASEPRI, r3
 8004574:	f3bf 8f6f 	isb	sy
 8004578:	f3bf 8f4f 	dsb	sy
 800457c:	61fb      	str	r3, [r7, #28]
 800457e:	e7fe      	b.n	800457e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004580:	f001 fb80 	bl	8005c84 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004584:	f3ef 8211 	mrs	r2, BASEPRI
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	61ba      	str	r2, [r7, #24]
 800459a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800459c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800459e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80045a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045a8:	429a      	cmp	r2, r3
 80045aa:	d302      	bcc.n	80045b2 <xQueueGenericSendFromISR+0xb6>
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d12c      	bne.n	800460c <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80045b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045b4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80045b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80045bc:	683a      	ldr	r2, [r7, #0]
 80045be:	68b9      	ldr	r1, [r7, #8]
 80045c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80045c2:	f000 f988 	bl	80048d6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80045c6:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80045ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ce:	d112      	bne.n	80045f6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80045d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d016      	beq.n	8004606 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80045d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045da:	3324      	adds	r3, #36	; 0x24
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fe87 	bl	80052f0 <xTaskRemoveFromEventList>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d00e      	beq.n	8004606 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00b      	beq.n	8004606 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2201      	movs	r2, #1
 80045f2:	601a      	str	r2, [r3, #0]
 80045f4:	e007      	b.n	8004606 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80045f6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80045fa:	3301      	adds	r3, #1
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	b25a      	sxtb	r2, r3
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004606:	2301      	movs	r3, #1
 8004608:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800460a:	e001      	b.n	8004610 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800460c:	2300      	movs	r3, #0
 800460e:	637b      	str	r3, [r7, #52]	; 0x34
 8004610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004612:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004614:	693b      	ldr	r3, [r7, #16]
 8004616:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800461a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800461c:	4618      	mov	r0, r3
 800461e:	3738      	adds	r7, #56	; 0x38
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08c      	sub	sp, #48	; 0x30
 8004628:	af00      	add	r7, sp, #0
 800462a:	60f8      	str	r0, [r7, #12]
 800462c:	60b9      	str	r1, [r7, #8]
 800462e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004630:	2300      	movs	r3, #0
 8004632:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800463a:	2b00      	cmp	r3, #0
 800463c:	d109      	bne.n	8004652 <xQueueReceive+0x2e>
	__asm volatile
 800463e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004642:	f383 8811 	msr	BASEPRI, r3
 8004646:	f3bf 8f6f 	isb	sy
 800464a:	f3bf 8f4f 	dsb	sy
 800464e:	623b      	str	r3, [r7, #32]
 8004650:	e7fe      	b.n	8004650 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d103      	bne.n	8004660 <xQueueReceive+0x3c>
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <xQueueReceive+0x40>
 8004660:	2301      	movs	r3, #1
 8004662:	e000      	b.n	8004666 <xQueueReceive+0x42>
 8004664:	2300      	movs	r3, #0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d109      	bne.n	800467e <xQueueReceive+0x5a>
 800466a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800466e:	f383 8811 	msr	BASEPRI, r3
 8004672:	f3bf 8f6f 	isb	sy
 8004676:	f3bf 8f4f 	dsb	sy
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e7fe      	b.n	800467c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800467e:	f000 fff3 	bl	8005668 <xTaskGetSchedulerState>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d102      	bne.n	800468e <xQueueReceive+0x6a>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	2b00      	cmp	r3, #0
 800468c:	d101      	bne.n	8004692 <xQueueReceive+0x6e>
 800468e:	2301      	movs	r3, #1
 8004690:	e000      	b.n	8004694 <xQueueReceive+0x70>
 8004692:	2300      	movs	r3, #0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d109      	bne.n	80046ac <xQueueReceive+0x88>
 8004698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469c:	f383 8811 	msr	BASEPRI, r3
 80046a0:	f3bf 8f6f 	isb	sy
 80046a4:	f3bf 8f4f 	dsb	sy
 80046a8:	61bb      	str	r3, [r7, #24]
 80046aa:	e7fe      	b.n	80046aa <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 80046ac:	f001 fa0e 	bl	8005acc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80046b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b4:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80046b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d01f      	beq.n	80046fc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c0:	f000 f973 	bl	80049aa <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80046c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c6:	1e5a      	subs	r2, r3, #1
 80046c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ca:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d00f      	beq.n	80046f4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80046d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d6:	3310      	adds	r3, #16
 80046d8:	4618      	mov	r0, r3
 80046da:	f000 fe09 	bl	80052f0 <xTaskRemoveFromEventList>
 80046de:	4603      	mov	r3, r0
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d007      	beq.n	80046f4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80046e4:	4b3c      	ldr	r3, [pc, #240]	; (80047d8 <xQueueReceive+0x1b4>)
 80046e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ea:	601a      	str	r2, [r3, #0]
 80046ec:	f3bf 8f4f 	dsb	sy
 80046f0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80046f4:	f001 fa18 	bl	8005b28 <vPortExitCritical>
				return pdPASS;
 80046f8:	2301      	movs	r3, #1
 80046fa:	e069      	b.n	80047d0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d103      	bne.n	800470a <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004702:	f001 fa11 	bl	8005b28 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004706:	2300      	movs	r3, #0
 8004708:	e062      	b.n	80047d0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800470a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800470c:	2b00      	cmp	r3, #0
 800470e:	d106      	bne.n	800471e <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004710:	f107 0310 	add.w	r3, r7, #16
 8004714:	4618      	mov	r0, r3
 8004716:	f000 fe4d 	bl	80053b4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800471e:	f001 fa03 	bl	8005b28 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004722:	f000 fc01 	bl	8004f28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004726:	f001 f9d1 	bl	8005acc <vPortEnterCritical>
 800472a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800472c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004730:	b25b      	sxtb	r3, r3
 8004732:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004736:	d103      	bne.n	8004740 <xQueueReceive+0x11c>
 8004738:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473a:	2200      	movs	r2, #0
 800473c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004746:	b25b      	sxtb	r3, r3
 8004748:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474c:	d103      	bne.n	8004756 <xQueueReceive+0x132>
 800474e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004750:	2200      	movs	r2, #0
 8004752:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004756:	f001 f9e7 	bl	8005b28 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800475a:	1d3a      	adds	r2, r7, #4
 800475c:	f107 0310 	add.w	r3, r7, #16
 8004760:	4611      	mov	r1, r2
 8004762:	4618      	mov	r0, r3
 8004764:	f000 fe3c 	bl	80053e0 <xTaskCheckForTimeOut>
 8004768:	4603      	mov	r3, r0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d123      	bne.n	80047b6 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800476e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004770:	f000 f993 	bl	8004a9a <prvIsQueueEmpty>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d017      	beq.n	80047aa <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800477a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800477c:	3324      	adds	r3, #36	; 0x24
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	4611      	mov	r1, r2
 8004782:	4618      	mov	r0, r3
 8004784:	f000 fd90 	bl	80052a8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004788:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800478a:	f000 f934 	bl	80049f6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800478e:	f000 fbd9 	bl	8004f44 <xTaskResumeAll>
 8004792:	4603      	mov	r3, r0
 8004794:	2b00      	cmp	r3, #0
 8004796:	d189      	bne.n	80046ac <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004798:	4b0f      	ldr	r3, [pc, #60]	; (80047d8 <xQueueReceive+0x1b4>)
 800479a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800479e:	601a      	str	r2, [r3, #0]
 80047a0:	f3bf 8f4f 	dsb	sy
 80047a4:	f3bf 8f6f 	isb	sy
 80047a8:	e780      	b.n	80046ac <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80047aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047ac:	f000 f923 	bl	80049f6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047b0:	f000 fbc8 	bl	8004f44 <xTaskResumeAll>
 80047b4:	e77a      	b.n	80046ac <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80047b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047b8:	f000 f91d 	bl	80049f6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047bc:	f000 fbc2 	bl	8004f44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80047c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80047c2:	f000 f96a 	bl	8004a9a <prvIsQueueEmpty>
 80047c6:	4603      	mov	r3, r0
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f43f af6f 	beq.w	80046ac <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80047ce:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 80047d0:	4618      	mov	r0, r3
 80047d2:	3730      	adds	r7, #48	; 0x30
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bd80      	pop	{r7, pc}
 80047d8:	e000ed04 	.word	0xe000ed04

080047dc <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b08e      	sub	sp, #56	; 0x38
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d109      	bne.n	8004806 <xQueueReceiveFromISR+0x2a>
 80047f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047f6:	f383 8811 	msr	BASEPRI, r3
 80047fa:	f3bf 8f6f 	isb	sy
 80047fe:	f3bf 8f4f 	dsb	sy
 8004802:	623b      	str	r3, [r7, #32]
 8004804:	e7fe      	b.n	8004804 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004806:	68bb      	ldr	r3, [r7, #8]
 8004808:	2b00      	cmp	r3, #0
 800480a:	d103      	bne.n	8004814 <xQueueReceiveFromISR+0x38>
 800480c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800480e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004810:	2b00      	cmp	r3, #0
 8004812:	d101      	bne.n	8004818 <xQueueReceiveFromISR+0x3c>
 8004814:	2301      	movs	r3, #1
 8004816:	e000      	b.n	800481a <xQueueReceiveFromISR+0x3e>
 8004818:	2300      	movs	r3, #0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d109      	bne.n	8004832 <xQueueReceiveFromISR+0x56>
 800481e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004822:	f383 8811 	msr	BASEPRI, r3
 8004826:	f3bf 8f6f 	isb	sy
 800482a:	f3bf 8f4f 	dsb	sy
 800482e:	61fb      	str	r3, [r7, #28]
 8004830:	e7fe      	b.n	8004830 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004832:	f001 fa27 	bl	8005c84 <vPortValidateInterruptPriority>
	__asm volatile
 8004836:	f3ef 8211 	mrs	r2, BASEPRI
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	61ba      	str	r2, [r7, #24]
 800484c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800484e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004856:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800485a:	2b00      	cmp	r3, #0
 800485c:	d02f      	beq.n	80048be <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800485e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004860:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004864:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004868:	68b9      	ldr	r1, [r7, #8]
 800486a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800486c:	f000 f89d 	bl	80049aa <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004872:	1e5a      	subs	r2, r3, #1
 8004874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004876:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004878:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800487c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004880:	d112      	bne.n	80048a8 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d016      	beq.n	80048b8 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800488a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488c:	3310      	adds	r3, #16
 800488e:	4618      	mov	r0, r3
 8004890:	f000 fd2e 	bl	80052f0 <xTaskRemoveFromEventList>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00e      	beq.n	80048b8 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2201      	movs	r2, #1
 80048a4:	601a      	str	r2, [r3, #0]
 80048a6:	e007      	b.n	80048b8 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80048a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80048ac:	3301      	adds	r3, #1
 80048ae:	b2db      	uxtb	r3, r3
 80048b0:	b25a      	sxtb	r2, r3
 80048b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80048b8:	2301      	movs	r3, #1
 80048ba:	637b      	str	r3, [r7, #52]	; 0x34
 80048bc:	e001      	b.n	80048c2 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 80048be:	2300      	movs	r3, #0
 80048c0:	637b      	str	r3, [r7, #52]	; 0x34
 80048c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80048c6:	693b      	ldr	r3, [r7, #16]
 80048c8:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3738      	adds	r7, #56	; 0x38
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}

080048d6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048d6:	b580      	push	{r7, lr}
 80048d8:	b086      	sub	sp, #24
 80048da:	af00      	add	r7, sp, #0
 80048dc:	60f8      	str	r0, [r7, #12]
 80048de:	60b9      	str	r1, [r7, #8]
 80048e0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048e2:	2300      	movs	r3, #0
 80048e4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d10d      	bne.n	8004910 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d14d      	bne.n	8004998 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	4618      	mov	r0, r3
 8004902:	f000 fecf 	bl	80056a4 <xTaskPriorityDisinherit>
 8004906:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	605a      	str	r2, [r3, #4]
 800490e:	e043      	b.n	8004998 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d119      	bne.n	800494a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	6898      	ldr	r0, [r3, #8]
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800491e:	461a      	mov	r2, r3
 8004920:	68b9      	ldr	r1, [r7, #8]
 8004922:	f001 ffd7 	bl	80068d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	689a      	ldr	r2, [r3, #8]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800492e:	441a      	add	r2, r3
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	689a      	ldr	r2, [r3, #8]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	685b      	ldr	r3, [r3, #4]
 800493c:	429a      	cmp	r2, r3
 800493e:	d32b      	bcc.n	8004998 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
 8004948:	e026      	b.n	8004998 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	68d8      	ldr	r0, [r3, #12]
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	461a      	mov	r2, r3
 8004954:	68b9      	ldr	r1, [r7, #8]
 8004956:	f001 ffbd 	bl	80068d4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	68da      	ldr	r2, [r3, #12]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004962:	425b      	negs	r3, r3
 8004964:	441a      	add	r2, r3
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	429a      	cmp	r2, r3
 8004974:	d207      	bcs.n	8004986 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	685a      	ldr	r2, [r3, #4]
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	425b      	negs	r3, r3
 8004980:	441a      	add	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d105      	bne.n	8004998 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d002      	beq.n	8004998 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004992:	693b      	ldr	r3, [r7, #16]
 8004994:	3b01      	subs	r3, #1
 8004996:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80049a0:	697b      	ldr	r3, [r7, #20]
}
 80049a2:	4618      	mov	r0, r3
 80049a4:	3718      	adds	r7, #24
 80049a6:	46bd      	mov	sp, r7
 80049a8:	bd80      	pop	{r7, pc}

080049aa <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80049aa:	b580      	push	{r7, lr}
 80049ac:	b082      	sub	sp, #8
 80049ae:	af00      	add	r7, sp, #0
 80049b0:	6078      	str	r0, [r7, #4]
 80049b2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d018      	beq.n	80049ee <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	68da      	ldr	r2, [r3, #12]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c4:	441a      	add	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68da      	ldr	r2, [r3, #12]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	429a      	cmp	r2, r3
 80049d4:	d303      	bcc.n	80049de <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	68d9      	ldr	r1, [r3, #12]
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e6:	461a      	mov	r2, r3
 80049e8:	6838      	ldr	r0, [r7, #0]
 80049ea:	f001 ff73 	bl	80068d4 <memcpy>
	}
}
 80049ee:	bf00      	nop
 80049f0:	3708      	adds	r7, #8
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}

080049f6 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049f6:	b580      	push	{r7, lr}
 80049f8:	b084      	sub	sp, #16
 80049fa:	af00      	add	r7, sp, #0
 80049fc:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049fe:	f001 f865 	bl	8005acc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a08:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a0a:	e011      	b.n	8004a30 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d012      	beq.n	8004a3a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	3324      	adds	r3, #36	; 0x24
 8004a18:	4618      	mov	r0, r3
 8004a1a:	f000 fc69 	bl	80052f0 <xTaskRemoveFromEventList>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d001      	beq.n	8004a28 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a24:	f000 fd3c 	bl	80054a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a28:	7bfb      	ldrb	r3, [r7, #15]
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a30:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	dce9      	bgt.n	8004a0c <prvUnlockQueue+0x16>
 8004a38:	e000      	b.n	8004a3c <prvUnlockQueue+0x46>
					break;
 8004a3a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	22ff      	movs	r2, #255	; 0xff
 8004a40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a44:	f001 f870 	bl	8005b28 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a48:	f001 f840 	bl	8005acc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a52:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a54:	e011      	b.n	8004a7a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	691b      	ldr	r3, [r3, #16]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d012      	beq.n	8004a84 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	3310      	adds	r3, #16
 8004a62:	4618      	mov	r0, r3
 8004a64:	f000 fc44 	bl	80052f0 <xTaskRemoveFromEventList>
 8004a68:	4603      	mov	r3, r0
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d001      	beq.n	8004a72 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a6e:	f000 fd17 	bl	80054a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a72:	7bbb      	ldrb	r3, [r7, #14]
 8004a74:	3b01      	subs	r3, #1
 8004a76:	b2db      	uxtb	r3, r3
 8004a78:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a7a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	dce9      	bgt.n	8004a56 <prvUnlockQueue+0x60>
 8004a82:	e000      	b.n	8004a86 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a84:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	22ff      	movs	r2, #255	; 0xff
 8004a8a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a8e:	f001 f84b 	bl	8005b28 <vPortExitCritical>
}
 8004a92:	bf00      	nop
 8004a94:	3710      	adds	r7, #16
 8004a96:	46bd      	mov	sp, r7
 8004a98:	bd80      	pop	{r7, pc}

08004a9a <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a9a:	b580      	push	{r7, lr}
 8004a9c:	b084      	sub	sp, #16
 8004a9e:	af00      	add	r7, sp, #0
 8004aa0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004aa2:	f001 f813 	bl	8005acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d102      	bne.n	8004ab4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	e001      	b.n	8004ab8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ab8:	f001 f836 	bl	8005b28 <vPortExitCritical>

	return xReturn;
 8004abc:	68fb      	ldr	r3, [r7, #12]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3710      	adds	r7, #16
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ace:	f000 fffd 	bl	8005acc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ada:	429a      	cmp	r2, r3
 8004adc:	d102      	bne.n	8004ae4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
 8004ae2:	e001      	b.n	8004ae8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ae8:	f001 f81e 	bl	8005b28 <vPortExitCritical>

	return xReturn;
 8004aec:	68fb      	ldr	r3, [r7, #12]
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3710      	adds	r7, #16
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}

08004af6 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004af6:	b580      	push	{r7, lr}
 8004af8:	b08e      	sub	sp, #56	; 0x38
 8004afa:	af04      	add	r7, sp, #16
 8004afc:	60f8      	str	r0, [r7, #12]
 8004afe:	60b9      	str	r1, [r7, #8]
 8004b00:	607a      	str	r2, [r7, #4]
 8004b02:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004b04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d109      	bne.n	8004b1e <xTaskCreateStatic+0x28>
	__asm volatile
 8004b0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0e:	f383 8811 	msr	BASEPRI, r3
 8004b12:	f3bf 8f6f 	isb	sy
 8004b16:	f3bf 8f4f 	dsb	sy
 8004b1a:	623b      	str	r3, [r7, #32]
 8004b1c:	e7fe      	b.n	8004b1c <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d109      	bne.n	8004b38 <xTaskCreateStatic+0x42>
 8004b24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b28:	f383 8811 	msr	BASEPRI, r3
 8004b2c:	f3bf 8f6f 	isb	sy
 8004b30:	f3bf 8f4f 	dsb	sy
 8004b34:	61fb      	str	r3, [r7, #28]
 8004b36:	e7fe      	b.n	8004b36 <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004b38:	2354      	movs	r3, #84	; 0x54
 8004b3a:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004b3c:	693b      	ldr	r3, [r7, #16]
 8004b3e:	2b54      	cmp	r3, #84	; 0x54
 8004b40:	d009      	beq.n	8004b56 <xTaskCreateStatic+0x60>
 8004b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b46:	f383 8811 	msr	BASEPRI, r3
 8004b4a:	f3bf 8f6f 	isb	sy
 8004b4e:	f3bf 8f4f 	dsb	sy
 8004b52:	61bb      	str	r3, [r7, #24]
 8004b54:	e7fe      	b.n	8004b54 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d01e      	beq.n	8004b9a <xTaskCreateStatic+0xa4>
 8004b5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01b      	beq.n	8004b9a <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004b62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b6a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b6e:	2202      	movs	r2, #2
 8004b70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004b74:	2300      	movs	r3, #0
 8004b76:	9303      	str	r3, [sp, #12]
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	9302      	str	r3, [sp, #8]
 8004b7c:	f107 0314 	add.w	r3, r7, #20
 8004b80:	9301      	str	r3, [sp, #4]
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	9300      	str	r3, [sp, #0]
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	687a      	ldr	r2, [r7, #4]
 8004b8a:	68b9      	ldr	r1, [r7, #8]
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f000 f850 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004b92:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004b94:	f000 f8cc 	bl	8004d30 <prvAddNewTaskToReadyList>
 8004b98:	e001      	b.n	8004b9e <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004b9e:	697b      	ldr	r3, [r7, #20]
	}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	3728      	adds	r7, #40	; 0x28
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}

08004ba8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004ba8:	b580      	push	{r7, lr}
 8004baa:	b08c      	sub	sp, #48	; 0x30
 8004bac:	af04      	add	r7, sp, #16
 8004bae:	60f8      	str	r0, [r7, #12]
 8004bb0:	60b9      	str	r1, [r7, #8]
 8004bb2:	603b      	str	r3, [r7, #0]
 8004bb4:	4613      	mov	r3, r2
 8004bb6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bb8:	88fb      	ldrh	r3, [r7, #6]
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 f89f 	bl	8005d00 <pvPortMalloc>
 8004bc2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004bc4:	697b      	ldr	r3, [r7, #20]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d00e      	beq.n	8004be8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004bca:	2054      	movs	r0, #84	; 0x54
 8004bcc:	f001 f898 	bl	8005d00 <pvPortMalloc>
 8004bd0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	697a      	ldr	r2, [r7, #20]
 8004bdc:	631a      	str	r2, [r3, #48]	; 0x30
 8004bde:	e005      	b.n	8004bec <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004be0:	6978      	ldr	r0, [r7, #20]
 8004be2:	f001 f94f 	bl	8005e84 <vPortFree>
 8004be6:	e001      	b.n	8004bec <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004be8:	2300      	movs	r3, #0
 8004bea:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004bec:	69fb      	ldr	r3, [r7, #28]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d017      	beq.n	8004c22 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004bf2:	69fb      	ldr	r3, [r7, #28]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004bfa:	88fa      	ldrh	r2, [r7, #6]
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	9303      	str	r3, [sp, #12]
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c06:	9301      	str	r3, [sp, #4]
 8004c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c0a:	9300      	str	r3, [sp, #0]
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	68b9      	ldr	r1, [r7, #8]
 8004c10:	68f8      	ldr	r0, [r7, #12]
 8004c12:	f000 f80e 	bl	8004c32 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c16:	69f8      	ldr	r0, [r7, #28]
 8004c18:	f000 f88a 	bl	8004d30 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	61bb      	str	r3, [r7, #24]
 8004c20:	e002      	b.n	8004c28 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004c22:	f04f 33ff 	mov.w	r3, #4294967295
 8004c26:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004c28:	69bb      	ldr	r3, [r7, #24]
	}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3720      	adds	r7, #32
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}

08004c32 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004c32:	b580      	push	{r7, lr}
 8004c34:	b088      	sub	sp, #32
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	60f8      	str	r0, [r7, #12]
 8004c3a:	60b9      	str	r1, [r7, #8]
 8004c3c:	607a      	str	r2, [r7, #4]
 8004c3e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	f023 0307 	bic.w	r3, r3, #7
 8004c58:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	f003 0307 	and.w	r3, r3, #7
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d009      	beq.n	8004c78 <prvInitialiseNewTask+0x46>
 8004c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c68:	f383 8811 	msr	BASEPRI, r3
 8004c6c:	f3bf 8f6f 	isb	sy
 8004c70:	f3bf 8f4f 	dsb	sy
 8004c74:	617b      	str	r3, [r7, #20]
 8004c76:	e7fe      	b.n	8004c76 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c78:	2300      	movs	r3, #0
 8004c7a:	61fb      	str	r3, [r7, #28]
 8004c7c:	e012      	b.n	8004ca4 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004c7e:	68ba      	ldr	r2, [r7, #8]
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	7819      	ldrb	r1, [r3, #0]
 8004c86:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	4413      	add	r3, r2
 8004c8c:	3334      	adds	r3, #52	; 0x34
 8004c8e:	460a      	mov	r2, r1
 8004c90:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004c92:	68ba      	ldr	r2, [r7, #8]
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	4413      	add	r3, r2
 8004c98:	781b      	ldrb	r3, [r3, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d006      	beq.n	8004cac <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
 8004ca6:	2b0f      	cmp	r3, #15
 8004ca8:	d9e9      	bls.n	8004c7e <prvInitialiseNewTask+0x4c>
 8004caa:	e000      	b.n	8004cae <prvInitialiseNewTask+0x7c>
		{
			break;
 8004cac:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	2b06      	cmp	r3, #6
 8004cba:	d901      	bls.n	8004cc0 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004cbc:	2306      	movs	r3, #6
 8004cbe:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004cc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cc4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cc8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cca:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cce:	2200      	movs	r2, #0
 8004cd0:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cd4:	3304      	adds	r3, #4
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7ff f94c 	bl	8003f74 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004cdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cde:	3318      	adds	r3, #24
 8004ce0:	4618      	mov	r0, r3
 8004ce2:	f7ff f947 	bl	8003f74 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cea:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cee:	f1c3 0207 	rsb	r2, r3, #7
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004cf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cfa:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfe:	2200      	movs	r2, #0
 8004d00:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004d02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004d0a:	683a      	ldr	r2, [r7, #0]
 8004d0c:	68f9      	ldr	r1, [r7, #12]
 8004d0e:	69b8      	ldr	r0, [r7, #24]
 8004d10:	f000 fdb2 	bl	8005878 <pxPortInitialiseStack>
 8004d14:	4602      	mov	r2, r0
 8004d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d18:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d002      	beq.n	8004d26 <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d24:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004d26:	bf00      	nop
 8004d28:	3720      	adds	r7, #32
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}
	...

08004d30 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b082      	sub	sp, #8
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004d38:	f000 fec8 	bl	8005acc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004d3c:	4b2a      	ldr	r3, [pc, #168]	; (8004de8 <prvAddNewTaskToReadyList+0xb8>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	3301      	adds	r3, #1
 8004d42:	4a29      	ldr	r2, [pc, #164]	; (8004de8 <prvAddNewTaskToReadyList+0xb8>)
 8004d44:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004d46:	4b29      	ldr	r3, [pc, #164]	; (8004dec <prvAddNewTaskToReadyList+0xbc>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d109      	bne.n	8004d62 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004d4e:	4a27      	ldr	r2, [pc, #156]	; (8004dec <prvAddNewTaskToReadyList+0xbc>)
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004d54:	4b24      	ldr	r3, [pc, #144]	; (8004de8 <prvAddNewTaskToReadyList+0xb8>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	2b01      	cmp	r3, #1
 8004d5a:	d110      	bne.n	8004d7e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004d5c:	f000 fbc4 	bl	80054e8 <prvInitialiseTaskLists>
 8004d60:	e00d      	b.n	8004d7e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004d62:	4b23      	ldr	r3, [pc, #140]	; (8004df0 <prvAddNewTaskToReadyList+0xc0>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d109      	bne.n	8004d7e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004d6a:	4b20      	ldr	r3, [pc, #128]	; (8004dec <prvAddNewTaskToReadyList+0xbc>)
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	429a      	cmp	r2, r3
 8004d76:	d802      	bhi.n	8004d7e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004d78:	4a1c      	ldr	r2, [pc, #112]	; (8004dec <prvAddNewTaskToReadyList+0xbc>)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004d7e:	4b1d      	ldr	r3, [pc, #116]	; (8004df4 <prvAddNewTaskToReadyList+0xc4>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a1b      	ldr	r2, [pc, #108]	; (8004df4 <prvAddNewTaskToReadyList+0xc4>)
 8004d86:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	2201      	movs	r2, #1
 8004d8e:	409a      	lsls	r2, r3
 8004d90:	4b19      	ldr	r3, [pc, #100]	; (8004df8 <prvAddNewTaskToReadyList+0xc8>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	4a18      	ldr	r2, [pc, #96]	; (8004df8 <prvAddNewTaskToReadyList+0xc8>)
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4a15      	ldr	r2, [pc, #84]	; (8004dfc <prvAddNewTaskToReadyList+0xcc>)
 8004da8:	441a      	add	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	3304      	adds	r3, #4
 8004dae:	4619      	mov	r1, r3
 8004db0:	4610      	mov	r0, r2
 8004db2:	f7ff f8ec 	bl	8003f8e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004db6:	f000 feb7 	bl	8005b28 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004dba:	4b0d      	ldr	r3, [pc, #52]	; (8004df0 <prvAddNewTaskToReadyList+0xc0>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d00e      	beq.n	8004de0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004dc2:	4b0a      	ldr	r3, [pc, #40]	; (8004dec <prvAddNewTaskToReadyList+0xbc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d207      	bcs.n	8004de0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004dd0:	4b0b      	ldr	r3, [pc, #44]	; (8004e00 <prvAddNewTaskToReadyList+0xd0>)
 8004dd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dd6:	601a      	str	r2, [r3, #0]
 8004dd8:	f3bf 8f4f 	dsb	sy
 8004ddc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004de0:	bf00      	nop
 8004de2:	3708      	adds	r7, #8
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bd80      	pop	{r7, pc}
 8004de8:	200003b0 	.word	0x200003b0
 8004dec:	200002b0 	.word	0x200002b0
 8004df0:	200003bc 	.word	0x200003bc
 8004df4:	200003cc 	.word	0x200003cc
 8004df8:	200003b8 	.word	0x200003b8
 8004dfc:	200002b4 	.word	0x200002b4
 8004e00:	e000ed04 	.word	0xe000ed04

08004e04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b084      	sub	sp, #16
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004e0c:	2300      	movs	r3, #0
 8004e0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d016      	beq.n	8004e44 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004e16:	4b13      	ldr	r3, [pc, #76]	; (8004e64 <vTaskDelay+0x60>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d009      	beq.n	8004e32 <vTaskDelay+0x2e>
 8004e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e22:	f383 8811 	msr	BASEPRI, r3
 8004e26:	f3bf 8f6f 	isb	sy
 8004e2a:	f3bf 8f4f 	dsb	sy
 8004e2e:	60bb      	str	r3, [r7, #8]
 8004e30:	e7fe      	b.n	8004e30 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8004e32:	f000 f879 	bl	8004f28 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004e36:	2100      	movs	r1, #0
 8004e38:	6878      	ldr	r0, [r7, #4]
 8004e3a:	f000 fcb7 	bl	80057ac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004e3e:	f000 f881 	bl	8004f44 <xTaskResumeAll>
 8004e42:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d107      	bne.n	8004e5a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004e4a:	4b07      	ldr	r3, [pc, #28]	; (8004e68 <vTaskDelay+0x64>)
 8004e4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004e5a:	bf00      	nop
 8004e5c:	3710      	adds	r7, #16
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
 8004e62:	bf00      	nop
 8004e64:	200003d8 	.word	0x200003d8
 8004e68:	e000ed04 	.word	0xe000ed04

08004e6c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b08a      	sub	sp, #40	; 0x28
 8004e70:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004e76:	2300      	movs	r3, #0
 8004e78:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004e7a:	463a      	mov	r2, r7
 8004e7c:	1d39      	adds	r1, r7, #4
 8004e7e:	f107 0308 	add.w	r3, r7, #8
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fb fb4c 	bl	8000520 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004e88:	6839      	ldr	r1, [r7, #0]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	68ba      	ldr	r2, [r7, #8]
 8004e8e:	9202      	str	r2, [sp, #8]
 8004e90:	9301      	str	r3, [sp, #4]
 8004e92:	2300      	movs	r3, #0
 8004e94:	9300      	str	r3, [sp, #0]
 8004e96:	2300      	movs	r3, #0
 8004e98:	460a      	mov	r2, r1
 8004e9a:	491d      	ldr	r1, [pc, #116]	; (8004f10 <vTaskStartScheduler+0xa4>)
 8004e9c:	481d      	ldr	r0, [pc, #116]	; (8004f14 <vTaskStartScheduler+0xa8>)
 8004e9e:	f7ff fe2a 	bl	8004af6 <xTaskCreateStatic>
 8004ea2:	4602      	mov	r2, r0
 8004ea4:	4b1c      	ldr	r3, [pc, #112]	; (8004f18 <vTaskStartScheduler+0xac>)
 8004ea6:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004ea8:	4b1b      	ldr	r3, [pc, #108]	; (8004f18 <vTaskStartScheduler+0xac>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e001      	b.n	8004eba <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004eba:	697b      	ldr	r3, [r7, #20]
 8004ebc:	2b01      	cmp	r3, #1
 8004ebe:	d115      	bne.n	8004eec <vTaskStartScheduler+0x80>
 8004ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ec4:	f383 8811 	msr	BASEPRI, r3
 8004ec8:	f3bf 8f6f 	isb	sy
 8004ecc:	f3bf 8f4f 	dsb	sy
 8004ed0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004ed2:	4b12      	ldr	r3, [pc, #72]	; (8004f1c <vTaskStartScheduler+0xb0>)
 8004ed4:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004eda:	4b11      	ldr	r3, [pc, #68]	; (8004f20 <vTaskStartScheduler+0xb4>)
 8004edc:	2201      	movs	r2, #1
 8004ede:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8004ee0:	4b10      	ldr	r3, [pc, #64]	; (8004f24 <vTaskStartScheduler+0xb8>)
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004ee6:	f000 fd53 	bl	8005990 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004eea:	e00d      	b.n	8004f08 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ef2:	d109      	bne.n	8004f08 <vTaskStartScheduler+0x9c>
 8004ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef8:	f383 8811 	msr	BASEPRI, r3
 8004efc:	f3bf 8f6f 	isb	sy
 8004f00:	f3bf 8f4f 	dsb	sy
 8004f04:	60fb      	str	r3, [r7, #12]
 8004f06:	e7fe      	b.n	8004f06 <vTaskStartScheduler+0x9a>
}
 8004f08:	bf00      	nop
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	08006a40 	.word	0x08006a40
 8004f14:	080054b9 	.word	0x080054b9
 8004f18:	200003d4 	.word	0x200003d4
 8004f1c:	200003d0 	.word	0x200003d0
 8004f20:	200003bc 	.word	0x200003bc
 8004f24:	200003b4 	.word	0x200003b4

08004f28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004f28:	b480      	push	{r7}
 8004f2a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004f2c:	4b04      	ldr	r3, [pc, #16]	; (8004f40 <vTaskSuspendAll+0x18>)
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	3301      	adds	r3, #1
 8004f32:	4a03      	ldr	r2, [pc, #12]	; (8004f40 <vTaskSuspendAll+0x18>)
 8004f34:	6013      	str	r3, [r2, #0]
}
 8004f36:	bf00      	nop
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr
 8004f40:	200003d8 	.word	0x200003d8

08004f44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004f44:	b580      	push	{r7, lr}
 8004f46:	b084      	sub	sp, #16
 8004f48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004f52:	4b41      	ldr	r3, [pc, #260]	; (8005058 <xTaskResumeAll+0x114>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d109      	bne.n	8004f6e <xTaskResumeAll+0x2a>
 8004f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5e:	f383 8811 	msr	BASEPRI, r3
 8004f62:	f3bf 8f6f 	isb	sy
 8004f66:	f3bf 8f4f 	dsb	sy
 8004f6a:	603b      	str	r3, [r7, #0]
 8004f6c:	e7fe      	b.n	8004f6c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004f6e:	f000 fdad 	bl	8005acc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004f72:	4b39      	ldr	r3, [pc, #228]	; (8005058 <xTaskResumeAll+0x114>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	3b01      	subs	r3, #1
 8004f78:	4a37      	ldr	r2, [pc, #220]	; (8005058 <xTaskResumeAll+0x114>)
 8004f7a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f7c:	4b36      	ldr	r3, [pc, #216]	; (8005058 <xTaskResumeAll+0x114>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d161      	bne.n	8005048 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004f84:	4b35      	ldr	r3, [pc, #212]	; (800505c <xTaskResumeAll+0x118>)
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d05d      	beq.n	8005048 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004f8c:	e02e      	b.n	8004fec <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004f8e:	4b34      	ldr	r3, [pc, #208]	; (8005060 <xTaskResumeAll+0x11c>)
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	68db      	ldr	r3, [r3, #12]
 8004f94:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	3318      	adds	r3, #24
 8004f9a:	4618      	mov	r0, r3
 8004f9c:	f7ff f854 	bl	8004048 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	f7ff f84f 	bl	8004048 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fae:	2201      	movs	r2, #1
 8004fb0:	409a      	lsls	r2, r3
 8004fb2:	4b2c      	ldr	r3, [pc, #176]	; (8005064 <xTaskResumeAll+0x120>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4313      	orrs	r3, r2
 8004fb8:	4a2a      	ldr	r2, [pc, #168]	; (8005064 <xTaskResumeAll+0x120>)
 8004fba:	6013      	str	r3, [r2, #0]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	009b      	lsls	r3, r3, #2
 8004fc4:	4413      	add	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <xTaskResumeAll+0x124>)
 8004fca:	441a      	add	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	3304      	adds	r3, #4
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	f7fe ffdb 	bl	8003f8e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fdc:	4b23      	ldr	r3, [pc, #140]	; (800506c <xTaskResumeAll+0x128>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fe2:	429a      	cmp	r2, r3
 8004fe4:	d302      	bcc.n	8004fec <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 8004fe6:	4b22      	ldr	r3, [pc, #136]	; (8005070 <xTaskResumeAll+0x12c>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004fec:	4b1c      	ldr	r3, [pc, #112]	; (8005060 <xTaskResumeAll+0x11c>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1cc      	bne.n	8004f8e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d001      	beq.n	8004ffe <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ffa:	f000 fb0f 	bl	800561c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8004ffe:	4b1d      	ldr	r3, [pc, #116]	; (8005074 <xTaskResumeAll+0x130>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d010      	beq.n	800502c <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800500a:	f000 f837 	bl	800507c <xTaskIncrementTick>
 800500e:	4603      	mov	r3, r0
 8005010:	2b00      	cmp	r3, #0
 8005012:	d002      	beq.n	800501a <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 8005014:	4b16      	ldr	r3, [pc, #88]	; (8005070 <xTaskResumeAll+0x12c>)
 8005016:	2201      	movs	r2, #1
 8005018:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	3b01      	subs	r3, #1
 800501e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d1f1      	bne.n	800500a <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <xTaskResumeAll+0x130>)
 8005028:	2200      	movs	r2, #0
 800502a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800502c:	4b10      	ldr	r3, [pc, #64]	; (8005070 <xTaskResumeAll+0x12c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2b00      	cmp	r3, #0
 8005032:	d009      	beq.n	8005048 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005034:	2301      	movs	r3, #1
 8005036:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005038:	4b0f      	ldr	r3, [pc, #60]	; (8005078 <xTaskResumeAll+0x134>)
 800503a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005048:	f000 fd6e 	bl	8005b28 <vPortExitCritical>

	return xAlreadyYielded;
 800504c:	68bb      	ldr	r3, [r7, #8]
}
 800504e:	4618      	mov	r0, r3
 8005050:	3710      	adds	r7, #16
 8005052:	46bd      	mov	sp, r7
 8005054:	bd80      	pop	{r7, pc}
 8005056:	bf00      	nop
 8005058:	200003d8 	.word	0x200003d8
 800505c:	200003b0 	.word	0x200003b0
 8005060:	20000370 	.word	0x20000370
 8005064:	200003b8 	.word	0x200003b8
 8005068:	200002b4 	.word	0x200002b4
 800506c:	200002b0 	.word	0x200002b0
 8005070:	200003c4 	.word	0x200003c4
 8005074:	200003c0 	.word	0x200003c0
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005082:	2300      	movs	r3, #0
 8005084:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005086:	4b50      	ldr	r3, [pc, #320]	; (80051c8 <xTaskIncrementTick+0x14c>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	f040 808c 	bne.w	80051a8 <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005090:	4b4e      	ldr	r3, [pc, #312]	; (80051cc <xTaskIncrementTick+0x150>)
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	3301      	adds	r3, #1
 8005096:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005098:	4a4c      	ldr	r2, [pc, #304]	; (80051cc <xTaskIncrementTick+0x150>)
 800509a:	693b      	ldr	r3, [r7, #16]
 800509c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800509e:	693b      	ldr	r3, [r7, #16]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d11f      	bne.n	80050e4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80050a4:	4b4a      	ldr	r3, [pc, #296]	; (80051d0 <xTaskIncrementTick+0x154>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d009      	beq.n	80050c2 <xTaskIncrementTick+0x46>
 80050ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050b2:	f383 8811 	msr	BASEPRI, r3
 80050b6:	f3bf 8f6f 	isb	sy
 80050ba:	f3bf 8f4f 	dsb	sy
 80050be:	603b      	str	r3, [r7, #0]
 80050c0:	e7fe      	b.n	80050c0 <xTaskIncrementTick+0x44>
 80050c2:	4b43      	ldr	r3, [pc, #268]	; (80051d0 <xTaskIncrementTick+0x154>)
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	60fb      	str	r3, [r7, #12]
 80050c8:	4b42      	ldr	r3, [pc, #264]	; (80051d4 <xTaskIncrementTick+0x158>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4a40      	ldr	r2, [pc, #256]	; (80051d0 <xTaskIncrementTick+0x154>)
 80050ce:	6013      	str	r3, [r2, #0]
 80050d0:	4a40      	ldr	r2, [pc, #256]	; (80051d4 <xTaskIncrementTick+0x158>)
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	4b40      	ldr	r3, [pc, #256]	; (80051d8 <xTaskIncrementTick+0x15c>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	3301      	adds	r3, #1
 80050dc:	4a3e      	ldr	r2, [pc, #248]	; (80051d8 <xTaskIncrementTick+0x15c>)
 80050de:	6013      	str	r3, [r2, #0]
 80050e0:	f000 fa9c 	bl	800561c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80050e4:	4b3d      	ldr	r3, [pc, #244]	; (80051dc <xTaskIncrementTick+0x160>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	693a      	ldr	r2, [r7, #16]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	d34d      	bcc.n	800518a <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80050ee:	4b38      	ldr	r3, [pc, #224]	; (80051d0 <xTaskIncrementTick+0x154>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d101      	bne.n	80050fc <xTaskIncrementTick+0x80>
 80050f8:	2301      	movs	r3, #1
 80050fa:	e000      	b.n	80050fe <xTaskIncrementTick+0x82>
 80050fc:	2300      	movs	r3, #0
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d004      	beq.n	800510c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005102:	4b36      	ldr	r3, [pc, #216]	; (80051dc <xTaskIncrementTick+0x160>)
 8005104:	f04f 32ff 	mov.w	r2, #4294967295
 8005108:	601a      	str	r2, [r3, #0]
					break;
 800510a:	e03e      	b.n	800518a <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800510c:	4b30      	ldr	r3, [pc, #192]	; (80051d0 <xTaskIncrementTick+0x154>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	68db      	ldr	r3, [r3, #12]
 8005114:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800511c:	693a      	ldr	r2, [r7, #16]
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	429a      	cmp	r2, r3
 8005122:	d203      	bcs.n	800512c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005124:	4a2d      	ldr	r2, [pc, #180]	; (80051dc <xTaskIncrementTick+0x160>)
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6013      	str	r3, [r2, #0]
						break;
 800512a:	e02e      	b.n	800518a <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	3304      	adds	r3, #4
 8005130:	4618      	mov	r0, r3
 8005132:	f7fe ff89 	bl	8004048 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005136:	68bb      	ldr	r3, [r7, #8]
 8005138:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800513a:	2b00      	cmp	r3, #0
 800513c:	d004      	beq.n	8005148 <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	3318      	adds	r3, #24
 8005142:	4618      	mov	r0, r3
 8005144:	f7fe ff80 	bl	8004048 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514c:	2201      	movs	r2, #1
 800514e:	409a      	lsls	r2, r3
 8005150:	4b23      	ldr	r3, [pc, #140]	; (80051e0 <xTaskIncrementTick+0x164>)
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4313      	orrs	r3, r2
 8005156:	4a22      	ldr	r2, [pc, #136]	; (80051e0 <xTaskIncrementTick+0x164>)
 8005158:	6013      	str	r3, [r2, #0]
 800515a:	68bb      	ldr	r3, [r7, #8]
 800515c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800515e:	4613      	mov	r3, r2
 8005160:	009b      	lsls	r3, r3, #2
 8005162:	4413      	add	r3, r2
 8005164:	009b      	lsls	r3, r3, #2
 8005166:	4a1f      	ldr	r2, [pc, #124]	; (80051e4 <xTaskIncrementTick+0x168>)
 8005168:	441a      	add	r2, r3
 800516a:	68bb      	ldr	r3, [r7, #8]
 800516c:	3304      	adds	r3, #4
 800516e:	4619      	mov	r1, r3
 8005170:	4610      	mov	r0, r2
 8005172:	f7fe ff0c 	bl	8003f8e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800517a:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <xTaskIncrementTick+0x16c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005180:	429a      	cmp	r2, r3
 8005182:	d3b4      	bcc.n	80050ee <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005184:	2301      	movs	r3, #1
 8005186:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005188:	e7b1      	b.n	80050ee <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800518a:	4b17      	ldr	r3, [pc, #92]	; (80051e8 <xTaskIncrementTick+0x16c>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005190:	4914      	ldr	r1, [pc, #80]	; (80051e4 <xTaskIncrementTick+0x168>)
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	009b      	lsls	r3, r3, #2
 800519a:	440b      	add	r3, r1
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2b01      	cmp	r3, #1
 80051a0:	d907      	bls.n	80051b2 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 80051a2:	2301      	movs	r3, #1
 80051a4:	617b      	str	r3, [r7, #20]
 80051a6:	e004      	b.n	80051b2 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80051a8:	4b10      	ldr	r3, [pc, #64]	; (80051ec <xTaskIncrementTick+0x170>)
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	3301      	adds	r3, #1
 80051ae:	4a0f      	ldr	r2, [pc, #60]	; (80051ec <xTaskIncrementTick+0x170>)
 80051b0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80051b2:	4b0f      	ldr	r3, [pc, #60]	; (80051f0 <xTaskIncrementTick+0x174>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d001      	beq.n	80051be <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 80051ba:	2301      	movs	r3, #1
 80051bc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80051be:	697b      	ldr	r3, [r7, #20]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3718      	adds	r7, #24
 80051c4:	46bd      	mov	sp, r7
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200003d8 	.word	0x200003d8
 80051cc:	200003b4 	.word	0x200003b4
 80051d0:	20000368 	.word	0x20000368
 80051d4:	2000036c 	.word	0x2000036c
 80051d8:	200003c8 	.word	0x200003c8
 80051dc:	200003d0 	.word	0x200003d0
 80051e0:	200003b8 	.word	0x200003b8
 80051e4:	200002b4 	.word	0x200002b4
 80051e8:	200002b0 	.word	0x200002b0
 80051ec:	200003c0 	.word	0x200003c0
 80051f0:	200003c4 	.word	0x200003c4

080051f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80051f4:	b480      	push	{r7}
 80051f6:	b087      	sub	sp, #28
 80051f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80051fa:	4b26      	ldr	r3, [pc, #152]	; (8005294 <vTaskSwitchContext+0xa0>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005202:	4b25      	ldr	r3, [pc, #148]	; (8005298 <vTaskSwitchContext+0xa4>)
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005208:	e03e      	b.n	8005288 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 800520a:	4b23      	ldr	r3, [pc, #140]	; (8005298 <vTaskSwitchContext+0xa4>)
 800520c:	2200      	movs	r2, #0
 800520e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005210:	4b22      	ldr	r3, [pc, #136]	; (800529c <vTaskSwitchContext+0xa8>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	fab3 f383 	clz	r3, r3
 800521c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800521e:	7afb      	ldrb	r3, [r7, #11]
 8005220:	f1c3 031f 	rsb	r3, r3, #31
 8005224:	617b      	str	r3, [r7, #20]
 8005226:	491e      	ldr	r1, [pc, #120]	; (80052a0 <vTaskSwitchContext+0xac>)
 8005228:	697a      	ldr	r2, [r7, #20]
 800522a:	4613      	mov	r3, r2
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	4413      	add	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	440b      	add	r3, r1
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d109      	bne.n	800524e <vTaskSwitchContext+0x5a>
	__asm volatile
 800523a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800523e:	f383 8811 	msr	BASEPRI, r3
 8005242:	f3bf 8f6f 	isb	sy
 8005246:	f3bf 8f4f 	dsb	sy
 800524a:	607b      	str	r3, [r7, #4]
 800524c:	e7fe      	b.n	800524c <vTaskSwitchContext+0x58>
 800524e:	697a      	ldr	r2, [r7, #20]
 8005250:	4613      	mov	r3, r2
 8005252:	009b      	lsls	r3, r3, #2
 8005254:	4413      	add	r3, r2
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4a11      	ldr	r2, [pc, #68]	; (80052a0 <vTaskSwitchContext+0xac>)
 800525a:	4413      	add	r3, r2
 800525c:	613b      	str	r3, [r7, #16]
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	685a      	ldr	r2, [r3, #4]
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	605a      	str	r2, [r3, #4]
 8005268:	693b      	ldr	r3, [r7, #16]
 800526a:	685a      	ldr	r2, [r3, #4]
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	3308      	adds	r3, #8
 8005270:	429a      	cmp	r2, r3
 8005272:	d104      	bne.n	800527e <vTaskSwitchContext+0x8a>
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	685a      	ldr	r2, [r3, #4]
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	605a      	str	r2, [r3, #4]
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	685b      	ldr	r3, [r3, #4]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4a07      	ldr	r2, [pc, #28]	; (80052a4 <vTaskSwitchContext+0xb0>)
 8005286:	6013      	str	r3, [r2, #0]
}
 8005288:	bf00      	nop
 800528a:	371c      	adds	r7, #28
 800528c:	46bd      	mov	sp, r7
 800528e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005292:	4770      	bx	lr
 8005294:	200003d8 	.word	0x200003d8
 8005298:	200003c4 	.word	0x200003c4
 800529c:	200003b8 	.word	0x200003b8
 80052a0:	200002b4 	.word	0x200002b4
 80052a4:	200002b0 	.word	0x200002b0

080052a8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d109      	bne.n	80052cc <vTaskPlaceOnEventList+0x24>
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
 80052ca:	e7fe      	b.n	80052ca <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80052cc:	4b07      	ldr	r3, [pc, #28]	; (80052ec <vTaskPlaceOnEventList+0x44>)
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3318      	adds	r3, #24
 80052d2:	4619      	mov	r1, r3
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f7fe fe7e 	bl	8003fd6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80052da:	2101      	movs	r1, #1
 80052dc:	6838      	ldr	r0, [r7, #0]
 80052de:	f000 fa65 	bl	80057ac <prvAddCurrentTaskToDelayedList>
}
 80052e2:	bf00      	nop
 80052e4:	3710      	adds	r7, #16
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	200002b0 	.word	0x200002b0

080052f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b086      	sub	sp, #24
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68db      	ldr	r3, [r3, #12]
 80052fc:	68db      	ldr	r3, [r3, #12]
 80052fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d109      	bne.n	800531a <xTaskRemoveFromEventList+0x2a>
 8005306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800530a:	f383 8811 	msr	BASEPRI, r3
 800530e:	f3bf 8f6f 	isb	sy
 8005312:	f3bf 8f4f 	dsb	sy
 8005316:	60fb      	str	r3, [r7, #12]
 8005318:	e7fe      	b.n	8005318 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	3318      	adds	r3, #24
 800531e:	4618      	mov	r0, r3
 8005320:	f7fe fe92 	bl	8004048 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005324:	4b1d      	ldr	r3, [pc, #116]	; (800539c <xTaskRemoveFromEventList+0xac>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d11c      	bne.n	8005366 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	3304      	adds	r3, #4
 8005330:	4618      	mov	r0, r3
 8005332:	f7fe fe89 	bl	8004048 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800533a:	2201      	movs	r2, #1
 800533c:	409a      	lsls	r2, r3
 800533e:	4b18      	ldr	r3, [pc, #96]	; (80053a0 <xTaskRemoveFromEventList+0xb0>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4313      	orrs	r3, r2
 8005344:	4a16      	ldr	r2, [pc, #88]	; (80053a0 <xTaskRemoveFromEventList+0xb0>)
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800534c:	4613      	mov	r3, r2
 800534e:	009b      	lsls	r3, r3, #2
 8005350:	4413      	add	r3, r2
 8005352:	009b      	lsls	r3, r3, #2
 8005354:	4a13      	ldr	r2, [pc, #76]	; (80053a4 <xTaskRemoveFromEventList+0xb4>)
 8005356:	441a      	add	r2, r3
 8005358:	693b      	ldr	r3, [r7, #16]
 800535a:	3304      	adds	r3, #4
 800535c:	4619      	mov	r1, r3
 800535e:	4610      	mov	r0, r2
 8005360:	f7fe fe15 	bl	8003f8e <vListInsertEnd>
 8005364:	e005      	b.n	8005372 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	3318      	adds	r3, #24
 800536a:	4619      	mov	r1, r3
 800536c:	480e      	ldr	r0, [pc, #56]	; (80053a8 <xTaskRemoveFromEventList+0xb8>)
 800536e:	f7fe fe0e 	bl	8003f8e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005372:	693b      	ldr	r3, [r7, #16]
 8005374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005376:	4b0d      	ldr	r3, [pc, #52]	; (80053ac <xTaskRemoveFromEventList+0xbc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537c:	429a      	cmp	r2, r3
 800537e:	d905      	bls.n	800538c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005380:	2301      	movs	r3, #1
 8005382:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005384:	4b0a      	ldr	r3, [pc, #40]	; (80053b0 <xTaskRemoveFromEventList+0xc0>)
 8005386:	2201      	movs	r2, #1
 8005388:	601a      	str	r2, [r3, #0]
 800538a:	e001      	b.n	8005390 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800538c:	2300      	movs	r3, #0
 800538e:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005390:	697b      	ldr	r3, [r7, #20]
}
 8005392:	4618      	mov	r0, r3
 8005394:	3718      	adds	r7, #24
 8005396:	46bd      	mov	sp, r7
 8005398:	bd80      	pop	{r7, pc}
 800539a:	bf00      	nop
 800539c:	200003d8 	.word	0x200003d8
 80053a0:	200003b8 	.word	0x200003b8
 80053a4:	200002b4 	.word	0x200002b4
 80053a8:	20000370 	.word	0x20000370
 80053ac:	200002b0 	.word	0x200002b0
 80053b0:	200003c4 	.word	0x200003c4

080053b4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80053bc:	4b06      	ldr	r3, [pc, #24]	; (80053d8 <vTaskInternalSetTimeOutState+0x24>)
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80053c4:	4b05      	ldr	r3, [pc, #20]	; (80053dc <vTaskInternalSetTimeOutState+0x28>)
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	605a      	str	r2, [r3, #4]
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	200003c8 	.word	0x200003c8
 80053dc:	200003b4 	.word	0x200003b4

080053e0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b088      	sub	sp, #32
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d109      	bne.n	8005404 <xTaskCheckForTimeOut+0x24>
 80053f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f4:	f383 8811 	msr	BASEPRI, r3
 80053f8:	f3bf 8f6f 	isb	sy
 80053fc:	f3bf 8f4f 	dsb	sy
 8005400:	613b      	str	r3, [r7, #16]
 8005402:	e7fe      	b.n	8005402 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d109      	bne.n	800541e <xTaskCheckForTimeOut+0x3e>
 800540a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800540e:	f383 8811 	msr	BASEPRI, r3
 8005412:	f3bf 8f6f 	isb	sy
 8005416:	f3bf 8f4f 	dsb	sy
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	e7fe      	b.n	800541c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800541e:	f000 fb55 	bl	8005acc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005422:	4b1d      	ldr	r3, [pc, #116]	; (8005498 <xTaskCheckForTimeOut+0xb8>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	69ba      	ldr	r2, [r7, #24]
 800542e:	1ad3      	subs	r3, r2, r3
 8005430:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005432:	683b      	ldr	r3, [r7, #0]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800543a:	d102      	bne.n	8005442 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800543c:	2300      	movs	r3, #0
 800543e:	61fb      	str	r3, [r7, #28]
 8005440:	e023      	b.n	800548a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681a      	ldr	r2, [r3, #0]
 8005446:	4b15      	ldr	r3, [pc, #84]	; (800549c <xTaskCheckForTimeOut+0xbc>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	429a      	cmp	r2, r3
 800544c:	d007      	beq.n	800545e <xTaskCheckForTimeOut+0x7e>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	69ba      	ldr	r2, [r7, #24]
 8005454:	429a      	cmp	r2, r3
 8005456:	d302      	bcc.n	800545e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005458:	2301      	movs	r3, #1
 800545a:	61fb      	str	r3, [r7, #28]
 800545c:	e015      	b.n	800548a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	697a      	ldr	r2, [r7, #20]
 8005464:	429a      	cmp	r2, r3
 8005466:	d20b      	bcs.n	8005480 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005468:	683b      	ldr	r3, [r7, #0]
 800546a:	681a      	ldr	r2, [r3, #0]
 800546c:	697b      	ldr	r3, [r7, #20]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	683b      	ldr	r3, [r7, #0]
 8005472:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005474:	6878      	ldr	r0, [r7, #4]
 8005476:	f7ff ff9d 	bl	80053b4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800547a:	2300      	movs	r3, #0
 800547c:	61fb      	str	r3, [r7, #28]
 800547e:	e004      	b.n	800548a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800548a:	f000 fb4d 	bl	8005b28 <vPortExitCritical>

	return xReturn;
 800548e:	69fb      	ldr	r3, [r7, #28]
}
 8005490:	4618      	mov	r0, r3
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	200003b4 	.word	0x200003b4
 800549c:	200003c8 	.word	0x200003c8

080054a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80054a0:	b480      	push	{r7}
 80054a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80054a4:	4b03      	ldr	r3, [pc, #12]	; (80054b4 <vTaskMissedYield+0x14>)
 80054a6:	2201      	movs	r2, #1
 80054a8:	601a      	str	r2, [r3, #0]
}
 80054aa:	bf00      	nop
 80054ac:	46bd      	mov	sp, r7
 80054ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b2:	4770      	bx	lr
 80054b4:	200003c4 	.word	0x200003c4

080054b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b082      	sub	sp, #8
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80054c0:	f000 f852 	bl	8005568 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80054c4:	4b06      	ldr	r3, [pc, #24]	; (80054e0 <prvIdleTask+0x28>)
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2b01      	cmp	r3, #1
 80054ca:	d9f9      	bls.n	80054c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80054cc:	4b05      	ldr	r3, [pc, #20]	; (80054e4 <prvIdleTask+0x2c>)
 80054ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f3bf 8f4f 	dsb	sy
 80054d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80054dc:	e7f0      	b.n	80054c0 <prvIdleTask+0x8>
 80054de:	bf00      	nop
 80054e0:	200002b4 	.word	0x200002b4
 80054e4:	e000ed04 	.word	0xe000ed04

080054e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b082      	sub	sp, #8
 80054ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80054ee:	2300      	movs	r3, #0
 80054f0:	607b      	str	r3, [r7, #4]
 80054f2:	e00c      	b.n	800550e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80054f4:	687a      	ldr	r2, [r7, #4]
 80054f6:	4613      	mov	r3, r2
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	4413      	add	r3, r2
 80054fc:	009b      	lsls	r3, r3, #2
 80054fe:	4a12      	ldr	r2, [pc, #72]	; (8005548 <prvInitialiseTaskLists+0x60>)
 8005500:	4413      	add	r3, r2
 8005502:	4618      	mov	r0, r3
 8005504:	f7fe fd16 	bl	8003f34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	3301      	adds	r3, #1
 800550c:	607b      	str	r3, [r7, #4]
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2b06      	cmp	r3, #6
 8005512:	d9ef      	bls.n	80054f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005514:	480d      	ldr	r0, [pc, #52]	; (800554c <prvInitialiseTaskLists+0x64>)
 8005516:	f7fe fd0d 	bl	8003f34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800551a:	480d      	ldr	r0, [pc, #52]	; (8005550 <prvInitialiseTaskLists+0x68>)
 800551c:	f7fe fd0a 	bl	8003f34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005520:	480c      	ldr	r0, [pc, #48]	; (8005554 <prvInitialiseTaskLists+0x6c>)
 8005522:	f7fe fd07 	bl	8003f34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005526:	480c      	ldr	r0, [pc, #48]	; (8005558 <prvInitialiseTaskLists+0x70>)
 8005528:	f7fe fd04 	bl	8003f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800552c:	480b      	ldr	r0, [pc, #44]	; (800555c <prvInitialiseTaskLists+0x74>)
 800552e:	f7fe fd01 	bl	8003f34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005532:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <prvInitialiseTaskLists+0x78>)
 8005534:	4a05      	ldr	r2, [pc, #20]	; (800554c <prvInitialiseTaskLists+0x64>)
 8005536:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005538:	4b0a      	ldr	r3, [pc, #40]	; (8005564 <prvInitialiseTaskLists+0x7c>)
 800553a:	4a05      	ldr	r2, [pc, #20]	; (8005550 <prvInitialiseTaskLists+0x68>)
 800553c:	601a      	str	r2, [r3, #0]
}
 800553e:	bf00      	nop
 8005540:	3708      	adds	r7, #8
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200002b4 	.word	0x200002b4
 800554c:	20000340 	.word	0x20000340
 8005550:	20000354 	.word	0x20000354
 8005554:	20000370 	.word	0x20000370
 8005558:	20000384 	.word	0x20000384
 800555c:	2000039c 	.word	0x2000039c
 8005560:	20000368 	.word	0x20000368
 8005564:	2000036c 	.word	0x2000036c

08005568 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800556e:	e019      	b.n	80055a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005570:	f000 faac 	bl	8005acc <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005574:	4b0f      	ldr	r3, [pc, #60]	; (80055b4 <prvCheckTasksWaitingTermination+0x4c>)
 8005576:	68db      	ldr	r3, [r3, #12]
 8005578:	68db      	ldr	r3, [r3, #12]
 800557a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	3304      	adds	r3, #4
 8005580:	4618      	mov	r0, r3
 8005582:	f7fe fd61 	bl	8004048 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005586:	4b0c      	ldr	r3, [pc, #48]	; (80055b8 <prvCheckTasksWaitingTermination+0x50>)
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	3b01      	subs	r3, #1
 800558c:	4a0a      	ldr	r2, [pc, #40]	; (80055b8 <prvCheckTasksWaitingTermination+0x50>)
 800558e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005590:	4b0a      	ldr	r3, [pc, #40]	; (80055bc <prvCheckTasksWaitingTermination+0x54>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	3b01      	subs	r3, #1
 8005596:	4a09      	ldr	r2, [pc, #36]	; (80055bc <prvCheckTasksWaitingTermination+0x54>)
 8005598:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800559a:	f000 fac5 	bl	8005b28 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f80e 	bl	80055c0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80055a4:	4b05      	ldr	r3, [pc, #20]	; (80055bc <prvCheckTasksWaitingTermination+0x54>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d1e1      	bne.n	8005570 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80055ac:	bf00      	nop
 80055ae:	3708      	adds	r7, #8
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000384 	.word	0x20000384
 80055b8:	200003b0 	.word	0x200003b0
 80055bc:	20000398 	.word	0x20000398

080055c0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80055c0:	b580      	push	{r7, lr}
 80055c2:	b084      	sub	sp, #16
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d108      	bne.n	80055e4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fc54 	bl	8005e84 <vPortFree>
				vPortFree( pxTCB );
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	f000 fc51 	bl	8005e84 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80055e2:	e017      	b.n	8005614 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d103      	bne.n	80055f6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80055ee:	6878      	ldr	r0, [r7, #4]
 80055f0:	f000 fc48 	bl	8005e84 <vPortFree>
	}
 80055f4:	e00e      	b.n	8005614 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d009      	beq.n	8005614 <prvDeleteTCB+0x54>
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	60fb      	str	r3, [r7, #12]
 8005612:	e7fe      	b.n	8005612 <prvDeleteTCB+0x52>
	}
 8005614:	bf00      	nop
 8005616:	3710      	adds	r7, #16
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800561c:	b480      	push	{r7}
 800561e:	b083      	sub	sp, #12
 8005620:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005622:	4b0f      	ldr	r3, [pc, #60]	; (8005660 <prvResetNextTaskUnblockTime+0x44>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <prvResetNextTaskUnblockTime+0x14>
 800562c:	2301      	movs	r3, #1
 800562e:	e000      	b.n	8005632 <prvResetNextTaskUnblockTime+0x16>
 8005630:	2300      	movs	r3, #0
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005636:	4b0b      	ldr	r3, [pc, #44]	; (8005664 <prvResetNextTaskUnblockTime+0x48>)
 8005638:	f04f 32ff 	mov.w	r2, #4294967295
 800563c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800563e:	e008      	b.n	8005652 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005640:	4b07      	ldr	r3, [pc, #28]	; (8005660 <prvResetNextTaskUnblockTime+0x44>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	68db      	ldr	r3, [r3, #12]
 8005646:	68db      	ldr	r3, [r3, #12]
 8005648:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	685b      	ldr	r3, [r3, #4]
 800564e:	4a05      	ldr	r2, [pc, #20]	; (8005664 <prvResetNextTaskUnblockTime+0x48>)
 8005650:	6013      	str	r3, [r2, #0]
}
 8005652:	bf00      	nop
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr
 800565e:	bf00      	nop
 8005660:	20000368 	.word	0x20000368
 8005664:	200003d0 	.word	0x200003d0

08005668 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005668:	b480      	push	{r7}
 800566a:	b083      	sub	sp, #12
 800566c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800566e:	4b0b      	ldr	r3, [pc, #44]	; (800569c <xTaskGetSchedulerState+0x34>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d102      	bne.n	800567c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005676:	2301      	movs	r3, #1
 8005678:	607b      	str	r3, [r7, #4]
 800567a:	e008      	b.n	800568e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800567c:	4b08      	ldr	r3, [pc, #32]	; (80056a0 <xTaskGetSchedulerState+0x38>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d102      	bne.n	800568a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005684:	2302      	movs	r3, #2
 8005686:	607b      	str	r3, [r7, #4]
 8005688:	e001      	b.n	800568e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800568a:	2300      	movs	r3, #0
 800568c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800568e:	687b      	ldr	r3, [r7, #4]
	}
 8005690:	4618      	mov	r0, r3
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	200003bc 	.word	0x200003bc
 80056a0:	200003d8 	.word	0x200003d8

080056a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80056b0:	2300      	movs	r3, #0
 80056b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d06c      	beq.n	8005794 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80056ba:	4b39      	ldr	r3, [pc, #228]	; (80057a0 <xTaskPriorityDisinherit+0xfc>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	693a      	ldr	r2, [r7, #16]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d009      	beq.n	80056d8 <xTaskPriorityDisinherit+0x34>
 80056c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c8:	f383 8811 	msr	BASEPRI, r3
 80056cc:	f3bf 8f6f 	isb	sy
 80056d0:	f3bf 8f4f 	dsb	sy
 80056d4:	60fb      	str	r3, [r7, #12]
 80056d6:	e7fe      	b.n	80056d6 <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d109      	bne.n	80056f4 <xTaskPriorityDisinherit+0x50>
 80056e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056e4:	f383 8811 	msr	BASEPRI, r3
 80056e8:	f3bf 8f6f 	isb	sy
 80056ec:	f3bf 8f4f 	dsb	sy
 80056f0:	60bb      	str	r3, [r7, #8]
 80056f2:	e7fe      	b.n	80056f2 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056f8:	1e5a      	subs	r2, r3, #1
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80056fe:	693b      	ldr	r3, [r7, #16]
 8005700:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005706:	429a      	cmp	r2, r3
 8005708:	d044      	beq.n	8005794 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800570e:	2b00      	cmp	r3, #0
 8005710:	d140      	bne.n	8005794 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	3304      	adds	r3, #4
 8005716:	4618      	mov	r0, r3
 8005718:	f7fe fc96 	bl	8004048 <uxListRemove>
 800571c:	4603      	mov	r3, r0
 800571e:	2b00      	cmp	r3, #0
 8005720:	d115      	bne.n	800574e <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005722:	693b      	ldr	r3, [r7, #16]
 8005724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005726:	491f      	ldr	r1, [pc, #124]	; (80057a4 <xTaskPriorityDisinherit+0x100>)
 8005728:	4613      	mov	r3, r2
 800572a:	009b      	lsls	r3, r3, #2
 800572c:	4413      	add	r3, r2
 800572e:	009b      	lsls	r3, r3, #2
 8005730:	440b      	add	r3, r1
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10a      	bne.n	800574e <xTaskPriorityDisinherit+0xaa>
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800573c:	2201      	movs	r2, #1
 800573e:	fa02 f303 	lsl.w	r3, r2, r3
 8005742:	43da      	mvns	r2, r3
 8005744:	4b18      	ldr	r3, [pc, #96]	; (80057a8 <xTaskPriorityDisinherit+0x104>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4013      	ands	r3, r2
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <xTaskPriorityDisinherit+0x104>)
 800574c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800575a:	f1c3 0207 	rsb	r2, r3, #7
 800575e:	693b      	ldr	r3, [r7, #16]
 8005760:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005766:	2201      	movs	r2, #1
 8005768:	409a      	lsls	r2, r3
 800576a:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <xTaskPriorityDisinherit+0x104>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4313      	orrs	r3, r2
 8005770:	4a0d      	ldr	r2, [pc, #52]	; (80057a8 <xTaskPriorityDisinherit+0x104>)
 8005772:	6013      	str	r3, [r2, #0]
 8005774:	693b      	ldr	r3, [r7, #16]
 8005776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005778:	4613      	mov	r3, r2
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	4413      	add	r3, r2
 800577e:	009b      	lsls	r3, r3, #2
 8005780:	4a08      	ldr	r2, [pc, #32]	; (80057a4 <xTaskPriorityDisinherit+0x100>)
 8005782:	441a      	add	r2, r3
 8005784:	693b      	ldr	r3, [r7, #16]
 8005786:	3304      	adds	r3, #4
 8005788:	4619      	mov	r1, r3
 800578a:	4610      	mov	r0, r2
 800578c:	f7fe fbff 	bl	8003f8e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005790:	2301      	movs	r3, #1
 8005792:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005794:	697b      	ldr	r3, [r7, #20]
	}
 8005796:	4618      	mov	r0, r3
 8005798:	3718      	adds	r7, #24
 800579a:	46bd      	mov	sp, r7
 800579c:	bd80      	pop	{r7, pc}
 800579e:	bf00      	nop
 80057a0:	200002b0 	.word	0x200002b0
 80057a4:	200002b4 	.word	0x200002b4
 80057a8:	200003b8 	.word	0x200003b8

080057ac <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80057b6:	4b29      	ldr	r3, [pc, #164]	; (800585c <prvAddCurrentTaskToDelayedList+0xb0>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80057bc:	4b28      	ldr	r3, [pc, #160]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4618      	mov	r0, r3
 80057c4:	f7fe fc40 	bl	8004048 <uxListRemove>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10b      	bne.n	80057e6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 80057ce:	4b24      	ldr	r3, [pc, #144]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057d4:	2201      	movs	r2, #1
 80057d6:	fa02 f303 	lsl.w	r3, r2, r3
 80057da:	43da      	mvns	r2, r3
 80057dc:	4b21      	ldr	r3, [pc, #132]	; (8005864 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	4013      	ands	r3, r2
 80057e2:	4a20      	ldr	r2, [pc, #128]	; (8005864 <prvAddCurrentTaskToDelayedList+0xb8>)
 80057e4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d10a      	bne.n	8005804 <prvAddCurrentTaskToDelayedList+0x58>
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d007      	beq.n	8005804 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80057f4:	4b1a      	ldr	r3, [pc, #104]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4619      	mov	r1, r3
 80057fc:	481a      	ldr	r0, [pc, #104]	; (8005868 <prvAddCurrentTaskToDelayedList+0xbc>)
 80057fe:	f7fe fbc6 	bl	8003f8e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005802:	e026      	b.n	8005852 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005804:	68fa      	ldr	r2, [r7, #12]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4413      	add	r3, r2
 800580a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800580c:	4b14      	ldr	r3, [pc, #80]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	68ba      	ldr	r2, [r7, #8]
 8005812:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005814:	68ba      	ldr	r2, [r7, #8]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	429a      	cmp	r2, r3
 800581a:	d209      	bcs.n	8005830 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800581c:	4b13      	ldr	r3, [pc, #76]	; (800586c <prvAddCurrentTaskToDelayedList+0xc0>)
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	4b0f      	ldr	r3, [pc, #60]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3304      	adds	r3, #4
 8005826:	4619      	mov	r1, r3
 8005828:	4610      	mov	r0, r2
 800582a:	f7fe fbd4 	bl	8003fd6 <vListInsert>
}
 800582e:	e010      	b.n	8005852 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005830:	4b0f      	ldr	r3, [pc, #60]	; (8005870 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005832:	681a      	ldr	r2, [r3, #0]
 8005834:	4b0a      	ldr	r3, [pc, #40]	; (8005860 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	3304      	adds	r3, #4
 800583a:	4619      	mov	r1, r3
 800583c:	4610      	mov	r0, r2
 800583e:	f7fe fbca 	bl	8003fd6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005842:	4b0c      	ldr	r3, [pc, #48]	; (8005874 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	68ba      	ldr	r2, [r7, #8]
 8005848:	429a      	cmp	r2, r3
 800584a:	d202      	bcs.n	8005852 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800584c:	4a09      	ldr	r2, [pc, #36]	; (8005874 <prvAddCurrentTaskToDelayedList+0xc8>)
 800584e:	68bb      	ldr	r3, [r7, #8]
 8005850:	6013      	str	r3, [r2, #0]
}
 8005852:	bf00      	nop
 8005854:	3710      	adds	r7, #16
 8005856:	46bd      	mov	sp, r7
 8005858:	bd80      	pop	{r7, pc}
 800585a:	bf00      	nop
 800585c:	200003b4 	.word	0x200003b4
 8005860:	200002b0 	.word	0x200002b0
 8005864:	200003b8 	.word	0x200003b8
 8005868:	2000039c 	.word	0x2000039c
 800586c:	2000036c 	.word	0x2000036c
 8005870:	20000368 	.word	0x20000368
 8005874:	200003d0 	.word	0x200003d0

08005878 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005878:	b480      	push	{r7}
 800587a:	b085      	sub	sp, #20
 800587c:	af00      	add	r7, sp, #0
 800587e:	60f8      	str	r0, [r7, #12]
 8005880:	60b9      	str	r1, [r7, #8]
 8005882:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	3b04      	subs	r3, #4
 8005888:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005890:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	3b04      	subs	r3, #4
 8005896:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005898:	68bb      	ldr	r3, [r7, #8]
 800589a:	f023 0201 	bic.w	r2, r3, #1
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	3b04      	subs	r3, #4
 80058a6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80058a8:	4a0c      	ldr	r2, [pc, #48]	; (80058dc <pxPortInitialiseStack+0x64>)
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	3b14      	subs	r3, #20
 80058b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	3b04      	subs	r3, #4
 80058be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f06f 0202 	mvn.w	r2, #2
 80058c6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	3b20      	subs	r3, #32
 80058cc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80058ce:	68fb      	ldr	r3, [r7, #12]
}
 80058d0:	4618      	mov	r0, r3
 80058d2:	3714      	adds	r7, #20
 80058d4:	46bd      	mov	sp, r7
 80058d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058da:	4770      	bx	lr
 80058dc:	080058e1 	.word	0x080058e1

080058e0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058e0:	b480      	push	{r7}
 80058e2:	b085      	sub	sp, #20
 80058e4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058ea:	4b11      	ldr	r3, [pc, #68]	; (8005930 <prvTaskExitError+0x50>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80058f2:	d009      	beq.n	8005908 <prvTaskExitError+0x28>
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	60fb      	str	r3, [r7, #12]
 8005906:	e7fe      	b.n	8005906 <prvTaskExitError+0x26>
 8005908:	f04f 0350 	mov.w	r3, #80	; 0x50
 800590c:	f383 8811 	msr	BASEPRI, r3
 8005910:	f3bf 8f6f 	isb	sy
 8005914:	f3bf 8f4f 	dsb	sy
 8005918:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800591a:	bf00      	nop
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d0fc      	beq.n	800591c <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005922:	bf00      	nop
 8005924:	3714      	adds	r7, #20
 8005926:	46bd      	mov	sp, r7
 8005928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592c:	4770      	bx	lr
 800592e:	bf00      	nop
 8005930:	2000003c 	.word	0x2000003c
	...

08005940 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005940:	4b07      	ldr	r3, [pc, #28]	; (8005960 <pxCurrentTCBConst2>)
 8005942:	6819      	ldr	r1, [r3, #0]
 8005944:	6808      	ldr	r0, [r1, #0]
 8005946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800594a:	f380 8809 	msr	PSP, r0
 800594e:	f3bf 8f6f 	isb	sy
 8005952:	f04f 0000 	mov.w	r0, #0
 8005956:	f380 8811 	msr	BASEPRI, r0
 800595a:	4770      	bx	lr
 800595c:	f3af 8000 	nop.w

08005960 <pxCurrentTCBConst2>:
 8005960:	200002b0 	.word	0x200002b0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005964:	bf00      	nop
 8005966:	bf00      	nop

08005968 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005968:	4808      	ldr	r0, [pc, #32]	; (800598c <prvPortStartFirstTask+0x24>)
 800596a:	6800      	ldr	r0, [r0, #0]
 800596c:	6800      	ldr	r0, [r0, #0]
 800596e:	f380 8808 	msr	MSP, r0
 8005972:	f04f 0000 	mov.w	r0, #0
 8005976:	f380 8814 	msr	CONTROL, r0
 800597a:	b662      	cpsie	i
 800597c:	b661      	cpsie	f
 800597e:	f3bf 8f4f 	dsb	sy
 8005982:	f3bf 8f6f 	isb	sy
 8005986:	df00      	svc	0
 8005988:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800598a:	bf00      	nop
 800598c:	e000ed08 	.word	0xe000ed08

08005990 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b086      	sub	sp, #24
 8005994:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005996:	4b44      	ldr	r3, [pc, #272]	; (8005aa8 <xPortStartScheduler+0x118>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	4a44      	ldr	r2, [pc, #272]	; (8005aac <xPortStartScheduler+0x11c>)
 800599c:	4293      	cmp	r3, r2
 800599e:	d109      	bne.n	80059b4 <xPortStartScheduler+0x24>
 80059a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a4:	f383 8811 	msr	BASEPRI, r3
 80059a8:	f3bf 8f6f 	isb	sy
 80059ac:	f3bf 8f4f 	dsb	sy
 80059b0:	613b      	str	r3, [r7, #16]
 80059b2:	e7fe      	b.n	80059b2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80059b4:	4b3c      	ldr	r3, [pc, #240]	; (8005aa8 <xPortStartScheduler+0x118>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a3d      	ldr	r2, [pc, #244]	; (8005ab0 <xPortStartScheduler+0x120>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d109      	bne.n	80059d2 <xPortStartScheduler+0x42>
 80059be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c2:	f383 8811 	msr	BASEPRI, r3
 80059c6:	f3bf 8f6f 	isb	sy
 80059ca:	f3bf 8f4f 	dsb	sy
 80059ce:	60fb      	str	r3, [r7, #12]
 80059d0:	e7fe      	b.n	80059d0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059d2:	4b38      	ldr	r3, [pc, #224]	; (8005ab4 <xPortStartScheduler+0x124>)
 80059d4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	781b      	ldrb	r3, [r3, #0]
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059de:	697b      	ldr	r3, [r7, #20]
 80059e0:	22ff      	movs	r2, #255	; 0xff
 80059e2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059e4:	697b      	ldr	r3, [r7, #20]
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b2db      	uxtb	r3, r3
 80059ea:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059ec:	78fb      	ldrb	r3, [r7, #3]
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059f4:	b2da      	uxtb	r2, r3
 80059f6:	4b30      	ldr	r3, [pc, #192]	; (8005ab8 <xPortStartScheduler+0x128>)
 80059f8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059fa:	4b30      	ldr	r3, [pc, #192]	; (8005abc <xPortStartScheduler+0x12c>)
 80059fc:	2207      	movs	r2, #7
 80059fe:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a00:	e009      	b.n	8005a16 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005a02:	4b2e      	ldr	r3, [pc, #184]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	3b01      	subs	r3, #1
 8005a08:	4a2c      	ldr	r2, [pc, #176]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a0a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005a0c:	78fb      	ldrb	r3, [r7, #3]
 8005a0e:	b2db      	uxtb	r3, r3
 8005a10:	005b      	lsls	r3, r3, #1
 8005a12:	b2db      	uxtb	r3, r3
 8005a14:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005a16:	78fb      	ldrb	r3, [r7, #3]
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a1e:	2b80      	cmp	r3, #128	; 0x80
 8005a20:	d0ef      	beq.n	8005a02 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005a22:	4b26      	ldr	r3, [pc, #152]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f1c3 0307 	rsb	r3, r3, #7
 8005a2a:	2b04      	cmp	r3, #4
 8005a2c:	d009      	beq.n	8005a42 <xPortStartScheduler+0xb2>
 8005a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a32:	f383 8811 	msr	BASEPRI, r3
 8005a36:	f3bf 8f6f 	isb	sy
 8005a3a:	f3bf 8f4f 	dsb	sy
 8005a3e:	60bb      	str	r3, [r7, #8]
 8005a40:	e7fe      	b.n	8005a40 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a42:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	021b      	lsls	r3, r3, #8
 8005a48:	4a1c      	ldr	r2, [pc, #112]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a4a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a4c:	4b1b      	ldr	r3, [pc, #108]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a54:	4a19      	ldr	r2, [pc, #100]	; (8005abc <xPortStartScheduler+0x12c>)
 8005a56:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	b2da      	uxtb	r2, r3
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a60:	4b17      	ldr	r3, [pc, #92]	; (8005ac0 <xPortStartScheduler+0x130>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <xPortStartScheduler+0x130>)
 8005a66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a6a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a6c:	4b14      	ldr	r3, [pc, #80]	; (8005ac0 <xPortStartScheduler+0x130>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a13      	ldr	r2, [pc, #76]	; (8005ac0 <xPortStartScheduler+0x130>)
 8005a72:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a76:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a78:	f000 f8d6 	bl	8005c28 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a7c:	4b11      	ldr	r3, [pc, #68]	; (8005ac4 <xPortStartScheduler+0x134>)
 8005a7e:	2200      	movs	r2, #0
 8005a80:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a82:	f000 f8f5 	bl	8005c70 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a86:	4b10      	ldr	r3, [pc, #64]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	4a0f      	ldr	r2, [pc, #60]	; (8005ac8 <xPortStartScheduler+0x138>)
 8005a8c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a90:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a92:	f7ff ff69 	bl	8005968 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a96:	f7ff fbad 	bl	80051f4 <vTaskSwitchContext>
	prvTaskExitError();
 8005a9a:	f7ff ff21 	bl	80058e0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a9e:	2300      	movs	r3, #0
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3718      	adds	r7, #24
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	e000ed00 	.word	0xe000ed00
 8005aac:	410fc271 	.word	0x410fc271
 8005ab0:	410fc270 	.word	0x410fc270
 8005ab4:	e000e400 	.word	0xe000e400
 8005ab8:	200003dc 	.word	0x200003dc
 8005abc:	200003e0 	.word	0x200003e0
 8005ac0:	e000ed20 	.word	0xe000ed20
 8005ac4:	2000003c 	.word	0x2000003c
 8005ac8:	e000ef34 	.word	0xe000ef34

08005acc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005acc:	b480      	push	{r7}
 8005ace:	b083      	sub	sp, #12
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ad6:	f383 8811 	msr	BASEPRI, r3
 8005ada:	f3bf 8f6f 	isb	sy
 8005ade:	f3bf 8f4f 	dsb	sy
 8005ae2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005ae4:	4b0e      	ldr	r3, [pc, #56]	; (8005b20 <vPortEnterCritical+0x54>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	4a0d      	ldr	r2, [pc, #52]	; (8005b20 <vPortEnterCritical+0x54>)
 8005aec:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005aee:	4b0c      	ldr	r3, [pc, #48]	; (8005b20 <vPortEnterCritical+0x54>)
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	2b01      	cmp	r3, #1
 8005af4:	d10e      	bne.n	8005b14 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005af6:	4b0b      	ldr	r3, [pc, #44]	; (8005b24 <vPortEnterCritical+0x58>)
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	b2db      	uxtb	r3, r3
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d009      	beq.n	8005b14 <vPortEnterCritical+0x48>
 8005b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b04:	f383 8811 	msr	BASEPRI, r3
 8005b08:	f3bf 8f6f 	isb	sy
 8005b0c:	f3bf 8f4f 	dsb	sy
 8005b10:	603b      	str	r3, [r7, #0]
 8005b12:	e7fe      	b.n	8005b12 <vPortEnterCritical+0x46>
	}
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	2000003c 	.word	0x2000003c
 8005b24:	e000ed04 	.word	0xe000ed04

08005b28 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b2e:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <vPortExitCritical+0x4c>)
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d109      	bne.n	8005b4a <vPortExitCritical+0x22>
 8005b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b3a:	f383 8811 	msr	BASEPRI, r3
 8005b3e:	f3bf 8f6f 	isb	sy
 8005b42:	f3bf 8f4f 	dsb	sy
 8005b46:	607b      	str	r3, [r7, #4]
 8005b48:	e7fe      	b.n	8005b48 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005b4a:	4b0a      	ldr	r3, [pc, #40]	; (8005b74 <vPortExitCritical+0x4c>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	4a08      	ldr	r2, [pc, #32]	; (8005b74 <vPortExitCritical+0x4c>)
 8005b52:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b54:	4b07      	ldr	r3, [pc, #28]	; (8005b74 <vPortExitCritical+0x4c>)
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d104      	bne.n	8005b66 <vPortExitCritical+0x3e>
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b66:	bf00      	nop
 8005b68:	370c      	adds	r7, #12
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	2000003c 	.word	0x2000003c
	...

08005b80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b80:	f3ef 8009 	mrs	r0, PSP
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	4b15      	ldr	r3, [pc, #84]	; (8005be0 <pxCurrentTCBConst>)
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	f01e 0f10 	tst.w	lr, #16
 8005b90:	bf08      	it	eq
 8005b92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b9a:	6010      	str	r0, [r2, #0]
 8005b9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005ba0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005ba4:	f380 8811 	msr	BASEPRI, r0
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
 8005bb0:	f7ff fb20 	bl	80051f4 <vTaskSwitchContext>
 8005bb4:	f04f 0000 	mov.w	r0, #0
 8005bb8:	f380 8811 	msr	BASEPRI, r0
 8005bbc:	bc09      	pop	{r0, r3}
 8005bbe:	6819      	ldr	r1, [r3, #0]
 8005bc0:	6808      	ldr	r0, [r1, #0]
 8005bc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bc6:	f01e 0f10 	tst.w	lr, #16
 8005bca:	bf08      	it	eq
 8005bcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bd0:	f380 8809 	msr	PSP, r0
 8005bd4:	f3bf 8f6f 	isb	sy
 8005bd8:	4770      	bx	lr
 8005bda:	bf00      	nop
 8005bdc:	f3af 8000 	nop.w

08005be0 <pxCurrentTCBConst>:
 8005be0:	200002b0 	.word	0x200002b0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005be4:	bf00      	nop
 8005be6:	bf00      	nop

08005be8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b082      	sub	sp, #8
 8005bec:	af00      	add	r7, sp, #0
	__asm volatile
 8005bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf2:	f383 8811 	msr	BASEPRI, r3
 8005bf6:	f3bf 8f6f 	isb	sy
 8005bfa:	f3bf 8f4f 	dsb	sy
 8005bfe:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005c00:	f7ff fa3c 	bl	800507c <xTaskIncrementTick>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d003      	beq.n	8005c12 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005c0a:	4b06      	ldr	r3, [pc, #24]	; (8005c24 <SysTick_Handler+0x3c>)
 8005c0c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c10:	601a      	str	r2, [r3, #0]
 8005c12:	2300      	movs	r3, #0
 8005c14:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c1c:	bf00      	nop
 8005c1e:	3708      	adds	r7, #8
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bd80      	pop	{r7, pc}
 8005c24:	e000ed04 	.word	0xe000ed04

08005c28 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c28:	b480      	push	{r7}
 8005c2a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c2c:	4b0b      	ldr	r3, [pc, #44]	; (8005c5c <vPortSetupTimerInterrupt+0x34>)
 8005c2e:	2200      	movs	r2, #0
 8005c30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c32:	4b0b      	ldr	r3, [pc, #44]	; (8005c60 <vPortSetupTimerInterrupt+0x38>)
 8005c34:	2200      	movs	r2, #0
 8005c36:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c38:	4b0a      	ldr	r3, [pc, #40]	; (8005c64 <vPortSetupTimerInterrupt+0x3c>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a0a      	ldr	r2, [pc, #40]	; (8005c68 <vPortSetupTimerInterrupt+0x40>)
 8005c3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c42:	099b      	lsrs	r3, r3, #6
 8005c44:	4a09      	ldr	r2, [pc, #36]	; (8005c6c <vPortSetupTimerInterrupt+0x44>)
 8005c46:	3b01      	subs	r3, #1
 8005c48:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c4a:	4b04      	ldr	r3, [pc, #16]	; (8005c5c <vPortSetupTimerInterrupt+0x34>)
 8005c4c:	2207      	movs	r2, #7
 8005c4e:	601a      	str	r2, [r3, #0]
}
 8005c50:	bf00      	nop
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	e000e010 	.word	0xe000e010
 8005c60:	e000e018 	.word	0xe000e018
 8005c64:	20000034 	.word	0x20000034
 8005c68:	10624dd3 	.word	0x10624dd3
 8005c6c:	e000e014 	.word	0xe000e014

08005c70 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c70:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c80 <vPortEnableVFP+0x10>
 8005c74:	6801      	ldr	r1, [r0, #0]
 8005c76:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c7a:	6001      	str	r1, [r0, #0]
 8005c7c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c7e:	bf00      	nop
 8005c80:	e000ed88 	.word	0xe000ed88

08005c84 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c84:	b480      	push	{r7}
 8005c86:	b085      	sub	sp, #20
 8005c88:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c8a:	f3ef 8305 	mrs	r3, IPSR
 8005c8e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d913      	bls.n	8005cbe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c96:	4a16      	ldr	r2, [pc, #88]	; (8005cf0 <vPortValidateInterruptPriority+0x6c>)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005ca0:	4b14      	ldr	r3, [pc, #80]	; (8005cf4 <vPortValidateInterruptPriority+0x70>)
 8005ca2:	781b      	ldrb	r3, [r3, #0]
 8005ca4:	7afa      	ldrb	r2, [r7, #11]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d209      	bcs.n	8005cbe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	607b      	str	r3, [r7, #4]
 8005cbc:	e7fe      	b.n	8005cbc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005cbe:	4b0e      	ldr	r3, [pc, #56]	; (8005cf8 <vPortValidateInterruptPriority+0x74>)
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cc6:	4b0d      	ldr	r3, [pc, #52]	; (8005cfc <vPortValidateInterruptPriority+0x78>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	429a      	cmp	r2, r3
 8005ccc:	d909      	bls.n	8005ce2 <vPortValidateInterruptPriority+0x5e>
 8005cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd2:	f383 8811 	msr	BASEPRI, r3
 8005cd6:	f3bf 8f6f 	isb	sy
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	603b      	str	r3, [r7, #0]
 8005ce0:	e7fe      	b.n	8005ce0 <vPortValidateInterruptPriority+0x5c>
	}
 8005ce2:	bf00      	nop
 8005ce4:	3714      	adds	r7, #20
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	e000e3f0 	.word	0xe000e3f0
 8005cf4:	200003dc 	.word	0x200003dc
 8005cf8:	e000ed0c 	.word	0xe000ed0c
 8005cfc:	200003e0 	.word	0x200003e0

08005d00 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005d00:	b580      	push	{r7, lr}
 8005d02:	b08a      	sub	sp, #40	; 0x28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005d08:	2300      	movs	r3, #0
 8005d0a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005d0c:	f7ff f90c 	bl	8004f28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005d10:	4b57      	ldr	r3, [pc, #348]	; (8005e70 <pvPortMalloc+0x170>)
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d18:	f000 f90c 	bl	8005f34 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d1c:	4b55      	ldr	r3, [pc, #340]	; (8005e74 <pvPortMalloc+0x174>)
 8005d1e:	681a      	ldr	r2, [r3, #0]
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	f040 808c 	bne.w	8005e42 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d01c      	beq.n	8005d6a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005d30:	2208      	movs	r2, #8
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	4413      	add	r3, r2
 8005d36:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	f003 0307 	and.w	r3, r3, #7
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d013      	beq.n	8005d6a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	f023 0307 	bic.w	r3, r3, #7
 8005d48:	3308      	adds	r3, #8
 8005d4a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d009      	beq.n	8005d6a <pvPortMalloc+0x6a>
 8005d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d5a:	f383 8811 	msr	BASEPRI, r3
 8005d5e:	f3bf 8f6f 	isb	sy
 8005d62:	f3bf 8f4f 	dsb	sy
 8005d66:	617b      	str	r3, [r7, #20]
 8005d68:	e7fe      	b.n	8005d68 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d068      	beq.n	8005e42 <pvPortMalloc+0x142>
 8005d70:	4b41      	ldr	r3, [pc, #260]	; (8005e78 <pvPortMalloc+0x178>)
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	687a      	ldr	r2, [r7, #4]
 8005d76:	429a      	cmp	r2, r3
 8005d78:	d863      	bhi.n	8005e42 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d7a:	4b40      	ldr	r3, [pc, #256]	; (8005e7c <pvPortMalloc+0x17c>)
 8005d7c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d7e:	4b3f      	ldr	r3, [pc, #252]	; (8005e7c <pvPortMalloc+0x17c>)
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d84:	e004      	b.n	8005d90 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8005d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d88:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d903      	bls.n	8005da2 <pvPortMalloc+0xa2>
 8005d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f1      	bne.n	8005d86 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005da2:	4b33      	ldr	r3, [pc, #204]	; (8005e70 <pvPortMalloc+0x170>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005da8:	429a      	cmp	r2, r3
 8005daa:	d04a      	beq.n	8005e42 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005dac:	6a3b      	ldr	r3, [r7, #32]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	2208      	movs	r2, #8
 8005db2:	4413      	add	r3, r2
 8005db4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	681a      	ldr	r2, [r3, #0]
 8005dba:	6a3b      	ldr	r3, [r7, #32]
 8005dbc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	1ad2      	subs	r2, r2, r3
 8005dc6:	2308      	movs	r3, #8
 8005dc8:	005b      	lsls	r3, r3, #1
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d91e      	bls.n	8005e0c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dd6:	69bb      	ldr	r3, [r7, #24]
 8005dd8:	f003 0307 	and.w	r3, r3, #7
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <pvPortMalloc+0xf4>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	613b      	str	r3, [r7, #16]
 8005df2:	e7fe      	b.n	8005df2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df6:	685a      	ldr	r2, [r3, #4]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	1ad2      	subs	r2, r2, r3
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e02:	687a      	ldr	r2, [r7, #4]
 8005e04:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005e06:	69b8      	ldr	r0, [r7, #24]
 8005e08:	f000 f8f6 	bl	8005ff8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005e0c:	4b1a      	ldr	r3, [pc, #104]	; (8005e78 <pvPortMalloc+0x178>)
 8005e0e:	681a      	ldr	r2, [r3, #0]
 8005e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e12:	685b      	ldr	r3, [r3, #4]
 8005e14:	1ad3      	subs	r3, r2, r3
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x178>)
 8005e18:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <pvPortMalloc+0x178>)
 8005e1c:	681a      	ldr	r2, [r3, #0]
 8005e1e:	4b18      	ldr	r3, [pc, #96]	; (8005e80 <pvPortMalloc+0x180>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d203      	bcs.n	8005e2e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e26:	4b14      	ldr	r3, [pc, #80]	; (8005e78 <pvPortMalloc+0x178>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a15      	ldr	r2, [pc, #84]	; (8005e80 <pvPortMalloc+0x180>)
 8005e2c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	4b10      	ldr	r3, [pc, #64]	; (8005e74 <pvPortMalloc+0x174>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	431a      	orrs	r2, r3
 8005e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	2200      	movs	r2, #0
 8005e40:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e42:	f7ff f87f 	bl	8004f44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	f003 0307 	and.w	r3, r3, #7
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d009      	beq.n	8005e64 <pvPortMalloc+0x164>
 8005e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	60fb      	str	r3, [r7, #12]
 8005e62:	e7fe      	b.n	8005e62 <pvPortMalloc+0x162>
	return pvReturn;
 8005e64:	69fb      	ldr	r3, [r7, #28]
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3728      	adds	r7, #40	; 0x28
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	bd80      	pop	{r7, pc}
 8005e6e:	bf00      	nop
 8005e70:	20003fec 	.word	0x20003fec
 8005e74:	20003ff8 	.word	0x20003ff8
 8005e78:	20003ff0 	.word	0x20003ff0
 8005e7c:	20003fe4 	.word	0x20003fe4
 8005e80:	20003ff4 	.word	0x20003ff4

08005e84 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e84:	b580      	push	{r7, lr}
 8005e86:	b086      	sub	sp, #24
 8005e88:	af00      	add	r7, sp, #0
 8005e8a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d046      	beq.n	8005f24 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e96:	2308      	movs	r3, #8
 8005e98:	425b      	negs	r3, r3
 8005e9a:	697a      	ldr	r2, [r7, #20]
 8005e9c:	4413      	add	r3, r2
 8005e9e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005ea0:	697b      	ldr	r3, [r7, #20]
 8005ea2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	4b20      	ldr	r3, [pc, #128]	; (8005f2c <vPortFree+0xa8>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4013      	ands	r3, r2
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d109      	bne.n	8005ec6 <vPortFree+0x42>
 8005eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb6:	f383 8811 	msr	BASEPRI, r3
 8005eba:	f3bf 8f6f 	isb	sy
 8005ebe:	f3bf 8f4f 	dsb	sy
 8005ec2:	60fb      	str	r3, [r7, #12]
 8005ec4:	e7fe      	b.n	8005ec4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <vPortFree+0x5e>
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	60bb      	str	r3, [r7, #8]
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b11      	ldr	r3, [pc, #68]	; (8005f2c <vPortFree+0xa8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d019      	beq.n	8005f24 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d115      	bne.n	8005f24 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0b      	ldr	r3, [pc, #44]	; (8005f2c <vPortFree+0xa8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7ff f80e 	bl	8004f28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b07      	ldr	r3, [pc, #28]	; (8005f30 <vPortFree+0xac>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a06      	ldr	r2, [pc, #24]	; (8005f30 <vPortFree+0xac>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f86c 	bl	8005ff8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005f20:	f7ff f810 	bl	8004f44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f24:	bf00      	nop
 8005f26:	3718      	adds	r7, #24
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}
 8005f2c:	20003ff8 	.word	0x20003ff8
 8005f30:	20003ff0 	.word	0x20003ff0

08005f34 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b085      	sub	sp, #20
 8005f38:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f3a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8005f3e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f40:	4b27      	ldr	r3, [pc, #156]	; (8005fe0 <prvHeapInit+0xac>)
 8005f42:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	f003 0307 	and.w	r3, r3, #7
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d00c      	beq.n	8005f68 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	3307      	adds	r3, #7
 8005f52:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f023 0307 	bic.w	r3, r3, #7
 8005f5a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	1ad3      	subs	r3, r2, r3
 8005f62:	4a1f      	ldr	r2, [pc, #124]	; (8005fe0 <prvHeapInit+0xac>)
 8005f64:	4413      	add	r3, r2
 8005f66:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f6c:	4a1d      	ldr	r2, [pc, #116]	; (8005fe4 <prvHeapInit+0xb0>)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f72:	4b1c      	ldr	r3, [pc, #112]	; (8005fe4 <prvHeapInit+0xb0>)
 8005f74:	2200      	movs	r2, #0
 8005f76:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	68ba      	ldr	r2, [r7, #8]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f80:	2208      	movs	r2, #8
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	1a9b      	subs	r3, r3, r2
 8005f86:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	f023 0307 	bic.w	r3, r3, #7
 8005f8e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4a15      	ldr	r2, [pc, #84]	; (8005fe8 <prvHeapInit+0xb4>)
 8005f94:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005f96:	4b14      	ldr	r3, [pc, #80]	; (8005fe8 <prvHeapInit+0xb4>)
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005f9e:	4b12      	ldr	r3, [pc, #72]	; (8005fe8 <prvHeapInit+0xb4>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	1ad2      	subs	r2, r2, r3
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fb4:	4b0c      	ldr	r3, [pc, #48]	; (8005fe8 <prvHeapInit+0xb4>)
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	685b      	ldr	r3, [r3, #4]
 8005fc0:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <prvHeapInit+0xb8>)
 8005fc2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	4a09      	ldr	r2, [pc, #36]	; (8005ff0 <prvHeapInit+0xbc>)
 8005fca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fcc:	4b09      	ldr	r3, [pc, #36]	; (8005ff4 <prvHeapInit+0xc0>)
 8005fce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fd2:	601a      	str	r2, [r3, #0]
}
 8005fd4:	bf00      	nop
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	200003e4 	.word	0x200003e4
 8005fe4:	20003fe4 	.word	0x20003fe4
 8005fe8:	20003fec 	.word	0x20003fec
 8005fec:	20003ff4 	.word	0x20003ff4
 8005ff0:	20003ff0 	.word	0x20003ff0
 8005ff4:	20003ff8 	.word	0x20003ff8

08005ff8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b085      	sub	sp, #20
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006000:	4b28      	ldr	r3, [pc, #160]	; (80060a4 <prvInsertBlockIntoFreeList+0xac>)
 8006002:	60fb      	str	r3, [r7, #12]
 8006004:	e002      	b.n	800600c <prvInsertBlockIntoFreeList+0x14>
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	60fb      	str	r3, [r7, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	429a      	cmp	r2, r3
 8006014:	d8f7      	bhi.n	8006006 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	685b      	ldr	r3, [r3, #4]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	4413      	add	r3, r2
 8006022:	687a      	ldr	r2, [r7, #4]
 8006024:	429a      	cmp	r2, r3
 8006026:	d108      	bne.n	800603a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	441a      	add	r2, r3
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	441a      	add	r2, r3
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	429a      	cmp	r2, r3
 800604c:	d118      	bne.n	8006080 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	681a      	ldr	r2, [r3, #0]
 8006052:	4b15      	ldr	r3, [pc, #84]	; (80060a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	429a      	cmp	r2, r3
 8006058:	d00d      	beq.n	8006076 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	685a      	ldr	r2, [r3, #4]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	685b      	ldr	r3, [r3, #4]
 8006064:	441a      	add	r2, r3
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	681a      	ldr	r2, [r3, #0]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	601a      	str	r2, [r3, #0]
 8006074:	e008      	b.n	8006088 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006076:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <prvInsertBlockIntoFreeList+0xb0>)
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	601a      	str	r2, [r3, #0]
 800607e:	e003      	b.n	8006088 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	681a      	ldr	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006088:	68fa      	ldr	r2, [r7, #12]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d002      	beq.n	8006096 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006096:	bf00      	nop
 8006098:	3714      	adds	r7, #20
 800609a:	46bd      	mov	sp, r7
 800609c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a0:	4770      	bx	lr
 80060a2:	bf00      	nop
 80060a4:	20003fe4 	.word	0x20003fe4
 80060a8:	20003fec 	.word	0x20003fec

080060ac <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 80060ac:	b480      	push	{r7}
 80060ae:	b083      	sub	sp, #12
 80060b0:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 80060b2:	4b15      	ldr	r3, [pc, #84]	; (8006108 <TM_DELAY_Init+0x5c>)
 80060b4:	68db      	ldr	r3, [r3, #12]
 80060b6:	4a14      	ldr	r2, [pc, #80]	; (8006108 <TM_DELAY_Init+0x5c>)
 80060b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80060bc:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 80060be:	4b12      	ldr	r3, [pc, #72]	; (8006108 <TM_DELAY_Init+0x5c>)
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	4a11      	ldr	r2, [pc, #68]	; (8006108 <TM_DELAY_Init+0x5c>)
 80060c4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c8:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 80060ca:	4b10      	ldr	r3, [pc, #64]	; (800610c <TM_DELAY_Init+0x60>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a0f      	ldr	r2, [pc, #60]	; (800610c <TM_DELAY_Init+0x60>)
 80060d0:	f023 0301 	bic.w	r3, r3, #1
 80060d4:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 80060d6:	4b0d      	ldr	r3, [pc, #52]	; (800610c <TM_DELAY_Init+0x60>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	4a0c      	ldr	r2, [pc, #48]	; (800610c <TM_DELAY_Init+0x60>)
 80060dc:	f043 0301 	orr.w	r3, r3, #1
 80060e0:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 80060e2:	4b0a      	ldr	r3, [pc, #40]	; (800610c <TM_DELAY_Init+0x60>)
 80060e4:	2200      	movs	r2, #0
 80060e6:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 80060e8:	4b08      	ldr	r3, [pc, #32]	; (800610c <TM_DELAY_Init+0x60>)
 80060ea:	685b      	ldr	r3, [r3, #4]
 80060ec:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 80060ee:	bf00      	nop
	__ASM volatile ("NOP");
 80060f0:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 80060f2:	4b06      	ldr	r3, [pc, #24]	; (800610c <TM_DELAY_Init+0x60>)
 80060f4:	685a      	ldr	r2, [r3, #4]
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 80060fa:	4618      	mov	r0, r3
 80060fc:	370c      	adds	r7, #12
 80060fe:	46bd      	mov	sp, r7
 8006100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006104:	4770      	bx	lr
 8006106:	bf00      	nop
 8006108:	e000edf0 	.word	0xe000edf0
 800610c:	e0001000 	.word	0xe0001000

08006110 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 8006110:	b480      	push	{r7}
 8006112:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 8006114:	bf00      	nop
 8006116:	46bd      	mov	sp, r7
 8006118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611c:	4770      	bx	lr
	...

08006120 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8006120:	b580      	push	{r7, lr}
 8006122:	b082      	sub	sp, #8
 8006124:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8006126:	4b3e      	ldr	r3, [pc, #248]	; (8006220 <HAL_IncTick+0x100>)
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	3301      	adds	r3, #1
 800612c:	4a3c      	ldr	r2, [pc, #240]	; (8006220 <HAL_IncTick+0x100>)
 800612e:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8006130:	4b3c      	ldr	r3, [pc, #240]	; (8006224 <HAL_IncTick+0x104>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d004      	beq.n	8006142 <HAL_IncTick+0x22>
		TM_Time2--;
 8006138:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <HAL_IncTick+0x104>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	3b01      	subs	r3, #1
 800613e:	4a39      	ldr	r2, [pc, #228]	; (8006224 <HAL_IncTick+0x104>)
 8006140:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8006142:	2300      	movs	r3, #0
 8006144:	71fb      	strb	r3, [r7, #7]
 8006146:	e05f      	b.n	8006208 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006148:	79fb      	ldrb	r3, [r7, #7]
 800614a:	4a37      	ldr	r2, [pc, #220]	; (8006228 <HAL_IncTick+0x108>)
 800614c:	009b      	lsls	r3, r3, #2
 800614e:	4413      	add	r3, r2
 8006150:	685b      	ldr	r3, [r3, #4]
		if (
 8006152:	2b00      	cmp	r3, #0
 8006154:	d055      	beq.n	8006202 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8006156:	79fb      	ldrb	r3, [r7, #7]
 8006158:	4a33      	ldr	r2, [pc, #204]	; (8006228 <HAL_IncTick+0x108>)
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	f003 0302 	and.w	r3, r3, #2
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b00      	cmp	r3, #0
 800616a:	d04a      	beq.n	8006202 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 800616c:	79fb      	ldrb	r3, [r7, #7]
 800616e:	4a2e      	ldr	r2, [pc, #184]	; (8006228 <HAL_IncTick+0x108>)
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d007      	beq.n	800618c <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 800617c:	79fb      	ldrb	r3, [r7, #7]
 800617e:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <HAL_IncTick+0x108>)
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	689a      	ldr	r2, [r3, #8]
 8006188:	3a01      	subs	r2, #1
 800618a:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800618c:	79fb      	ldrb	r3, [r7, #7]
 800618e:	4a26      	ldr	r2, [pc, #152]	; (8006228 <HAL_IncTick+0x108>)
 8006190:	009b      	lsls	r3, r3, #2
 8006192:	4413      	add	r3, r2
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d132      	bne.n	8006202 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 800619c:	79fb      	ldrb	r3, [r7, #7]
 800619e:	4a22      	ldr	r2, [pc, #136]	; (8006228 <HAL_IncTick+0x108>)
 80061a0:	009b      	lsls	r3, r3, #2
 80061a2:	4413      	add	r3, r2
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	68da      	ldr	r2, [r3, #12]
 80061a8:	79fb      	ldrb	r3, [r7, #7]
 80061aa:	491f      	ldr	r1, [pc, #124]	; (8006228 <HAL_IncTick+0x108>)
 80061ac:	009b      	lsls	r3, r3, #2
 80061ae:	440b      	add	r3, r1
 80061b0:	6858      	ldr	r0, [r3, #4]
 80061b2:	79fb      	ldrb	r3, [r7, #7]
 80061b4:	491c      	ldr	r1, [pc, #112]	; (8006228 <HAL_IncTick+0x108>)
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	440b      	add	r3, r1
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	4619      	mov	r1, r3
 80061c0:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80061c2:	79fb      	ldrb	r3, [r7, #7]
 80061c4:	4a18      	ldr	r2, [pc, #96]	; (8006228 <HAL_IncTick+0x108>)
 80061c6:	009b      	lsls	r3, r3, #2
 80061c8:	4413      	add	r3, r2
 80061ca:	685a      	ldr	r2, [r3, #4]
 80061cc:	79fb      	ldrb	r3, [r7, #7]
 80061ce:	4916      	ldr	r1, [pc, #88]	; (8006228 <HAL_IncTick+0x108>)
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	440b      	add	r3, r1
 80061d4:	685b      	ldr	r3, [r3, #4]
 80061d6:	6852      	ldr	r2, [r2, #4]
 80061d8:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80061da:	79fb      	ldrb	r3, [r7, #7]
 80061dc:	4a12      	ldr	r2, [pc, #72]	; (8006228 <HAL_IncTick+0x108>)
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	4413      	add	r3, r2
 80061e2:	685b      	ldr	r3, [r3, #4]
 80061e4:	781b      	ldrb	r3, [r3, #0]
 80061e6:	f003 0301 	and.w	r3, r3, #1
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d108      	bne.n	8006202 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80061f0:	79fb      	ldrb	r3, [r7, #7]
 80061f2:	4a0d      	ldr	r2, [pc, #52]	; (8006228 <HAL_IncTick+0x108>)
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	4413      	add	r3, r2
 80061f8:	685a      	ldr	r2, [r3, #4]
 80061fa:	7813      	ldrb	r3, [r2, #0]
 80061fc:	f36f 0341 	bfc	r3, #1, #1
 8006200:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 8006202:	79fb      	ldrb	r3, [r7, #7]
 8006204:	3301      	adds	r3, #1
 8006206:	71fb      	strb	r3, [r7, #7]
 8006208:	4b07      	ldr	r3, [pc, #28]	; (8006228 <HAL_IncTick+0x108>)
 800620a:	781b      	ldrb	r3, [r3, #0]
 800620c:	79fa      	ldrb	r2, [r7, #7]
 800620e:	429a      	cmp	r2, r3
 8006210:	d39a      	bcc.n	8006148 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 8006212:	f7ff ff7d 	bl	8006110 <TM_DELAY_1msHandler>
}
 8006216:	bf00      	nop
 8006218:	3708      	adds	r7, #8
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20004000 	.word	0x20004000
 8006224:	20003ffc 	.word	0x20003ffc
 8006228:	20004004 	.word	0x20004004

0800622c <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 800622c:	b580      	push	{r7, lr}
 800622e:	b084      	sub	sp, #16
 8006230:	af00      	add	r7, sp, #0
 8006232:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006234:	f3ef 8305 	mrs	r3, IPSR
 8006238:	60bb      	str	r3, [r7, #8]
  return(result);
 800623a:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 800623c:	2b00      	cmp	r3, #0
 800623e:	d115      	bne.n	800626c <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 8006240:	f000 f81e 	bl	8006280 <HAL_GetTick>
 8006244:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 8006246:	bf00      	nop
 8006248:	f000 f81a 	bl	8006280 <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	429a      	cmp	r2, r3
 8006256:	d8f7      	bhi.n	8006248 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 8006258:	e00b      	b.n	8006272 <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 800625a:	4b08      	ldr	r3, [pc, #32]	; (800627c <HAL_Delay+0x50>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006262:	2b00      	cmp	r3, #0
 8006264:	d002      	beq.n	800626c <HAL_Delay+0x40>
				Delay--;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	3b01      	subs	r3, #1
 800626a:	607b      	str	r3, [r7, #4]
		while (Delay) {
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d1f3      	bne.n	800625a <HAL_Delay+0x2e>
}
 8006272:	bf00      	nop
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	e000e010 	.word	0xe000e010

08006280 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_GetTick+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20004000 	.word	0x20004000

08006298 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8006298:	b580      	push	{r7, lr}
 800629a:	b084      	sub	sp, #16
 800629c:	af02      	add	r7, sp, #8
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	4608      	mov	r0, r1
 80062a2:	4611      	mov	r1, r2
 80062a4:	461a      	mov	r2, r3
 80062a6:	4603      	mov	r3, r0
 80062a8:	807b      	strh	r3, [r7, #2]
 80062aa:	460b      	mov	r3, r1
 80062ac:	707b      	strb	r3, [r7, #1]
 80062ae:	4613      	mov	r3, r2
 80062b0:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 80062b2:	887b      	ldrh	r3, [r7, #2]
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d00e      	beq.n	80062d6 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	f000 f821 	bl	8006300 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 80062be:	7838      	ldrb	r0, [r7, #0]
 80062c0:	787a      	ldrb	r2, [r7, #1]
 80062c2:	8879      	ldrh	r1, [r7, #2]
 80062c4:	7d3b      	ldrb	r3, [r7, #20]
 80062c6:	9301      	str	r3, [sp, #4]
 80062c8:	7c3b      	ldrb	r3, [r7, #16]
 80062ca:	9300      	str	r3, [sp, #0]
 80062cc:	4603      	mov	r3, r0
 80062ce:	6878      	ldr	r0, [r7, #4]
 80062d0:	f000 f82e 	bl	8006330 <TM_GPIO_INT_Init>
 80062d4:	e000      	b.n	80062d8 <TM_GPIO_Init+0x40>
		return;
 80062d6:	bf00      	nop
}
 80062d8:	3708      	adds	r7, #8
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80062de:	b480      	push	{r7}
 80062e0:	b083      	sub	sp, #12
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80062ec:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80062f0:	0a9b      	lsrs	r3, r3, #10
 80062f2:	b29b      	uxth	r3, r3
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 8006300:	b580      	push	{r7, lr}
 8006302:	b082      	sub	sp, #8
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f7ff ffe8 	bl	80062de <TM_GPIO_GetPortSource>
 800630e:	4603      	mov	r3, r0
 8006310:	461a      	mov	r2, r3
 8006312:	2301      	movs	r3, #1
 8006314:	fa03 f202 	lsl.w	r2, r3, r2
 8006318:	4b04      	ldr	r3, [pc, #16]	; (800632c <TM_GPIO_INT_EnableClock+0x2c>)
 800631a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800631c:	4611      	mov	r1, r2
 800631e:	4a03      	ldr	r2, [pc, #12]	; (800632c <TM_GPIO_INT_EnableClock+0x2c>)
 8006320:	430b      	orrs	r3, r1
 8006322:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 8006324:	bf00      	nop
 8006326:	3708      	adds	r7, #8
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	40023800 	.word	0x40023800

08006330 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006330:	b580      	push	{r7, lr}
 8006332:	b084      	sub	sp, #16
 8006334:	af00      	add	r7, sp, #0
 8006336:	6078      	str	r0, [r7, #4]
 8006338:	4608      	mov	r0, r1
 800633a:	4611      	mov	r1, r2
 800633c:	461a      	mov	r2, r3
 800633e:	4603      	mov	r3, r0
 8006340:	807b      	strh	r3, [r7, #2]
 8006342:	460b      	mov	r3, r1
 8006344:	707b      	strb	r3, [r7, #1]
 8006346:	4613      	mov	r3, r2
 8006348:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800634a:	6878      	ldr	r0, [r7, #4]
 800634c:	f7ff ffc7 	bl	80062de <TM_GPIO_GetPortSource>
 8006350:	4603      	mov	r3, r0
 8006352:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006354:	2300      	movs	r3, #0
 8006356:	73fb      	strb	r3, [r7, #15]
 8006358:	e067      	b.n	800642a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800635a:	887a      	ldrh	r2, [r7, #2]
 800635c:	7bfb      	ldrb	r3, [r7, #15]
 800635e:	fa42 f303 	asr.w	r3, r2, r3
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d05b      	beq.n	8006422 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800636a:	7bbb      	ldrb	r3, [r7, #14]
 800636c:	4a32      	ldr	r2, [pc, #200]	; (8006438 <TM_GPIO_INT_Init+0x108>)
 800636e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006372:	b21a      	sxth	r2, r3
 8006374:	7bfb      	ldrb	r3, [r7, #15]
 8006376:	2101      	movs	r1, #1
 8006378:	fa01 f303 	lsl.w	r3, r1, r3
 800637c:	b21b      	sxth	r3, r3
 800637e:	4313      	orrs	r3, r2
 8006380:	b21a      	sxth	r2, r3
 8006382:	7bbb      	ldrb	r3, [r7, #14]
 8006384:	b291      	uxth	r1, r2
 8006386:	4a2c      	ldr	r2, [pc, #176]	; (8006438 <TM_GPIO_INT_Init+0x108>)
 8006388:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	68db      	ldr	r3, [r3, #12]
 8006390:	7bfa      	ldrb	r2, [r7, #15]
 8006392:	0052      	lsls	r2, r2, #1
 8006394:	2103      	movs	r1, #3
 8006396:	fa01 f202 	lsl.w	r2, r1, r2
 800639a:	43d2      	mvns	r2, r2
 800639c:	4013      	ands	r3, r2
 800639e:	7e39      	ldrb	r1, [r7, #24]
 80063a0:	7bfa      	ldrb	r2, [r7, #15]
 80063a2:	0052      	lsls	r2, r2, #1
 80063a4:	fa01 f202 	lsl.w	r2, r1, r2
 80063a8:	431a      	orrs	r2, r3
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681a      	ldr	r2, [r3, #0]
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	005b      	lsls	r3, r3, #1
 80063b6:	2103      	movs	r1, #3
 80063b8:	fa01 f303 	lsl.w	r3, r1, r3
 80063bc:	43db      	mvns	r3, r3
 80063be:	4013      	ands	r3, r2
 80063c0:	7879      	ldrb	r1, [r7, #1]
 80063c2:	7bfa      	ldrb	r2, [r7, #15]
 80063c4:	0052      	lsls	r2, r2, #1
 80063c6:	fa01 f202 	lsl.w	r2, r1, r2
 80063ca:	431a      	orrs	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80063d0:	787b      	ldrb	r3, [r7, #1]
 80063d2:	2b01      	cmp	r3, #1
 80063d4:	d002      	beq.n	80063dc <TM_GPIO_INT_Init+0xac>
 80063d6:	787b      	ldrb	r3, [r7, #1]
 80063d8:	2b02      	cmp	r3, #2
 80063da:	d123      	bne.n	8006424 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	7bfa      	ldrb	r2, [r7, #15]
 80063e2:	2101      	movs	r1, #1
 80063e4:	fa01 f202 	lsl.w	r2, r1, r2
 80063e8:	b292      	uxth	r2, r2
 80063ea:	43d2      	mvns	r2, r2
 80063ec:	4013      	ands	r3, r2
 80063ee:	7839      	ldrb	r1, [r7, #0]
 80063f0:	7bfa      	ldrb	r2, [r7, #15]
 80063f2:	fa01 f202 	lsl.w	r2, r1, r2
 80063f6:	b292      	uxth	r2, r2
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	689a      	ldr	r2, [r3, #8]
 8006402:	7bfb      	ldrb	r3, [r7, #15]
 8006404:	005b      	lsls	r3, r3, #1
 8006406:	2103      	movs	r1, #3
 8006408:	fa01 f303 	lsl.w	r3, r1, r3
 800640c:	43db      	mvns	r3, r3
 800640e:	4013      	ands	r3, r2
 8006410:	7f39      	ldrb	r1, [r7, #28]
 8006412:	7bfa      	ldrb	r2, [r7, #15]
 8006414:	0052      	lsls	r2, r2, #1
 8006416:	fa01 f202 	lsl.w	r2, r1, r2
 800641a:	431a      	orrs	r2, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
 8006420:	e000      	b.n	8006424 <TM_GPIO_INT_Init+0xf4>
			continue;
 8006422:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006424:	7bfb      	ldrb	r3, [r7, #15]
 8006426:	3301      	adds	r3, #1
 8006428:	73fb      	strb	r3, [r7, #15]
 800642a:	7bfb      	ldrb	r3, [r7, #15]
 800642c:	2b0f      	cmp	r3, #15
 800642e:	d994      	bls.n	800635a <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8006430:	bf00      	nop
 8006432:	3710      	adds	r7, #16
 8006434:	46bd      	mov	sp, r7
 8006436:	bd80      	pop	{r7, pc}
 8006438:	2000401c 	.word	0x2000401c

0800643c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800643c:	b580      	push	{r7, lr}
 800643e:	b084      	sub	sp, #16
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8006444:	4b0c      	ldr	r3, [pc, #48]	; (8006478 <Delay+0x3c>)
 8006446:	685b      	ldr	r3, [r3, #4]
 8006448:	60fb      	str	r3, [r7, #12]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800644a:	f7fb fe7b 	bl	8002144 <HAL_RCC_GetHCLKFreq>
 800644e:	4602      	mov	r2, r0
 8006450:	4b0a      	ldr	r3, [pc, #40]	; (800647c <Delay+0x40>)
 8006452:	fba3 2302 	umull	r2, r3, r3, r2
 8006456:	0c9b      	lsrs	r3, r3, #18
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	fb02 f303 	mul.w	r3, r2, r3
 800645e:	607b      	str	r3, [r7, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8006460:	bf00      	nop
 8006462:	4b05      	ldr	r3, [pc, #20]	; (8006478 <Delay+0x3c>)
 8006464:	685a      	ldr	r2, [r3, #4]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	1ad2      	subs	r2, r2, r3
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d3f8      	bcc.n	8006462 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8006470:	bf00      	nop
 8006472:	3710      	adds	r7, #16
 8006474:	46bd      	mov	sp, r7
 8006476:	bd80      	pop	{r7, pc}
 8006478:	e0001000 	.word	0xe0001000
 800647c:	431bde83 	.word	0x431bde83

08006480 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
 8006486:	4603      	mov	r3, r0
 8006488:	460a      	mov	r2, r1
 800648a:	71fb      	strb	r3, [r7, #7]
 800648c:	4613      	mov	r3, r2
 800648e:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	TM_DELAY_Init();
 8006490:	f7ff fe0c 	bl	80060ac <TM_DELAY_Init>
	
	/* Init pinout */
	TM_HD44780_InitPins();
 8006494:	f000 f996 	bl	80067c4 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 8006498:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 800649c:	f7ff ffce 	bl	800643c <Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 80064a0:	4a2a      	ldr	r2, [pc, #168]	; (800654c <TM_HD44780_Init+0xcc>)
 80064a2:	79bb      	ldrb	r3, [r7, #6]
 80064a4:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 80064a6:	4a29      	ldr	r2, [pc, #164]	; (800654c <TM_HD44780_Init+0xcc>)
 80064a8:	79fb      	ldrb	r3, [r7, #7]
 80064aa:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 80064ac:	4b27      	ldr	r3, [pc, #156]	; (800654c <TM_HD44780_Init+0xcc>)
 80064ae:	2200      	movs	r2, #0
 80064b0:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 80064b2:	4b26      	ldr	r3, [pc, #152]	; (800654c <TM_HD44780_Init+0xcc>)
 80064b4:	2200      	movs	r2, #0
 80064b6:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 80064b8:	4b24      	ldr	r3, [pc, #144]	; (800654c <TM_HD44780_Init+0xcc>)
 80064ba:	2200      	movs	r2, #0
 80064bc:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 80064be:	79bb      	ldrb	r3, [r7, #6]
 80064c0:	2b01      	cmp	r3, #1
 80064c2:	d906      	bls.n	80064d2 <TM_HD44780_Init+0x52>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80064c4:	4b21      	ldr	r3, [pc, #132]	; (800654c <TM_HD44780_Init+0xcc>)
 80064c6:	785b      	ldrb	r3, [r3, #1]
 80064c8:	f043 0308 	orr.w	r3, r3, #8
 80064cc:	b2da      	uxtb	r2, r3
 80064ce:	4b1f      	ldr	r3, [pc, #124]	; (800654c <TM_HD44780_Init+0xcc>)
 80064d0:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 80064d2:	2003      	movs	r0, #3
 80064d4:	f000 f8f2 	bl	80066bc <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80064d8:	f241 1094 	movw	r0, #4500	; 0x1194
 80064dc:	f7ff ffae 	bl	800643c <Delay>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 80064e0:	2003      	movs	r0, #3
 80064e2:	f000 f8eb 	bl	80066bc <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80064e6:	f241 1094 	movw	r0, #4500	; 0x1194
 80064ea:	f7ff ffa7 	bl	800643c <Delay>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 80064ee:	2003      	movs	r0, #3
 80064f0:	f000 f8e4 	bl	80066bc <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);	
 80064f4:	f241 1094 	movw	r0, #4500	; 0x1194
 80064f8:	f7ff ffa0 	bl	800643c <Delay>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 80064fc:	2002      	movs	r0, #2
 80064fe:	f000 f8dd 	bl	80066bc <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 8006502:	2064      	movs	r0, #100	; 0x64
 8006504:	f7ff ff9a 	bl	800643c <Delay>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 8006508:	4b10      	ldr	r3, [pc, #64]	; (800654c <TM_HD44780_Init+0xcc>)
 800650a:	785b      	ldrb	r3, [r3, #1]
 800650c:	f043 0320 	orr.w	r3, r3, #32
 8006510:	b2db      	uxtb	r3, r3
 8006512:	4618      	mov	r0, r3
 8006514:	f000 f89a 	bl	800664c <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 8006518:	4b0c      	ldr	r3, [pc, #48]	; (800654c <TM_HD44780_Init+0xcc>)
 800651a:	2204      	movs	r2, #4
 800651c:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 800651e:	f000 f87f 	bl	8006620 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8006522:	f000 f815 	bl	8006550 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8006526:	4b09      	ldr	r3, [pc, #36]	; (800654c <TM_HD44780_Init+0xcc>)
 8006528:	2202      	movs	r2, #2
 800652a:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800652c:	4b07      	ldr	r3, [pc, #28]	; (800654c <TM_HD44780_Init+0xcc>)
 800652e:	789b      	ldrb	r3, [r3, #2]
 8006530:	f043 0304 	orr.w	r3, r3, #4
 8006534:	b2db      	uxtb	r3, r3
 8006536:	4618      	mov	r0, r3
 8006538:	f000 f888 	bl	800664c <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 800653c:	f241 1094 	movw	r0, #4500	; 0x1194
 8006540:	f7ff ff7c 	bl	800643c <Delay>
}
 8006544:	bf00      	nop
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}
 800654c:	20004038 	.word	0x20004038

08006550 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 8006550:	b580      	push	{r7, lr}
 8006552:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8006554:	2001      	movs	r0, #1
 8006556:	f000 f879 	bl	800664c <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 800655a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800655e:	f7ff ff6d 	bl	800643c <Delay>
}
 8006562:	bf00      	nop
 8006564:	bd80      	pop	{r7, pc}
	...

08006568 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8006568:	b580      	push	{r7, lr}
 800656a:	b082      	sub	sp, #8
 800656c:	af00      	add	r7, sp, #0
 800656e:	4603      	mov	r3, r0
 8006570:	603a      	str	r2, [r7, #0]
 8006572:	71fb      	strb	r3, [r7, #7]
 8006574:	460b      	mov	r3, r1
 8006576:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 8006578:	79ba      	ldrb	r2, [r7, #6]
 800657a:	79fb      	ldrb	r3, [r7, #7]
 800657c:	4611      	mov	r1, r2
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f8ee 	bl	8006760 <TM_HD44780_CursorSet>
	while (*str) {
 8006584:	e042      	b.n	800660c <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8006586:	4b25      	ldr	r3, [pc, #148]	; (800661c <TM_HD44780_Puts+0xb4>)
 8006588:	795a      	ldrb	r2, [r3, #5]
 800658a:	4b24      	ldr	r3, [pc, #144]	; (800661c <TM_HD44780_Puts+0xb4>)
 800658c:	791b      	ldrb	r3, [r3, #4]
 800658e:	429a      	cmp	r2, r3
 8006590:	d310      	bcc.n	80065b4 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 8006592:	4b22      	ldr	r3, [pc, #136]	; (800661c <TM_HD44780_Puts+0xb4>)
 8006594:	2200      	movs	r2, #0
 8006596:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8006598:	4b20      	ldr	r3, [pc, #128]	; (800661c <TM_HD44780_Puts+0xb4>)
 800659a:	799b      	ldrb	r3, [r3, #6]
 800659c:	3301      	adds	r3, #1
 800659e:	b2da      	uxtb	r2, r3
 80065a0:	4b1e      	ldr	r3, [pc, #120]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065a2:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80065a4:	4b1d      	ldr	r3, [pc, #116]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065a6:	795a      	ldrb	r2, [r3, #5]
 80065a8:	4b1c      	ldr	r3, [pc, #112]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065aa:	799b      	ldrb	r3, [r3, #6]
 80065ac:	4619      	mov	r1, r3
 80065ae:	4610      	mov	r0, r2
 80065b0:	f000 f8d6 	bl	8006760 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 80065b4:	683b      	ldr	r3, [r7, #0]
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b0a      	cmp	r3, #10
 80065ba:	d10e      	bne.n	80065da <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 80065bc:	4b17      	ldr	r3, [pc, #92]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065be:	799b      	ldrb	r3, [r3, #6]
 80065c0:	3301      	adds	r3, #1
 80065c2:	b2da      	uxtb	r2, r3
 80065c4:	4b15      	ldr	r3, [pc, #84]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065c6:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80065c8:	4b14      	ldr	r3, [pc, #80]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065ca:	795a      	ldrb	r2, [r3, #5]
 80065cc:	4b13      	ldr	r3, [pc, #76]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065ce:	799b      	ldrb	r3, [r3, #6]
 80065d0:	4619      	mov	r1, r3
 80065d2:	4610      	mov	r0, r2
 80065d4:	f000 f8c4 	bl	8006760 <TM_HD44780_CursorSet>
 80065d8:	e015      	b.n	8006606 <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 80065da:	683b      	ldr	r3, [r7, #0]
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b0d      	cmp	r3, #13
 80065e0:	d106      	bne.n	80065f0 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 80065e2:	4b0e      	ldr	r3, [pc, #56]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065e4:	799b      	ldrb	r3, [r3, #6]
 80065e6:	4619      	mov	r1, r3
 80065e8:	2000      	movs	r0, #0
 80065ea:	f000 f8b9 	bl	8006760 <TM_HD44780_CursorSet>
 80065ee:	e00a      	b.n	8006606 <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	781b      	ldrb	r3, [r3, #0]
 80065f4:	4618      	mov	r0, r3
 80065f6:	f000 f845 	bl	8006684 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 80065fa:	4b08      	ldr	r3, [pc, #32]	; (800661c <TM_HD44780_Puts+0xb4>)
 80065fc:	795b      	ldrb	r3, [r3, #5]
 80065fe:	3301      	adds	r3, #1
 8006600:	b2da      	uxtb	r2, r3
 8006602:	4b06      	ldr	r3, [pc, #24]	; (800661c <TM_HD44780_Puts+0xb4>)
 8006604:	715a      	strb	r2, [r3, #5]
		}
		str++;
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	3301      	adds	r3, #1
 800660a:	603b      	str	r3, [r7, #0]
	while (*str) {
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d1b8      	bne.n	8006586 <TM_HD44780_Puts+0x1e>
	}
}
 8006614:	bf00      	nop
 8006616:	3708      	adds	r7, #8
 8006618:	46bd      	mov	sp, r7
 800661a:	bd80      	pop	{r7, pc}
 800661c:	20004038 	.word	0x20004038

08006620 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8006620:	b580      	push	{r7, lr}
 8006622:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8006624:	4b08      	ldr	r3, [pc, #32]	; (8006648 <TM_HD44780_DisplayOn+0x28>)
 8006626:	781b      	ldrb	r3, [r3, #0]
 8006628:	f043 0304 	orr.w	r3, r3, #4
 800662c:	b2da      	uxtb	r2, r3
 800662e:	4b06      	ldr	r3, [pc, #24]	; (8006648 <TM_HD44780_DisplayOn+0x28>)
 8006630:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8006632:	4b05      	ldr	r3, [pc, #20]	; (8006648 <TM_HD44780_DisplayOn+0x28>)
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	f043 0308 	orr.w	r3, r3, #8
 800663a:	b2db      	uxtb	r3, r3
 800663c:	4618      	mov	r0, r3
 800663e:	f000 f805 	bl	800664c <TM_HD44780_Cmd>
}
 8006642:	bf00      	nop
 8006644:	bd80      	pop	{r7, pc}
 8006646:	bf00      	nop
 8006648:	20004038 	.word	0x20004038

0800664c <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 800664c:	b580      	push	{r7, lr}
 800664e:	b082      	sub	sp, #8
 8006650:	af00      	add	r7, sp, #0
 8006652:	4603      	mov	r3, r0
 8006654:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8006656:	4b0a      	ldr	r3, [pc, #40]	; (8006680 <TM_HD44780_Cmd+0x34>)
 8006658:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800665c:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 800665e:	79fb      	ldrb	r3, [r7, #7]
 8006660:	091b      	lsrs	r3, r3, #4
 8006662:	b2db      	uxtb	r3, r3
 8006664:	4618      	mov	r0, r3
 8006666:	f000 f829 	bl	80066bc <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800666a:	79fb      	ldrb	r3, [r7, #7]
 800666c:	f003 030f 	and.w	r3, r3, #15
 8006670:	b2db      	uxtb	r3, r3
 8006672:	4618      	mov	r0, r3
 8006674:	f000 f822 	bl	80066bc <TM_HD44780_Cmd4bit>
}
 8006678:	bf00      	nop
 800667a:	3708      	adds	r7, #8
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	40020000 	.word	0x40020000

08006684 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 8006684:	b580      	push	{r7, lr}
 8006686:	b082      	sub	sp, #8
 8006688:	af00      	add	r7, sp, #0
 800668a:	4603      	mov	r3, r0
 800668c:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 800668e:	4b0a      	ldr	r3, [pc, #40]	; (80066b8 <TM_HD44780_Data+0x34>)
 8006690:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006694:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 8006696:	79fb      	ldrb	r3, [r7, #7]
 8006698:	091b      	lsrs	r3, r3, #4
 800669a:	b2db      	uxtb	r3, r3
 800669c:	4618      	mov	r0, r3
 800669e:	f000 f80d 	bl	80066bc <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 80066a2:	79fb      	ldrb	r3, [r7, #7]
 80066a4:	f003 030f 	and.w	r3, r3, #15
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	4618      	mov	r0, r3
 80066ac:	f000 f806 	bl	80066bc <TM_HD44780_Cmd4bit>
}
 80066b0:	bf00      	nop
 80066b2:	3708      	adds	r7, #8
 80066b4:	46bd      	mov	sp, r7
 80066b6:	bd80      	pop	{r7, pc}
 80066b8:	40020000 	.word	0x40020000

080066bc <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 80066bc:	b580      	push	{r7, lr}
 80066be:	b082      	sub	sp, #8
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	4603      	mov	r3, r0
 80066c4:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	TM_GPIO_SetPinValue(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 80066c6:	79fb      	ldrb	r3, [r7, #7]
 80066c8:	f003 0308 	and.w	r3, r3, #8
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d004      	beq.n	80066da <TM_HD44780_Cmd4bit+0x1e>
 80066d0:	4b20      	ldr	r3, [pc, #128]	; (8006754 <TM_HD44780_Cmd4bit+0x98>)
 80066d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80066d6:	619a      	str	r2, [r3, #24]
 80066d8:	e003      	b.n	80066e2 <TM_HD44780_Cmd4bit+0x26>
 80066da:	4b1e      	ldr	r3, [pc, #120]	; (8006754 <TM_HD44780_Cmd4bit+0x98>)
 80066dc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80066e0:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 80066e2:	79fb      	ldrb	r3, [r7, #7]
 80066e4:	f003 0304 	and.w	r3, r3, #4
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d004      	beq.n	80066f6 <TM_HD44780_Cmd4bit+0x3a>
 80066ec:	4b1a      	ldr	r3, [pc, #104]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 80066ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80066f2:	619a      	str	r2, [r3, #24]
 80066f4:	e003      	b.n	80066fe <TM_HD44780_Cmd4bit+0x42>
 80066f6:	4b18      	ldr	r3, [pc, #96]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 80066f8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80066fc:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 80066fe:	79fb      	ldrb	r3, [r7, #7]
 8006700:	f003 0302 	and.w	r3, r3, #2
 8006704:	2b00      	cmp	r3, #0
 8006706:	d003      	beq.n	8006710 <TM_HD44780_Cmd4bit+0x54>
 8006708:	4b13      	ldr	r3, [pc, #76]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 800670a:	2210      	movs	r2, #16
 800670c:	619a      	str	r2, [r3, #24]
 800670e:	e003      	b.n	8006718 <TM_HD44780_Cmd4bit+0x5c>
 8006710:	4b11      	ldr	r3, [pc, #68]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 8006712:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006716:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 8006718:	79fb      	ldrb	r3, [r7, #7]
 800671a:	f003 0301 	and.w	r3, r3, #1
 800671e:	2b00      	cmp	r3, #0
 8006720:	d003      	beq.n	800672a <TM_HD44780_Cmd4bit+0x6e>
 8006722:	4b0d      	ldr	r3, [pc, #52]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 8006724:	2220      	movs	r2, #32
 8006726:	619a      	str	r2, [r3, #24]
 8006728:	e003      	b.n	8006732 <TM_HD44780_Cmd4bit+0x76>
 800672a:	4b0b      	ldr	r3, [pc, #44]	; (8006758 <TM_HD44780_Cmd4bit+0x9c>)
 800672c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006730:	619a      	str	r2, [r3, #24]
	HD44780_E_BLINK;
 8006732:	4b0a      	ldr	r3, [pc, #40]	; (800675c <TM_HD44780_Cmd4bit+0xa0>)
 8006734:	2280      	movs	r2, #128	; 0x80
 8006736:	619a      	str	r2, [r3, #24]
 8006738:	2014      	movs	r0, #20
 800673a:	f7ff fe7f 	bl	800643c <Delay>
 800673e:	4b07      	ldr	r3, [pc, #28]	; (800675c <TM_HD44780_Cmd4bit+0xa0>)
 8006740:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006744:	619a      	str	r2, [r3, #24]
 8006746:	2014      	movs	r0, #20
 8006748:	f7ff fe78 	bl	800643c <Delay>
}
 800674c:	bf00      	nop
 800674e:	3708      	adds	r7, #8
 8006750:	46bd      	mov	sp, r7
 8006752:	bd80      	pop	{r7, pc}
 8006754:	40020000 	.word	0x40020000
 8006758:	40020400 	.word	0x40020400
 800675c:	40020800 	.word	0x40020800

08006760 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b084      	sub	sp, #16
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	460a      	mov	r2, r1
 800676a:	71fb      	strb	r3, [r7, #7]
 800676c:	4613      	mov	r3, r2
 800676e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8006770:	4b12      	ldr	r3, [pc, #72]	; (80067bc <TM_HD44780_CursorSet+0x5c>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8006776:	4b12      	ldr	r3, [pc, #72]	; (80067c0 <TM_HD44780_CursorSet+0x60>)
 8006778:	78db      	ldrb	r3, [r3, #3]
 800677a:	79ba      	ldrb	r2, [r7, #6]
 800677c:	429a      	cmp	r2, r3
 800677e:	d301      	bcc.n	8006784 <TM_HD44780_CursorSet+0x24>
		row = 0;
 8006780:	2300      	movs	r3, #0
 8006782:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8006784:	4a0e      	ldr	r2, [pc, #56]	; (80067c0 <TM_HD44780_CursorSet+0x60>)
 8006786:	79fb      	ldrb	r3, [r7, #7]
 8006788:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 800678a:	4a0d      	ldr	r2, [pc, #52]	; (80067c0 <TM_HD44780_CursorSet+0x60>)
 800678c:	79bb      	ldrb	r3, [r7, #6]
 800678e:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8006790:	79bb      	ldrb	r3, [r7, #6]
 8006792:	f107 0210 	add.w	r2, r7, #16
 8006796:	4413      	add	r3, r2
 8006798:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800679c:	79fb      	ldrb	r3, [r7, #7]
 800679e:	4413      	add	r3, r2
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	b25b      	sxtb	r3, r3
 80067a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80067a8:	b25b      	sxtb	r3, r3
 80067aa:	b2db      	uxtb	r3, r3
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7ff ff4d 	bl	800664c <TM_HD44780_Cmd>
}
 80067b2:	bf00      	nop
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	08006a48 	.word	0x08006a48
 80067c0:	20004038 	.word	0x20004038

080067c4 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af02      	add	r7, sp, #8
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 80067ca:	2300      	movs	r3, #0
 80067cc:	9301      	str	r3, [sp, #4]
 80067ce:	2300      	movs	r3, #0
 80067d0:	9300      	str	r3, [sp, #0]
 80067d2:	2300      	movs	r3, #0
 80067d4:	2201      	movs	r2, #1
 80067d6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80067da:	4829      	ldr	r0, [pc, #164]	; (8006880 <TM_HD44780_InitPins+0xbc>)
 80067dc:	f7ff fd5c 	bl	8006298 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_E_PORT, HD44780_E_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 80067e0:	2300      	movs	r3, #0
 80067e2:	9301      	str	r3, [sp, #4]
 80067e4:	2300      	movs	r3, #0
 80067e6:	9300      	str	r3, [sp, #0]
 80067e8:	2300      	movs	r3, #0
 80067ea:	2201      	movs	r2, #1
 80067ec:	2180      	movs	r1, #128	; 0x80
 80067ee:	4825      	ldr	r0, [pc, #148]	; (8006884 <TM_HD44780_InitPins+0xc0>)
 80067f0:	f7ff fd52 	bl	8006298 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D4_PORT, HD44780_D4_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 80067f4:	2300      	movs	r3, #0
 80067f6:	9301      	str	r3, [sp, #4]
 80067f8:	2300      	movs	r3, #0
 80067fa:	9300      	str	r3, [sp, #0]
 80067fc:	2300      	movs	r3, #0
 80067fe:	2201      	movs	r2, #1
 8006800:	2120      	movs	r1, #32
 8006802:	4821      	ldr	r0, [pc, #132]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 8006804:	f7ff fd48 	bl	8006298 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D5_PORT, HD44780_D5_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006808:	2300      	movs	r3, #0
 800680a:	9301      	str	r3, [sp, #4]
 800680c:	2300      	movs	r3, #0
 800680e:	9300      	str	r3, [sp, #0]
 8006810:	2300      	movs	r3, #0
 8006812:	2201      	movs	r2, #1
 8006814:	2110      	movs	r1, #16
 8006816:	481c      	ldr	r0, [pc, #112]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 8006818:	f7ff fd3e 	bl	8006298 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D6_PORT, HD44780_D6_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 800681c:	2300      	movs	r3, #0
 800681e:	9301      	str	r3, [sp, #4]
 8006820:	2300      	movs	r3, #0
 8006822:	9300      	str	r3, [sp, #0]
 8006824:	2300      	movs	r3, #0
 8006826:	2201      	movs	r2, #1
 8006828:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800682c:	4816      	ldr	r0, [pc, #88]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 800682e:	f7ff fd33 	bl	8006298 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D7_PORT, HD44780_D7_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006832:	2300      	movs	r3, #0
 8006834:	9301      	str	r3, [sp, #4]
 8006836:	2300      	movs	r3, #0
 8006838:	9300      	str	r3, [sp, #0]
 800683a:	2300      	movs	r3, #0
 800683c:	2201      	movs	r2, #1
 800683e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006842:	480f      	ldr	r0, [pc, #60]	; (8006880 <TM_HD44780_InitPins+0xbc>)
 8006844:	f7ff fd28 	bl	8006298 <TM_GPIO_Init>
	
	/* Set pins low */
	TM_GPIO_SetPinLow(HD44780_RS_PORT, HD44780_RS_PIN);
 8006848:	4b0d      	ldr	r3, [pc, #52]	; (8006880 <TM_HD44780_InitPins+0xbc>)
 800684a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800684e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_E_PORT, HD44780_E_PIN);
 8006850:	4b0c      	ldr	r3, [pc, #48]	; (8006884 <TM_HD44780_InitPins+0xc0>)
 8006852:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006856:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D4_PORT, HD44780_D4_PIN);
 8006858:	4b0b      	ldr	r3, [pc, #44]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 800685a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800685e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D5_PORT, HD44780_D5_PIN);
 8006860:	4b09      	ldr	r3, [pc, #36]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 8006862:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006866:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D6_PORT, HD44780_D6_PIN);
 8006868:	4b07      	ldr	r3, [pc, #28]	; (8006888 <TM_HD44780_InitPins+0xc4>)
 800686a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800686e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D7_PORT, HD44780_D7_PIN);
 8006870:	4b03      	ldr	r3, [pc, #12]	; (8006880 <TM_HD44780_InitPins+0xbc>)
 8006872:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006876:	619a      	str	r2, [r3, #24]
}
 8006878:	bf00      	nop
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	40020000 	.word	0x40020000
 8006884:	40020800 	.word	0x40020800
 8006888:	40020400 	.word	0x40020400

0800688c <__libc_init_array>:
 800688c:	b570      	push	{r4, r5, r6, lr}
 800688e:	4e0d      	ldr	r6, [pc, #52]	; (80068c4 <__libc_init_array+0x38>)
 8006890:	4c0d      	ldr	r4, [pc, #52]	; (80068c8 <__libc_init_array+0x3c>)
 8006892:	1ba4      	subs	r4, r4, r6
 8006894:	10a4      	asrs	r4, r4, #2
 8006896:	2500      	movs	r5, #0
 8006898:	42a5      	cmp	r5, r4
 800689a:	d109      	bne.n	80068b0 <__libc_init_array+0x24>
 800689c:	4e0b      	ldr	r6, [pc, #44]	; (80068cc <__libc_init_array+0x40>)
 800689e:	4c0c      	ldr	r4, [pc, #48]	; (80068d0 <__libc_init_array+0x44>)
 80068a0:	f000 f82c 	bl	80068fc <_init>
 80068a4:	1ba4      	subs	r4, r4, r6
 80068a6:	10a4      	asrs	r4, r4, #2
 80068a8:	2500      	movs	r5, #0
 80068aa:	42a5      	cmp	r5, r4
 80068ac:	d105      	bne.n	80068ba <__libc_init_array+0x2e>
 80068ae:	bd70      	pop	{r4, r5, r6, pc}
 80068b0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068b4:	4798      	blx	r3
 80068b6:	3501      	adds	r5, #1
 80068b8:	e7ee      	b.n	8006898 <__libc_init_array+0xc>
 80068ba:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80068be:	4798      	blx	r3
 80068c0:	3501      	adds	r5, #1
 80068c2:	e7f2      	b.n	80068aa <__libc_init_array+0x1e>
 80068c4:	08006a6c 	.word	0x08006a6c
 80068c8:	08006a6c 	.word	0x08006a6c
 80068cc:	08006a6c 	.word	0x08006a6c
 80068d0:	08006a70 	.word	0x08006a70

080068d4 <memcpy>:
 80068d4:	b510      	push	{r4, lr}
 80068d6:	1e43      	subs	r3, r0, #1
 80068d8:	440a      	add	r2, r1
 80068da:	4291      	cmp	r1, r2
 80068dc:	d100      	bne.n	80068e0 <memcpy+0xc>
 80068de:	bd10      	pop	{r4, pc}
 80068e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80068e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80068e8:	e7f7      	b.n	80068da <memcpy+0x6>

080068ea <memset>:
 80068ea:	4402      	add	r2, r0
 80068ec:	4603      	mov	r3, r0
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d100      	bne.n	80068f4 <memset+0xa>
 80068f2:	4770      	bx	lr
 80068f4:	f803 1b01 	strb.w	r1, [r3], #1
 80068f8:	e7f9      	b.n	80068ee <memset+0x4>
	...

080068fc <_init>:
 80068fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068fe:	bf00      	nop
 8006900:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006902:	bc08      	pop	{r3}
 8006904:	469e      	mov	lr, r3
 8006906:	4770      	bx	lr

08006908 <_fini>:
 8006908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690a:	bf00      	nop
 800690c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690e:	bc08      	pop	{r3}
 8006910:	469e      	mov	lr, r3
 8006912:	4770      	bx	lr
