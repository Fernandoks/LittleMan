
LittleMan2_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bc8  08007bc8  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08007bc8  08007bc8  00017bc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bd0  08007bd0  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bd0  08007bd0  00017bd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bd4  08007bd4  00017bd4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08007bd8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040ec  200000a4  08007c7c  000200a4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004190  08007c7c  00024190  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cb51  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000408e  00000000  00000000  0003cc25  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001680  00000000  00000000  00040cb8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000014a8  00000000  00000000  00042338  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000259ee  00000000  00000000  000437e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001342e  00000000  00000000  000691ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000df2a7  00000000  00000000  0007c5fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0015b8a3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000636c  00000000  00000000  0015b920  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000a4 	.word	0x200000a4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080079b0 	.word	0x080079b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000a8 	.word	0x200000a8
 800020c:	080079b0 	.word	0x080079b0

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b972 	b.w	80005bc <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	4688      	mov	r8, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d14b      	bne.n	8000396 <__udivmoddi4+0xa6>
 80002fe:	428a      	cmp	r2, r1
 8000300:	4615      	mov	r5, r2
 8000302:	d967      	bls.n	80003d4 <__udivmoddi4+0xe4>
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0720 	rsb	r7, r2, #32
 800030e:	fa01 f302 	lsl.w	r3, r1, r2
 8000312:	fa20 f707 	lsr.w	r7, r0, r7
 8000316:	4095      	lsls	r5, r2
 8000318:	ea47 0803 	orr.w	r8, r7, r3
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbb8 f7fe 	udiv	r7, r8, lr
 8000328:	fa1f fc85 	uxth.w	ip, r5
 800032c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000330:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000334:	fb07 f10c 	mul.w	r1, r7, ip
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18eb      	adds	r3, r5, r3
 800033e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000342:	f080 811b 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8118 	bls.w	800057c <__udivmoddi4+0x28c>
 800034c:	3f02      	subs	r7, #2
 800034e:	442b      	add	r3, r5
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0fe 	udiv	r0, r3, lr
 8000358:	fb0e 3310 	mls	r3, lr, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fc0c 	mul.w	ip, r0, ip
 8000364:	45a4      	cmp	ip, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	192c      	adds	r4, r5, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8107 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000372:	45a4      	cmp	ip, r4
 8000374:	f240 8104 	bls.w	8000580 <__udivmoddi4+0x290>
 8000378:	3802      	subs	r0, #2
 800037a:	442c      	add	r4, r5
 800037c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000380:	eba4 040c 	sub.w	r4, r4, ip
 8000384:	2700      	movs	r7, #0
 8000386:	b11e      	cbz	r6, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c6 4300 	strd	r4, r3, [r6]
 8000390:	4639      	mov	r1, r7
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d909      	bls.n	80003ae <__udivmoddi4+0xbe>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80eb 	beq.w	8000576 <__udivmoddi4+0x286>
 80003a0:	2700      	movs	r7, #0
 80003a2:	e9c6 0100 	strd	r0, r1, [r6]
 80003a6:	4638      	mov	r0, r7
 80003a8:	4639      	mov	r1, r7
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	fab3 f783 	clz	r7, r3
 80003b2:	2f00      	cmp	r7, #0
 80003b4:	d147      	bne.n	8000446 <__udivmoddi4+0x156>
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d302      	bcc.n	80003c0 <__udivmoddi4+0xd0>
 80003ba:	4282      	cmp	r2, r0
 80003bc:	f200 80fa 	bhi.w	80005b4 <__udivmoddi4+0x2c4>
 80003c0:	1a84      	subs	r4, r0, r2
 80003c2:	eb61 0303 	sbc.w	r3, r1, r3
 80003c6:	2001      	movs	r0, #1
 80003c8:	4698      	mov	r8, r3
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	d0e0      	beq.n	8000390 <__udivmoddi4+0xa0>
 80003ce:	e9c6 4800 	strd	r4, r8, [r6]
 80003d2:	e7dd      	b.n	8000390 <__udivmoddi4+0xa0>
 80003d4:	b902      	cbnz	r2, 80003d8 <__udivmoddi4+0xe8>
 80003d6:	deff      	udf	#255	; 0xff
 80003d8:	fab2 f282 	clz	r2, r2
 80003dc:	2a00      	cmp	r2, #0
 80003de:	f040 808f 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e2:	1b49      	subs	r1, r1, r5
 80003e4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003e8:	fa1f f885 	uxth.w	r8, r5
 80003ec:	2701      	movs	r7, #1
 80003ee:	fbb1 fcfe 	udiv	ip, r1, lr
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003f8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003fc:	fb08 f10c 	mul.w	r1, r8, ip
 8000400:	4299      	cmp	r1, r3
 8000402:	d907      	bls.n	8000414 <__udivmoddi4+0x124>
 8000404:	18eb      	adds	r3, r5, r3
 8000406:	f10c 30ff 	add.w	r0, ip, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4299      	cmp	r1, r3
 800040e:	f200 80cd 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 8000412:	4684      	mov	ip, r0
 8000414:	1a59      	subs	r1, r3, r1
 8000416:	b2a3      	uxth	r3, r4
 8000418:	fbb1 f0fe 	udiv	r0, r1, lr
 800041c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000420:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000424:	fb08 f800 	mul.w	r8, r8, r0
 8000428:	45a0      	cmp	r8, r4
 800042a:	d907      	bls.n	800043c <__udivmoddi4+0x14c>
 800042c:	192c      	adds	r4, r5, r4
 800042e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x14a>
 8000434:	45a0      	cmp	r8, r4
 8000436:	f200 80b6 	bhi.w	80005a6 <__udivmoddi4+0x2b6>
 800043a:	4618      	mov	r0, r3
 800043c:	eba4 0408 	sub.w	r4, r4, r8
 8000440:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000444:	e79f      	b.n	8000386 <__udivmoddi4+0x96>
 8000446:	f1c7 0c20 	rsb	ip, r7, #32
 800044a:	40bb      	lsls	r3, r7
 800044c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000450:	ea4e 0e03 	orr.w	lr, lr, r3
 8000454:	fa01 f407 	lsl.w	r4, r1, r7
 8000458:	fa20 f50c 	lsr.w	r5, r0, ip
 800045c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000460:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000464:	4325      	orrs	r5, r4
 8000466:	fbb3 f9f8 	udiv	r9, r3, r8
 800046a:	0c2c      	lsrs	r4, r5, #16
 800046c:	fb08 3319 	mls	r3, r8, r9, r3
 8000470:	fa1f fa8e 	uxth.w	sl, lr
 8000474:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000478:	fb09 f40a 	mul.w	r4, r9, sl
 800047c:	429c      	cmp	r4, r3
 800047e:	fa02 f207 	lsl.w	r2, r2, r7
 8000482:	fa00 f107 	lsl.w	r1, r0, r7
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1e 0303 	adds.w	r3, lr, r3
 800048c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000490:	f080 8087 	bcs.w	80005a2 <__udivmoddi4+0x2b2>
 8000494:	429c      	cmp	r4, r3
 8000496:	f240 8084 	bls.w	80005a2 <__udivmoddi4+0x2b2>
 800049a:	f1a9 0902 	sub.w	r9, r9, #2
 800049e:	4473      	add	r3, lr
 80004a0:	1b1b      	subs	r3, r3, r4
 80004a2:	b2ad      	uxth	r5, r5
 80004a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004a8:	fb08 3310 	mls	r3, r8, r0, r3
 80004ac:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004b0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004b4:	45a2      	cmp	sl, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1e 0404 	adds.w	r4, lr, r4
 80004bc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c0:	d26b      	bcs.n	800059a <__udivmoddi4+0x2aa>
 80004c2:	45a2      	cmp	sl, r4
 80004c4:	d969      	bls.n	800059a <__udivmoddi4+0x2aa>
 80004c6:	3802      	subs	r0, #2
 80004c8:	4474      	add	r4, lr
 80004ca:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ce:	fba0 8902 	umull	r8, r9, r0, r2
 80004d2:	eba4 040a 	sub.w	r4, r4, sl
 80004d6:	454c      	cmp	r4, r9
 80004d8:	46c2      	mov	sl, r8
 80004da:	464b      	mov	r3, r9
 80004dc:	d354      	bcc.n	8000588 <__udivmoddi4+0x298>
 80004de:	d051      	beq.n	8000584 <__udivmoddi4+0x294>
 80004e0:	2e00      	cmp	r6, #0
 80004e2:	d069      	beq.n	80005b8 <__udivmoddi4+0x2c8>
 80004e4:	ebb1 050a 	subs.w	r5, r1, sl
 80004e8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ec:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004f0:	40fd      	lsrs	r5, r7
 80004f2:	40fc      	lsrs	r4, r7
 80004f4:	ea4c 0505 	orr.w	r5, ip, r5
 80004f8:	e9c6 5400 	strd	r5, r4, [r6]
 80004fc:	2700      	movs	r7, #0
 80004fe:	e747      	b.n	8000390 <__udivmoddi4+0xa0>
 8000500:	f1c2 0320 	rsb	r3, r2, #32
 8000504:	fa20 f703 	lsr.w	r7, r0, r3
 8000508:	4095      	lsls	r5, r2
 800050a:	fa01 f002 	lsl.w	r0, r1, r2
 800050e:	fa21 f303 	lsr.w	r3, r1, r3
 8000512:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000516:	4338      	orrs	r0, r7
 8000518:	0c01      	lsrs	r1, r0, #16
 800051a:	fbb3 f7fe 	udiv	r7, r3, lr
 800051e:	fa1f f885 	uxth.w	r8, r5
 8000522:	fb0e 3317 	mls	r3, lr, r7, r3
 8000526:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800052a:	fb07 f308 	mul.w	r3, r7, r8
 800052e:	428b      	cmp	r3, r1
 8000530:	fa04 f402 	lsl.w	r4, r4, r2
 8000534:	d907      	bls.n	8000546 <__udivmoddi4+0x256>
 8000536:	1869      	adds	r1, r5, r1
 8000538:	f107 3cff 	add.w	ip, r7, #4294967295
 800053c:	d22f      	bcs.n	800059e <__udivmoddi4+0x2ae>
 800053e:	428b      	cmp	r3, r1
 8000540:	d92d      	bls.n	800059e <__udivmoddi4+0x2ae>
 8000542:	3f02      	subs	r7, #2
 8000544:	4429      	add	r1, r5
 8000546:	1acb      	subs	r3, r1, r3
 8000548:	b281      	uxth	r1, r0
 800054a:	fbb3 f0fe 	udiv	r0, r3, lr
 800054e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000552:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000556:	fb00 f308 	mul.w	r3, r0, r8
 800055a:	428b      	cmp	r3, r1
 800055c:	d907      	bls.n	800056e <__udivmoddi4+0x27e>
 800055e:	1869      	adds	r1, r5, r1
 8000560:	f100 3cff 	add.w	ip, r0, #4294967295
 8000564:	d217      	bcs.n	8000596 <__udivmoddi4+0x2a6>
 8000566:	428b      	cmp	r3, r1
 8000568:	d915      	bls.n	8000596 <__udivmoddi4+0x2a6>
 800056a:	3802      	subs	r0, #2
 800056c:	4429      	add	r1, r5
 800056e:	1ac9      	subs	r1, r1, r3
 8000570:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000574:	e73b      	b.n	80003ee <__udivmoddi4+0xfe>
 8000576:	4637      	mov	r7, r6
 8000578:	4630      	mov	r0, r6
 800057a:	e709      	b.n	8000390 <__udivmoddi4+0xa0>
 800057c:	4607      	mov	r7, r0
 800057e:	e6e7      	b.n	8000350 <__udivmoddi4+0x60>
 8000580:	4618      	mov	r0, r3
 8000582:	e6fb      	b.n	800037c <__udivmoddi4+0x8c>
 8000584:	4541      	cmp	r1, r8
 8000586:	d2ab      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 8000588:	ebb8 0a02 	subs.w	sl, r8, r2
 800058c:	eb69 020e 	sbc.w	r2, r9, lr
 8000590:	3801      	subs	r0, #1
 8000592:	4613      	mov	r3, r2
 8000594:	e7a4      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000596:	4660      	mov	r0, ip
 8000598:	e7e9      	b.n	800056e <__udivmoddi4+0x27e>
 800059a:	4618      	mov	r0, r3
 800059c:	e795      	b.n	80004ca <__udivmoddi4+0x1da>
 800059e:	4667      	mov	r7, ip
 80005a0:	e7d1      	b.n	8000546 <__udivmoddi4+0x256>
 80005a2:	4681      	mov	r9, r0
 80005a4:	e77c      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a6:	3802      	subs	r0, #2
 80005a8:	442c      	add	r4, r5
 80005aa:	e747      	b.n	800043c <__udivmoddi4+0x14c>
 80005ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80005b0:	442b      	add	r3, r5
 80005b2:	e72f      	b.n	8000414 <__udivmoddi4+0x124>
 80005b4:	4638      	mov	r0, r7
 80005b6:	e708      	b.n	80003ca <__udivmoddi4+0xda>
 80005b8:	4637      	mov	r7, r6
 80005ba:	e6e9      	b.n	8000390 <__udivmoddi4+0xa0>

080005bc <__aeabi_idiv0>:
 80005bc:	4770      	bx	lr
 80005be:	bf00      	nop

080005c0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005c0:	b480      	push	{r7}
 80005c2:	b085      	sub	sp, #20
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	4a07      	ldr	r2, [pc, #28]	; (80005ec <vApplicationGetIdleTaskMemory+0x2c>)
 80005d0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4a06      	ldr	r2, [pc, #24]	; (80005f0 <vApplicationGetIdleTaskMemory+0x30>)
 80005d6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	2280      	movs	r2, #128	; 0x80
 80005dc:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80005de:	bf00      	nop
 80005e0:	3714      	adds	r7, #20
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	200000c0 	.word	0x200000c0
 80005f0:	20000114 	.word	0x20000114

080005f4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80005fc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000600:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 8000604:	f003 0301 	and.w	r3, r3, #1
 8000608:	2b00      	cmp	r3, #0
 800060a:	d013      	beq.n	8000634 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 800060c:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000610:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 8000614:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000618:	2b00      	cmp	r3, #0
 800061a:	d00b      	beq.n	8000634 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 800061c:	e000      	b.n	8000620 <ITM_SendChar+0x2c>
    {
      __NOP();
 800061e:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000620:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	2b00      	cmp	r3, #0
 8000628:	d0f9      	beq.n	800061e <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800062a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800062e:	687a      	ldr	r2, [r7, #4]
 8000630:	b2d2      	uxtb	r2, r2
 8000632:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000634:	687b      	ldr	r3, [r7, #4]
}
 8000636:	4618      	mov	r0, r3
 8000638:	370c      	adds	r7, #12
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000644:	b5b0      	push	{r4, r5, r7, lr}
 8000646:	b0a0      	sub	sp, #128	; 0x80
 8000648:	af00      	add	r7, sp, #0


  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800064a:	f000 fd71 	bl	8001130 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800064e:	f000 f89f 	bl	8000790 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000652:	f000 f98b 	bl	800096c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000656:	f000 f95f 	bl	8000918 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 800065a:	f000 f90b 	bl	8000874 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */


  /* Initialize LCD 20 cols x 4 rows */
  TM_HD44780_Init(16, 2);
 800065e:	2102      	movs	r1, #2
 8000660:	2010      	movs	r0, #16
 8000662:	f006 f87d 	bl	8006760 <TM_HD44780_Init>
  /* Put string to LCD */
  TM_HD44780_Puts(0, 0, "Fernando");
 8000666:	4a3c      	ldr	r2, [pc, #240]	; (8000758 <main+0x114>)
 8000668:	2100      	movs	r1, #0
 800066a:	2000      	movs	r0, #0
 800066c:	f006 f8ec 	bl	8006848 <TM_HD44780_Puts>
  TM_HD44780_Puts(0, 1, "16x2 HD44780 LCD");
 8000670:	4a3a      	ldr	r2, [pc, #232]	; (800075c <main+0x118>)
 8000672:	2101      	movs	r1, #1
 8000674:	2000      	movs	r0, #0
 8000676:	f006 f8e7 	bl	8006848 <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(3000);
 800067a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800067e:	f005 ff45 	bl	800650c <HAL_Delay>
  /* Clear LCD */
  TM_HD44780_Clear();
 8000682:	f006 f8d5 	bl	8006830 <TM_HD44780_Clear>
  /* Write new text */
  TM_HD44780_Puts(6, 1, "CLEARED!");
 8000686:	4a36      	ldr	r2, [pc, #216]	; (8000760 <main+0x11c>)
 8000688:	2101      	movs	r1, #1
 800068a:	2006      	movs	r0, #6
 800068c:	f006 f8dc 	bl	8006848 <TM_HD44780_Puts>
  /* Wait a little */
  HAL_Delay(1000);
 8000690:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000694:	f005 ff3a 	bl	800650c <HAL_Delay>

  printf("SVW TEST");
 8000698:	4832      	ldr	r0, [pc, #200]	; (8000764 <main+0x120>)
 800069a:	f006 fb4d 	bl	8006d38 <iprintf>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  osMessageQDef(adcqueue, 10, uint16_t);
 800069e:	4b32      	ldr	r3, [pc, #200]	; (8000768 <main+0x124>)
 80006a0:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80006a4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80006a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  ADCQueue = osMessageCreate (osMessageQ(adcqueue), NULL);
 80006aa:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80006ae:	2100      	movs	r1, #0
 80006b0:	4618      	mov	r0, r3
 80006b2:	f003 fcd4 	bl	800405e <osMessageCreate>
 80006b6:	4602      	mov	r2, r0
 80006b8:	4b2c      	ldr	r3, [pc, #176]	; (800076c <main+0x128>)
 80006ba:	601a      	str	r2, [r3, #0]
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 80006bc:	4b2c      	ldr	r3, [pc, #176]	; (8000770 <main+0x12c>)
 80006be:	f107 0454 	add.w	r4, r7, #84	; 0x54
 80006c2:	461d      	mov	r5, r3
 80006c4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006c6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006c8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006cc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80006d0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f003 fc61 	bl	8003f9e <osThreadCreate>
 80006dc:	4602      	mov	r2, r0
 80006de:	4b25      	ldr	r3, [pc, #148]	; (8000774 <main+0x130>)
 80006e0:	601a      	str	r2, [r3, #0]

  /* definition and creation of Task2 */
  osThreadDef(Task2, Task2Init, osPriorityNormal, 0, 128);
 80006e2:	4b25      	ldr	r3, [pc, #148]	; (8000778 <main+0x134>)
 80006e4:	f107 0438 	add.w	r4, r7, #56	; 0x38
 80006e8:	461d      	mov	r5, r3
 80006ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006f2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  Task2Handle = osThreadCreate(osThread(Task2), NULL);
 80006f6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80006fa:	2100      	movs	r1, #0
 80006fc:	4618      	mov	r0, r3
 80006fe:	f003 fc4e 	bl	8003f9e <osThreadCreate>
 8000702:	4602      	mov	r2, r0
 8000704:	4b1d      	ldr	r3, [pc, #116]	; (800077c <main+0x138>)
 8000706:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */

  /* TaskUARTProcess Creation */
  osThreadDef(TaskUARTProcess, TaskUARTProcessInit, osPriorityNormal, 0, 128);
 8000708:	4b1d      	ldr	r3, [pc, #116]	; (8000780 <main+0x13c>)
 800070a:	f107 041c 	add.w	r4, r7, #28
 800070e:	461d      	mov	r5, r3
 8000710:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000712:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000714:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000718:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskUARTProcessHandler = osThreadCreate(osThread(TaskUARTProcess), NULL);
 800071c:	f107 031c 	add.w	r3, r7, #28
 8000720:	2100      	movs	r1, #0
 8000722:	4618      	mov	r0, r3
 8000724:	f003 fc3b 	bl	8003f9e <osThreadCreate>
 8000728:	4602      	mov	r2, r0
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0x140>)
 800072c:	601a      	str	r2, [r3, #0]

  /* TaskDisplay Creation */
  osThreadDef(TaskDisplay, TaskDisplayInit, osPriorityNormal, 0, 128);
 800072e:	4b16      	ldr	r3, [pc, #88]	; (8000788 <main+0x144>)
 8000730:	463c      	mov	r4, r7
 8000732:	461d      	mov	r5, r3
 8000734:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000736:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000738:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800073c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TaskDisplayHandler = osThreadCreate(osThread(TaskDisplay), NULL);
 8000740:	463b      	mov	r3, r7
 8000742:	2100      	movs	r1, #0
 8000744:	4618      	mov	r0, r3
 8000746:	f003 fc2a 	bl	8003f9e <osThreadCreate>
 800074a:	4602      	mov	r2, r0
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <main+0x148>)
 800074e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000750:	f003 fc1e 	bl	8003f90 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000754:	e7fe      	b.n	8000754 <main+0x110>
 8000756:	bf00      	nop
 8000758:	080079c8 	.word	0x080079c8
 800075c:	080079d4 	.word	0x080079d4
 8000760:	080079e8 	.word	0x080079e8
 8000764:	080079f4 	.word	0x080079f4
 8000768:	08007a00 	.word	0x08007a00
 800076c:	20004104 	.word	0x20004104
 8000770:	08007a1c 	.word	0x08007a1c
 8000774:	200040b0 	.word	0x200040b0
 8000778:	08007a40 	.word	0x08007a40
 800077c:	20004108 	.word	0x20004108
 8000780:	08007a6c 	.word	0x08007a6c
 8000784:	20004100 	.word	0x20004100
 8000788:	08007a94 	.word	0x08007a94
 800078c:	200040b4 	.word	0x200040b4

08000790 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b094      	sub	sp, #80	; 0x50
 8000794:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000796:	f107 031c 	add.w	r3, r7, #28
 800079a:	2234      	movs	r2, #52	; 0x34
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f006 fa19 	bl	8006bd6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a4:	f107 0308 	add.w	r3, r7, #8
 80007a8:	2200      	movs	r2, #0
 80007aa:	601a      	str	r2, [r3, #0]
 80007ac:	605a      	str	r2, [r3, #4]
 80007ae:	609a      	str	r2, [r3, #8]
 80007b0:	60da      	str	r2, [r3, #12]
 80007b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b4:	2300      	movs	r3, #0
 80007b6:	607b      	str	r3, [r7, #4]
 80007b8:	4b2c      	ldr	r3, [pc, #176]	; (800086c <SystemClock_Config+0xdc>)
 80007ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007bc:	4a2b      	ldr	r2, [pc, #172]	; (800086c <SystemClock_Config+0xdc>)
 80007be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007c2:	6413      	str	r3, [r2, #64]	; 0x40
 80007c4:	4b29      	ldr	r3, [pc, #164]	; (800086c <SystemClock_Config+0xdc>)
 80007c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007cc:	607b      	str	r3, [r7, #4]
 80007ce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007d0:	2300      	movs	r3, #0
 80007d2:	603b      	str	r3, [r7, #0]
 80007d4:	4b26      	ldr	r3, [pc, #152]	; (8000870 <SystemClock_Config+0xe0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a25      	ldr	r2, [pc, #148]	; (8000870 <SystemClock_Config+0xe0>)
 80007da:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b23      	ldr	r3, [pc, #140]	; (8000870 <SystemClock_Config+0xe0>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007ec:	2301      	movs	r3, #1
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80007f0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80007f4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f6:	2302      	movs	r3, #2
 80007f8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000800:	2304      	movs	r3, #4
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000804:	23b4      	movs	r3, #180	; 0xb4
 8000806:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000808:	2302      	movs	r3, #2
 800080a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080c:	2302      	movs	r3, #2
 800080e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000810:	2302      	movs	r3, #2
 8000812:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000814:	f107 031c 	add.w	r3, r7, #28
 8000818:	4618      	mov	r0, r3
 800081a:	f002 f80b 	bl	8002834 <HAL_RCC_OscConfig>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000824:	f000 fa64 	bl	8000cf0 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000828:	f001 fcc8 	bl	80021bc <HAL_PWREx_EnableOverDrive>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000832:	f000 fa5d 	bl	8000cf0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000836:	230f      	movs	r3, #15
 8000838:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083a:	2302      	movs	r3, #2
 800083c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800083e:	2300      	movs	r3, #0
 8000840:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000842:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000846:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800084c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800084e:	f107 0308 	add.w	r3, r7, #8
 8000852:	2105      	movs	r1, #5
 8000854:	4618      	mov	r0, r3
 8000856:	f001 fd01 	bl	800225c <HAL_RCC_ClockConfig>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000860:	f000 fa46 	bl	8000cf0 <Error_Handler>
  }
}
 8000864:	bf00      	nop
 8000866:	3750      	adds	r7, #80	; 0x50
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}
 800086c:	40023800 	.word	0x40023800
 8000870:	40007000 	.word	0x40007000

08000874 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b084      	sub	sp, #16
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800087a:	463b      	mov	r3, r7
 800087c:	2200      	movs	r2, #0
 800087e:	601a      	str	r2, [r3, #0]
 8000880:	605a      	str	r2, [r3, #4]
 8000882:	609a      	str	r2, [r3, #8]
 8000884:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000886:	4b21      	ldr	r3, [pc, #132]	; (800090c <MX_ADC1_Init+0x98>)
 8000888:	4a21      	ldr	r2, [pc, #132]	; (8000910 <MX_ADC1_Init+0x9c>)
 800088a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800088c:	4b1f      	ldr	r3, [pc, #124]	; (800090c <MX_ADC1_Init+0x98>)
 800088e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000892:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000894:	4b1d      	ldr	r3, [pc, #116]	; (800090c <MX_ADC1_Init+0x98>)
 8000896:	2200      	movs	r2, #0
 8000898:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800089a:	4b1c      	ldr	r3, [pc, #112]	; (800090c <MX_ADC1_Init+0x98>)
 800089c:	2200      	movs	r2, #0
 800089e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008a0:	4b1a      	ldr	r3, [pc, #104]	; (800090c <MX_ADC1_Init+0x98>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008a6:	4b19      	ldr	r3, [pc, #100]	; (800090c <MX_ADC1_Init+0x98>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ae:	4b17      	ldr	r3, [pc, #92]	; (800090c <MX_ADC1_Init+0x98>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008b4:	4b15      	ldr	r3, [pc, #84]	; (800090c <MX_ADC1_Init+0x98>)
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <MX_ADC1_Init+0xa0>)
 80008b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008ba:	4b14      	ldr	r3, [pc, #80]	; (800090c <MX_ADC1_Init+0x98>)
 80008bc:	2200      	movs	r2, #0
 80008be:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80008c0:	4b12      	ldr	r3, [pc, #72]	; (800090c <MX_ADC1_Init+0x98>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008c6:	4b11      	ldr	r3, [pc, #68]	; (800090c <MX_ADC1_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <MX_ADC1_Init+0x98>)
 80008d0:	2201      	movs	r2, #1
 80008d2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008d4:	480d      	ldr	r0, [pc, #52]	; (800090c <MX_ADC1_Init+0x98>)
 80008d6:	f000 fc4d 	bl	8001174 <HAL_ADC_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 fa06 	bl	8000cf0 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008e8:	2301      	movs	r3, #1
 80008ea:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f0:	463b      	mov	r3, r7
 80008f2:	4619      	mov	r1, r3
 80008f4:	4805      	ldr	r0, [pc, #20]	; (800090c <MX_ADC1_Init+0x98>)
 80008f6:	f000 ff79 	bl	80017ec <HAL_ADC_ConfigChannel>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000900:	f000 f9f6 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000904:	bf00      	nop
 8000906:	3710      	adds	r7, #16
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200040b8 	.word	0x200040b8
 8000910:	40012000 	.word	0x40012000
 8000914:	0f000001 	.word	0x0f000001

08000918 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800091e:	4a12      	ldr	r2, [pc, #72]	; (8000968 <MX_USART2_UART_Init+0x50>)
 8000920:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000922:	4b10      	ldr	r3, [pc, #64]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000924:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000928:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800092a:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800092c:	2200      	movs	r2, #0
 800092e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000932:	2200      	movs	r2, #0
 8000934:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000936:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800093e:	220c      	movs	r2, #12
 8000940:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000942:	4b08      	ldr	r3, [pc, #32]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000944:	2200      	movs	r2, #0
 8000946:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 800094a:	2200      	movs	r2, #0
 800094c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <MX_USART2_UART_Init+0x4c>)
 8000950:	f002 fc08 	bl	8003164 <HAL_UART_Init>
 8000954:	4603      	mov	r3, r0
 8000956:	2b00      	cmp	r3, #0
 8000958:	d001      	beq.n	800095e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800095a:	f000 f9c9 	bl	8000cf0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800095e:	bf00      	nop
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	2000410c 	.word	0x2000410c
 8000968:	40004400 	.word	0x40004400

0800096c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b08a      	sub	sp, #40	; 0x28
 8000970:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	605a      	str	r2, [r3, #4]
 800097c:	609a      	str	r2, [r3, #8]
 800097e:	60da      	str	r2, [r3, #12]
 8000980:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000982:	2300      	movs	r3, #0
 8000984:	613b      	str	r3, [r7, #16]
 8000986:	4b2d      	ldr	r3, [pc, #180]	; (8000a3c <MX_GPIO_Init+0xd0>)
 8000988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098a:	4a2c      	ldr	r2, [pc, #176]	; (8000a3c <MX_GPIO_Init+0xd0>)
 800098c:	f043 0304 	orr.w	r3, r3, #4
 8000990:	6313      	str	r3, [r2, #48]	; 0x30
 8000992:	4b2a      	ldr	r3, [pc, #168]	; (8000a3c <MX_GPIO_Init+0xd0>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	f003 0304 	and.w	r3, r3, #4
 800099a:	613b      	str	r3, [r7, #16]
 800099c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60fb      	str	r3, [r7, #12]
 80009a2:	4b26      	ldr	r3, [pc, #152]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a25      	ldr	r2, [pc, #148]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b23      	ldr	r3, [pc, #140]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
 80009be:	4b1f      	ldr	r3, [pc, #124]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a1e      	ldr	r2, [pc, #120]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b1c      	ldr	r3, [pc, #112]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	60bb      	str	r3, [r7, #8]
 80009d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	607b      	str	r3, [r7, #4]
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a17      	ldr	r2, [pc, #92]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_GPIO_Init+0xd0>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	2120      	movs	r1, #32
 80009f6:	4812      	ldr	r0, [pc, #72]	; (8000a40 <MX_GPIO_Init+0xd4>)
 80009f8:	f001 fbc6 	bl	8002188 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <MX_GPIO_Init+0xd8>)
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a06:	2300      	movs	r3, #0
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000a0a:	f107 0314 	add.w	r3, r7, #20
 8000a0e:	4619      	mov	r1, r3
 8000a10:	480d      	ldr	r0, [pc, #52]	; (8000a48 <MX_GPIO_Init+0xdc>)
 8000a12:	f001 fa27 	bl	8001e64 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000a16:	2320      	movs	r3, #32
 8000a18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a22:	2300      	movs	r3, #0
 8000a24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000a26:	f107 0314 	add.w	r3, r7, #20
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	4804      	ldr	r0, [pc, #16]	; (8000a40 <MX_GPIO_Init+0xd4>)
 8000a2e:	f001 fa19 	bl	8001e64 <HAL_GPIO_Init>

}
 8000a32:	bf00      	nop
 8000a34:	3728      	adds	r7, #40	; 0x28
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	40023800 	.word	0x40023800
 8000a40:	40020000 	.word	0x40020000
 8000a44:	10210000 	.word	0x10210000
 8000a48:	40020800 	.word	0x40020800

08000a4c <_write>:

/* USER CODE BEGIN 4 */

int _write(int file, char *ptr, int len)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	60f8      	str	r0, [r7, #12]
 8000a54:	60b9      	str	r1, [r7, #8]
 8000a56:	607a      	str	r2, [r7, #4]
  /* Implement your write code here, this is used by puts and printf for example */
  int i=0;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	617b      	str	r3, [r7, #20]
  for(i = 0; i < len; i++)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	617b      	str	r3, [r7, #20]
 8000a60:	e009      	b.n	8000a76 <_write+0x2a>
  {
    ITM_SendChar((*ptr++));
 8000a62:	68bb      	ldr	r3, [r7, #8]
 8000a64:	1c5a      	adds	r2, r3, #1
 8000a66:	60ba      	str	r2, [r7, #8]
 8000a68:	781b      	ldrb	r3, [r3, #0]
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f7ff fdc2 	bl	80005f4 <ITM_SendChar>
  for(i = 0; i < len; i++)
 8000a70:	697b      	ldr	r3, [r7, #20]
 8000a72:	3301      	adds	r3, #1
 8000a74:	617b      	str	r3, [r7, #20]
 8000a76:	697a      	ldr	r2, [r7, #20]
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	dbf1      	blt.n	8000a62 <_write+0x16>
  }
  return len;
 8000a7e:	687b      	ldr	r3, [r7, #4]
}
 8000a80:	4618      	mov	r0, r3
 8000a82:	3718      	adds	r7, #24
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}

08000a88 <uart_send>:

void uart_send(uint8_t *data)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b084      	sub	sp, #16
 8000a8c:	af00      	add	r7, sp, #0
 8000a8e:	6078      	str	r0, [r7, #4]
	uint16_t size = (uint16_t)strlen((const char *)data);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f7ff fbbd 	bl	8000210 <strlen>
 8000a96:	4603      	mov	r3, r0
 8000a98:	81fb      	strh	r3, [r7, #14]
	HAL_UART_Transmit(&huart2, data, size, HAL_MAX_DELAY);
 8000a9a:	89fa      	ldrh	r2, [r7, #14]
 8000a9c:	f04f 33ff 	mov.w	r3, #4294967295
 8000aa0:	6879      	ldr	r1, [r7, #4]
 8000aa2:	4803      	ldr	r0, [pc, #12]	; (8000ab0 <uart_send+0x28>)
 8000aa4:	f002 fbab 	bl	80031fe <HAL_UART_Transmit>
}
 8000aa8:	bf00      	nop
 8000aaa:	3710      	adds	r7, #16
 8000aac:	46bd      	mov	sp, r7
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	2000410c 	.word	0x2000410c

08000ab4 <TaskUARTProcessInit>:


void TaskUARTProcessInit(void const * argument)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  for(;;)
  {
    osDelay(1);
 8000abc:	2001      	movs	r0, #1
 8000abe:	f003 faba 	bl	8004036 <osDelay>
 8000ac2:	e7fb      	b.n	8000abc <TaskUARTProcessInit+0x8>

08000ac4 <TaskDisplayInit>:
  }
}

void TaskDisplayInit(void const * argument)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  osEvent event;

  uint16_t ADCValuebefore = 0;
 8000acc:	2300      	movs	r3, #0
 8000ace:	82fb      	strh	r3, [r7, #22]
  uint16_t ADCValue = 0;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	82bb      	strh	r3, [r7, #20]

  HAL_ADC_Start_IT(&hadc1);
 8000ad4:	4853      	ldr	r0, [pc, #332]	; (8000c24 <TaskDisplayInit+0x160>)
 8000ad6:	f000 fc57 	bl	8001388 <HAL_ADC_Start_IT>
	 * Description: This part must detect the button press. To do so, it must debounce the button,
	 * and and consider the ADC error.
	 */

	//This get the ADC value from the ADC Queue
	event = osMessageGet(ADCQueue, 100);
 8000ada:	4b53      	ldr	r3, [pc, #332]	; (8000c28 <TaskDisplayInit+0x164>)
 8000adc:	6819      	ldr	r1, [r3, #0]
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	2264      	movs	r2, #100	; 0x64
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f003 fb23 	bl	8004130 <osMessageGet>
	if(event.status == osEventMessage)
 8000aea:	68bb      	ldr	r3, [r7, #8]
 8000aec:	2b10      	cmp	r3, #16
 8000aee:	d101      	bne.n	8000af4 <TaskDisplayInit+0x30>
	{
		ADCValue = event.value.v;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	82bb      	strh	r3, [r7, #20]
	}

	if( !((ADCValue > (ADCValuebefore + KEY_ERROR)) && (ADCValue < (ADCValuebefore - KEY_ERROR))) )
 8000af4:	8aba      	ldrh	r2, [r7, #20]
 8000af6:	8afb      	ldrh	r3, [r7, #22]
 8000af8:	3332      	adds	r3, #50	; 0x32
 8000afa:	429a      	cmp	r2, r3
 8000afc:	dd05      	ble.n	8000b0a <TaskDisplayInit+0x46>
 8000afe:	8aba      	ldrh	r2, [r7, #20]
 8000b00:	8afb      	ldrh	r3, [r7, #22]
 8000b02:	3b32      	subs	r3, #50	; 0x32
 8000b04:	429a      	cmp	r2, r3
 8000b06:	f2c0 8086 	blt.w	8000c16 <TaskDisplayInit+0x152>
	{

		if ( (ADCValue > KEY_UP_LOWER) && (ADCValue < KEY_UP_UPPER) )
 8000b0a:	8abb      	ldrh	r3, [r7, #20]
 8000b0c:	f5b3 7f0c 	cmp.w	r3, #560	; 0x230
 8000b10:	d915      	bls.n	8000b3e <TaskDisplayInit+0x7a>
 8000b12:	8abb      	ldrh	r3, [r7, #20]
 8000b14:	f5b3 7f25 	cmp.w	r3, #660	; 0x294
 8000b18:	d211      	bcs.n	8000b3e <TaskDisplayInit+0x7a>
		{
			sprintf(usart_buffer,"UP\r\n");
 8000b1a:	4b44      	ldr	r3, [pc, #272]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b1c:	4a44      	ldr	r2, [pc, #272]	; (8000c30 <TaskDisplayInit+0x16c>)
 8000b1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b22:	6018      	str	r0, [r3, #0]
 8000b24:	3304      	adds	r3, #4
 8000b26:	7019      	strb	r1, [r3, #0]
			uart_send(usart_buffer);
 8000b28:	4840      	ldr	r0, [pc, #256]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b2a:	f7ff ffad 	bl	8000a88 <uart_send>
			TM_HD44780_Clear();
 8000b2e:	f005 fe7f 	bl	8006830 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "UP");
 8000b32:	4a40      	ldr	r2, [pc, #256]	; (8000c34 <TaskDisplayInit+0x170>)
 8000b34:	2100      	movs	r1, #0
 8000b36:	2000      	movs	r0, #0
 8000b38:	f005 fe86 	bl	8006848 <TM_HD44780_Puts>
 8000b3c:	e069      	b.n	8000c12 <TaskDisplayInit+0x14e>
		}
		else if (( (ADCValue > KEY_DOWN_LOWER) && (ADCValue < KEY_DOWN_UPPER) ))
 8000b3e:	8abb      	ldrh	r3, [r7, #20]
 8000b40:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8000b44:	4293      	cmp	r3, r2
 8000b46:	d918      	bls.n	8000b7a <TaskDisplayInit+0xb6>
 8000b48:	8abb      	ldrh	r3, [r7, #20]
 8000b4a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 8000b4e:	d214      	bcs.n	8000b7a <TaskDisplayInit+0xb6>
		{
			sprintf(usart_buffer,"DOWN\r\n");
 8000b50:	4b36      	ldr	r3, [pc, #216]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b52:	4a39      	ldr	r2, [pc, #228]	; (8000c38 <TaskDisplayInit+0x174>)
 8000b54:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b58:	6018      	str	r0, [r3, #0]
 8000b5a:	3304      	adds	r3, #4
 8000b5c:	8019      	strh	r1, [r3, #0]
 8000b5e:	3302      	adds	r3, #2
 8000b60:	0c0a      	lsrs	r2, r1, #16
 8000b62:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000b64:	4831      	ldr	r0, [pc, #196]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b66:	f7ff ff8f 	bl	8000a88 <uart_send>
			TM_HD44780_Clear();
 8000b6a:	f005 fe61 	bl	8006830 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "DOWN");
 8000b6e:	4a33      	ldr	r2, [pc, #204]	; (8000c3c <TaskDisplayInit+0x178>)
 8000b70:	2100      	movs	r1, #0
 8000b72:	2000      	movs	r0, #0
 8000b74:	f005 fe68 	bl	8006848 <TM_HD44780_Puts>
 8000b78:	e04b      	b.n	8000c12 <TaskDisplayInit+0x14e>
		}
		else if (( (ADCValue > KEY_RIGHT_LOWER) && (ADCValue < KEY_RIGHT_UPPER) ))
 8000b7a:	8abb      	ldrh	r3, [r7, #20]
 8000b7c:	2b31      	cmp	r3, #49	; 0x31
 8000b7e:	d810      	bhi.n	8000ba2 <TaskDisplayInit+0xde>
		{
			sprintf(usart_buffer,"RIGHT\r\n");
 8000b80:	4b2a      	ldr	r3, [pc, #168]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b82:	4a2f      	ldr	r2, [pc, #188]	; (8000c40 <TaskDisplayInit+0x17c>)
 8000b84:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000b88:	e883 0003 	stmia.w	r3, {r0, r1}
			uart_send(usart_buffer);
 8000b8c:	4827      	ldr	r0, [pc, #156]	; (8000c2c <TaskDisplayInit+0x168>)
 8000b8e:	f7ff ff7b 	bl	8000a88 <uart_send>
			TM_HD44780_Clear();
 8000b92:	f005 fe4d 	bl	8006830 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "RIGHT");
 8000b96:	4a2b      	ldr	r2, [pc, #172]	; (8000c44 <TaskDisplayInit+0x180>)
 8000b98:	2100      	movs	r1, #0
 8000b9a:	2000      	movs	r0, #0
 8000b9c:	f005 fe54 	bl	8006848 <TM_HD44780_Puts>
 8000ba0:	e037      	b.n	8000c12 <TaskDisplayInit+0x14e>
		}
		else if (( (ADCValue > KEY_LEFT_LOWER) && (ADCValue < KEY_LEFT_UPPER) ))
 8000ba2:	8abb      	ldrh	r3, [r7, #20]
 8000ba4:	f640 126a 	movw	r2, #2410	; 0x96a
 8000ba8:	4293      	cmp	r3, r2
 8000baa:	d919      	bls.n	8000be0 <TaskDisplayInit+0x11c>
 8000bac:	8abb      	ldrh	r3, [r7, #20]
 8000bae:	f640 12cd 	movw	r2, #2509	; 0x9cd
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d814      	bhi.n	8000be0 <TaskDisplayInit+0x11c>
		{
			sprintf(usart_buffer,"LEFT\r\n");
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <TaskDisplayInit+0x168>)
 8000bb8:	4a23      	ldr	r2, [pc, #140]	; (8000c48 <TaskDisplayInit+0x184>)
 8000bba:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bbe:	6018      	str	r0, [r3, #0]
 8000bc0:	3304      	adds	r3, #4
 8000bc2:	8019      	strh	r1, [r3, #0]
 8000bc4:	3302      	adds	r3, #2
 8000bc6:	0c0a      	lsrs	r2, r1, #16
 8000bc8:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000bca:	4818      	ldr	r0, [pc, #96]	; (8000c2c <TaskDisplayInit+0x168>)
 8000bcc:	f7ff ff5c 	bl	8000a88 <uart_send>
			TM_HD44780_Clear();
 8000bd0:	f005 fe2e 	bl	8006830 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "LEFT");
 8000bd4:	4a1d      	ldr	r2, [pc, #116]	; (8000c4c <TaskDisplayInit+0x188>)
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f005 fe35 	bl	8006848 <TM_HD44780_Puts>
 8000bde:	e018      	b.n	8000c12 <TaskDisplayInit+0x14e>
		}
		else if (( (ADCValue > KEY_SELECT_LOWER) && (ADCValue < KEY_SELECT_UPPER) ))
 8000be0:	8abb      	ldrh	r3, [r7, #20]
 8000be2:	f640 62d8 	movw	r2, #3800	; 0xed8
 8000be6:	4293      	cmp	r3, r2
 8000be8:	d913      	bls.n	8000c12 <TaskDisplayInit+0x14e>
 8000bea:	8abb      	ldrh	r3, [r7, #20]
 8000bec:	f640 723b 	movw	r2, #3899	; 0xf3b
 8000bf0:	4293      	cmp	r3, r2
 8000bf2:	d80e      	bhi.n	8000c12 <TaskDisplayInit+0x14e>
		{
			sprintf(usart_buffer,"SELECT\r\n");
 8000bf4:	4b0d      	ldr	r3, [pc, #52]	; (8000c2c <TaskDisplayInit+0x168>)
 8000bf6:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <TaskDisplayInit+0x18c>)
 8000bf8:	ca07      	ldmia	r2, {r0, r1, r2}
 8000bfa:	c303      	stmia	r3!, {r0, r1}
 8000bfc:	701a      	strb	r2, [r3, #0]
			uart_send(usart_buffer);
 8000bfe:	480b      	ldr	r0, [pc, #44]	; (8000c2c <TaskDisplayInit+0x168>)
 8000c00:	f7ff ff42 	bl	8000a88 <uart_send>
			TM_HD44780_Clear();
 8000c04:	f005 fe14 	bl	8006830 <TM_HD44780_Clear>
			TM_HD44780_Puts(0, 0, "SELECT");
 8000c08:	4a12      	ldr	r2, [pc, #72]	; (8000c54 <TaskDisplayInit+0x190>)
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	2000      	movs	r0, #0
 8000c0e:	f005 fe1b 	bl	8006848 <TM_HD44780_Puts>
		}

		ADCValuebefore = ADCValue;
 8000c12:	8abb      	ldrh	r3, [r7, #20]
 8000c14:	82fb      	strh	r3, [r7, #22]
	}

	HAL_ADC_Start(&hadc1);
 8000c16:	4803      	ldr	r0, [pc, #12]	; (8000c24 <TaskDisplayInit+0x160>)
 8000c18:	f000 faf0 	bl	80011fc <HAL_ADC_Start>
    osDelay(10);
 8000c1c:	200a      	movs	r0, #10
 8000c1e:	f003 fa0a 	bl	8004036 <osDelay>
	event = osMessageGet(ADCQueue, 100);
 8000c22:	e75a      	b.n	8000ada <TaskDisplayInit+0x16>
 8000c24:	200040b8 	.word	0x200040b8
 8000c28:	20004104 	.word	0x20004104
 8000c2c:	20000000 	.word	0x20000000
 8000c30:	08007ab0 	.word	0x08007ab0
 8000c34:	08007ab8 	.word	0x08007ab8
 8000c38:	08007abc 	.word	0x08007abc
 8000c3c:	08007ac4 	.word	0x08007ac4
 8000c40:	08007acc 	.word	0x08007acc
 8000c44:	08007ad4 	.word	0x08007ad4
 8000c48:	08007adc 	.word	0x08007adc
 8000c4c:	08007ae4 	.word	0x08007ae4
 8000c50:	08007aec 	.word	0x08007aec
 8000c54:	08007af8 	.word	0x08007af8

08000c58 <HAL_ADC_ConvCpltCallback>:
  }
}

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0e      	ldr	r2, [pc, #56]	; (8000ca0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d115      	bne.n	8000c96 <HAL_ADC_ConvCpltCallback+0x3e>
	{

		uint16_t ADCValue = HAL_ADC_GetValue(hadc);
 8000c6a:	6878      	ldr	r0, [r7, #4]
 8000c6c:	f000 fd9d 	bl	80017aa <HAL_ADC_GetValue>
 8000c70:	4603      	mov	r3, r0
 8000c72:	81fb      	strh	r3, [r7, #14]
		if(osMessagePut (ADCQueue, ADCValue, 100) != osOK)
 8000c74:	4b0b      	ldr	r3, [pc, #44]	; (8000ca4 <HAL_ADC_ConvCpltCallback+0x4c>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	89f9      	ldrh	r1, [r7, #14]
 8000c7a:	2264      	movs	r2, #100	; 0x64
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	f003 fa17 	bl	80040b0 <osMessagePut>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d001      	beq.n	8000c8c <HAL_ADC_ConvCpltCallback+0x34>
		{
		  Error_Handler();
 8000c88:	f000 f832 	bl	8000cf0 <Error_Handler>
		}
		printf("ADC = %d",ADCValue);
 8000c8c:	89fb      	ldrh	r3, [r7, #14]
 8000c8e:	4619      	mov	r1, r3
 8000c90:	4805      	ldr	r0, [pc, #20]	; (8000ca8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000c92:	f006 f851 	bl	8006d38 <iprintf>
	}

}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40012000 	.word	0x40012000
 8000ca4:	20004104 	.word	0x20004104
 8000ca8:	08007b00 	.word	0x08007b00

08000cac <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b082      	sub	sp, #8
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000cb4:	2001      	movs	r0, #1
 8000cb6:	f003 f9be 	bl	8004036 <osDelay>
 8000cba:	e7fb      	b.n	8000cb4 <StartDefaultTask+0x8>

08000cbc <Task2Init>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Task2Init */
void Task2Init(void const * argument)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Task2Init */
  /* Infinite loop */
  for(;;)
  {

    osDelay(1);
 8000cc4:	2001      	movs	r0, #1
 8000cc6:	f003 f9b6 	bl	8004036 <osDelay>
 8000cca:	e7fb      	b.n	8000cc4 <Task2Init+0x8>

08000ccc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b082      	sub	sp, #8
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a04      	ldr	r2, [pc, #16]	; (8000cec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d101      	bne.n	8000ce2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000cde:	f005 fb8f 	bl	8006400 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	40001000 	.word	0x40001000

08000cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
	...

08000d00 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	607b      	str	r3, [r7, #4]
 8000d0a:	4b12      	ldr	r3, [pc, #72]	; (8000d54 <HAL_MspInit+0x54>)
 8000d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d0e:	4a11      	ldr	r2, [pc, #68]	; (8000d54 <HAL_MspInit+0x54>)
 8000d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d14:	6453      	str	r3, [r2, #68]	; 0x44
 8000d16:	4b0f      	ldr	r3, [pc, #60]	; (8000d54 <HAL_MspInit+0x54>)
 8000d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d1e:	607b      	str	r3, [r7, #4]
 8000d20:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	603b      	str	r3, [r7, #0]
 8000d26:	4b0b      	ldr	r3, [pc, #44]	; (8000d54 <HAL_MspInit+0x54>)
 8000d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d2a:	4a0a      	ldr	r2, [pc, #40]	; (8000d54 <HAL_MspInit+0x54>)
 8000d2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d30:	6413      	str	r3, [r2, #64]	; 0x40
 8000d32:	4b08      	ldr	r3, [pc, #32]	; (8000d54 <HAL_MspInit+0x54>)
 8000d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d3a:	603b      	str	r3, [r7, #0]
 8000d3c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000d3e:	2200      	movs	r2, #0
 8000d40:	210f      	movs	r1, #15
 8000d42:	f06f 0001 	mvn.w	r0, #1
 8000d46:	f001 f841 	bl	8001dcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	40023800 	.word	0x40023800

08000d58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08a      	sub	sp, #40	; 0x28
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d60:	f107 0314 	add.w	r3, r7, #20
 8000d64:	2200      	movs	r2, #0
 8000d66:	601a      	str	r2, [r3, #0]
 8000d68:	605a      	str	r2, [r3, #4]
 8000d6a:	609a      	str	r2, [r3, #8]
 8000d6c:	60da      	str	r2, [r3, #12]
 8000d6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	4a1b      	ldr	r2, [pc, #108]	; (8000de4 <HAL_ADC_MspInit+0x8c>)
 8000d76:	4293      	cmp	r3, r2
 8000d78:	d12f      	bne.n	8000dda <HAL_ADC_MspInit+0x82>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	4b1a      	ldr	r3, [pc, #104]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000d80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d82:	4a19      	ldr	r2, [pc, #100]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000d84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d88:	6453      	str	r3, [r2, #68]	; 0x44
 8000d8a:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000d8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d92:	613b      	str	r3, [r7, #16]
 8000d94:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	60fb      	str	r3, [r7, #12]
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a12      	ldr	r2, [pc, #72]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000da0:	f043 0301 	orr.w	r3, r3, #1
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_ADC_MspInit+0x90>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0301 	and.w	r3, r3, #1
 8000dae:	60fb      	str	r3, [r7, #12]
 8000db0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0-WKUP     ------> ADC1_IN0 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000db2:	2301      	movs	r3, #1
 8000db4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db6:	2303      	movs	r3, #3
 8000db8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dbe:	f107 0314 	add.w	r3, r7, #20
 8000dc2:	4619      	mov	r1, r3
 8000dc4:	4809      	ldr	r0, [pc, #36]	; (8000dec <HAL_ADC_MspInit+0x94>)
 8000dc6:	f001 f84d 	bl	8001e64 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000dca:	2200      	movs	r2, #0
 8000dcc:	2105      	movs	r1, #5
 8000dce:	2012      	movs	r0, #18
 8000dd0:	f000 fffc 	bl	8001dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000dd4:	2012      	movs	r0, #18
 8000dd6:	f001 f815 	bl	8001e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dda:	bf00      	nop
 8000ddc:	3728      	adds	r7, #40	; 0x28
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40012000 	.word	0x40012000
 8000de8:	40023800 	.word	0x40023800
 8000dec:	40020000 	.word	0x40020000

08000df0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b08a      	sub	sp, #40	; 0x28
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df8:	f107 0314 	add.w	r3, r7, #20
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	601a      	str	r2, [r3, #0]
 8000e00:	605a      	str	r2, [r3, #4]
 8000e02:	609a      	str	r2, [r3, #8]
 8000e04:	60da      	str	r2, [r3, #12]
 8000e06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a1d      	ldr	r2, [pc, #116]	; (8000e84 <HAL_UART_MspInit+0x94>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d133      	bne.n	8000e7a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e12:	2300      	movs	r3, #0
 8000e14:	613b      	str	r3, [r7, #16]
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1a:	4a1b      	ldr	r2, [pc, #108]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e20:	6413      	str	r3, [r2, #64]	; 0x40
 8000e22:	4b19      	ldr	r3, [pc, #100]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2e:	2300      	movs	r3, #0
 8000e30:	60fb      	str	r3, [r7, #12]
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e38:	f043 0301 	orr.w	r3, r3, #1
 8000e3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3e:	4b12      	ldr	r3, [pc, #72]	; (8000e88 <HAL_UART_MspInit+0x98>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e42:	f003 0301 	and.w	r3, r3, #1
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e4a:	230c      	movs	r3, #12
 8000e4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4e:	2302      	movs	r3, #2
 8000e50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e56:	2303      	movs	r3, #3
 8000e58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e5a:	2307      	movs	r3, #7
 8000e5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5e:	f107 0314 	add.w	r3, r7, #20
 8000e62:	4619      	mov	r1, r3
 8000e64:	4809      	ldr	r0, [pc, #36]	; (8000e8c <HAL_UART_MspInit+0x9c>)
 8000e66:	f000 fffd 	bl	8001e64 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	2105      	movs	r1, #5
 8000e6e:	2026      	movs	r0, #38	; 0x26
 8000e70:	f000 ffac 	bl	8001dcc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e74:	2026      	movs	r0, #38	; 0x26
 8000e76:	f000 ffc5 	bl	8001e04 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40004400 	.word	0x40004400
 8000e88:	40023800 	.word	0x40023800
 8000e8c:	40020000 	.word	0x40020000

08000e90 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b08c      	sub	sp, #48	; 0x30
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	6879      	ldr	r1, [r7, #4]
 8000ea4:	2036      	movs	r0, #54	; 0x36
 8000ea6:	f000 ff91 	bl	8001dcc <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000eaa:	2036      	movs	r0, #54	; 0x36
 8000eac:	f000 ffaa 	bl	8001e04 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	60fb      	str	r3, [r7, #12]
 8000eb4:	4b1f      	ldr	r3, [pc, #124]	; (8000f34 <HAL_InitTick+0xa4>)
 8000eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eb8:	4a1e      	ldr	r2, [pc, #120]	; (8000f34 <HAL_InitTick+0xa4>)
 8000eba:	f043 0310 	orr.w	r3, r3, #16
 8000ebe:	6413      	str	r3, [r2, #64]	; 0x40
 8000ec0:	4b1c      	ldr	r3, [pc, #112]	; (8000f34 <HAL_InitTick+0xa4>)
 8000ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ec4:	f003 0310 	and.w	r3, r3, #16
 8000ec8:	60fb      	str	r3, [r7, #12]
 8000eca:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ecc:	f107 0210 	add.w	r2, r7, #16
 8000ed0:	f107 0314 	add.w	r3, r7, #20
 8000ed4:	4611      	mov	r1, r2
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	f001 fada 	bl	8002490 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000edc:	f001 fab0 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8000ee0:	4603      	mov	r3, r0
 8000ee2:	005b      	lsls	r3, r3, #1
 8000ee4:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000ee6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ee8:	4a13      	ldr	r2, [pc, #76]	; (8000f38 <HAL_InitTick+0xa8>)
 8000eea:	fba2 2303 	umull	r2, r3, r2, r3
 8000eee:	0c9b      	lsrs	r3, r3, #18
 8000ef0:	3b01      	subs	r3, #1
 8000ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ef4:	4b11      	ldr	r3, [pc, #68]	; (8000f3c <HAL_InitTick+0xac>)
 8000ef6:	4a12      	ldr	r2, [pc, #72]	; (8000f40 <HAL_InitTick+0xb0>)
 8000ef8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000efa:	4b10      	ldr	r3, [pc, #64]	; (8000f3c <HAL_InitTick+0xac>)
 8000efc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f02:	4a0e      	ldr	r2, [pc, #56]	; (8000f3c <HAL_InitTick+0xac>)
 8000f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f08:	4b0c      	ldr	r3, [pc, #48]	; (8000f3c <HAL_InitTick+0xac>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f0e:	4b0b      	ldr	r3, [pc, #44]	; (8000f3c <HAL_InitTick+0xac>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000f14:	4809      	ldr	r0, [pc, #36]	; (8000f3c <HAL_InitTick+0xac>)
 8000f16:	f001 fee7 	bl	8002ce8 <HAL_TIM_Base_Init>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d104      	bne.n	8000f2a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000f20:	4806      	ldr	r0, [pc, #24]	; (8000f3c <HAL_InitTick+0xac>)
 8000f22:	f001 ff16 	bl	8002d52 <HAL_TIM_Base_Start_IT>
 8000f26:	4603      	mov	r3, r0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3730      	adds	r7, #48	; 0x30
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	40023800 	.word	0x40023800
 8000f38:	431bde83 	.word	0x431bde83
 8000f3c:	2000414c 	.word	0x2000414c
 8000f40:	40001000 	.word	0x40001000

08000f44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b480      	push	{r7}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <MemManage_Handler+0x4>

08000f5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <BusFault_Handler+0x4>

08000f64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <UsageFault_Handler+0x4>

08000f6a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f6e:	bf00      	nop
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr

08000f78 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8000f78:	b580      	push	{r7, lr}
 8000f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000f7c:	4802      	ldr	r0, [pc, #8]	; (8000f88 <ADC_IRQHandler+0x10>)
 8000f7e:	f000 fad3 	bl	8001528 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000f82:	bf00      	nop
 8000f84:	bd80      	pop	{r7, pc}
 8000f86:	bf00      	nop
 8000f88:	200040b8 	.word	0x200040b8

08000f8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f90:	4802      	ldr	r0, [pc, #8]	; (8000f9c <USART2_IRQHandler+0x10>)
 8000f92:	f002 f9cd 	bl	8003330 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	2000410c 	.word	0x2000410c

08000fa0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000fa4:	4802      	ldr	r0, [pc, #8]	; (8000fb0 <TIM6_DAC_IRQHandler+0x10>)
 8000fa6:	f001 fef8 	bl	8002d9a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	2000414c 	.word	0x2000414c

08000fb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b086      	sub	sp, #24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	60f8      	str	r0, [r7, #12]
 8000fbc:	60b9      	str	r1, [r7, #8]
 8000fbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
 8000fc4:	e00a      	b.n	8000fdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fc6:	f3af 8000 	nop.w
 8000fca:	4601      	mov	r1, r0
 8000fcc:	68bb      	ldr	r3, [r7, #8]
 8000fce:	1c5a      	adds	r2, r3, #1
 8000fd0:	60ba      	str	r2, [r7, #8]
 8000fd2:	b2ca      	uxtb	r2, r1
 8000fd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fd6:	697b      	ldr	r3, [r7, #20]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	617b      	str	r3, [r7, #20]
 8000fdc:	697a      	ldr	r2, [r7, #20]
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	429a      	cmp	r2, r3
 8000fe2:	dbf0      	blt.n	8000fc6 <_read+0x12>
	}

return len;
 8000fe4:	687b      	ldr	r3, [r7, #4]
}
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	3718      	adds	r7, #24
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fee:	b480      	push	{r7}
 8000ff0:	b083      	sub	sp, #12
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ff6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	370c      	adds	r7, #12
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr

08001006 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001006:	b480      	push	{r7}
 8001008:	b083      	sub	sp, #12
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
 800100e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001016:	605a      	str	r2, [r3, #4]
	return 0;
 8001018:	2300      	movs	r3, #0
}
 800101a:	4618      	mov	r0, r3
 800101c:	370c      	adds	r7, #12
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <_isatty>:

int _isatty(int file)
{
 8001026:	b480      	push	{r7}
 8001028:	b083      	sub	sp, #12
 800102a:	af00      	add	r7, sp, #0
 800102c:	6078      	str	r0, [r7, #4]
	return 1;
 800102e:	2301      	movs	r3, #1
}
 8001030:	4618      	mov	r0, r3
 8001032:	370c      	adds	r7, #12
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	60b9      	str	r1, [r7, #8]
 8001046:	607a      	str	r2, [r7, #4]
	return 0;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	3714      	adds	r7, #20
 800104e:	46bd      	mov	sp, r7
 8001050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001054:	4770      	bx	lr
	...

08001058 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001060:	4b11      	ldr	r3, [pc, #68]	; (80010a8 <_sbrk+0x50>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d102      	bne.n	800106e <_sbrk+0x16>
		heap_end = &end;
 8001068:	4b0f      	ldr	r3, [pc, #60]	; (80010a8 <_sbrk+0x50>)
 800106a:	4a10      	ldr	r2, [pc, #64]	; (80010ac <_sbrk+0x54>)
 800106c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800106e:	4b0e      	ldr	r3, [pc, #56]	; (80010a8 <_sbrk+0x50>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <_sbrk+0x50>)
 8001076:	681a      	ldr	r2, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4413      	add	r3, r2
 800107c:	466a      	mov	r2, sp
 800107e:	4293      	cmp	r3, r2
 8001080:	d907      	bls.n	8001092 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001082:	f005 fd73 	bl	8006b6c <__errno>
 8001086:	4602      	mov	r2, r0
 8001088:	230c      	movs	r3, #12
 800108a:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 800108c:	f04f 33ff 	mov.w	r3, #4294967295
 8001090:	e006      	b.n	80010a0 <_sbrk+0x48>
	}

	heap_end += incr;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <_sbrk+0x50>)
 8001094:	681a      	ldr	r2, [r3, #0]
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4413      	add	r3, r2
 800109a:	4a03      	ldr	r2, [pc, #12]	; (80010a8 <_sbrk+0x50>)
 800109c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800109e:	68fb      	ldr	r3, [r7, #12]
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000314 	.word	0x20000314
 80010ac:	20004190 	.word	0x20004190

080010b0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80010b0:	b480      	push	{r7}
 80010b2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <SystemInit+0x28>)
 80010b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010ba:	4a07      	ldr	r2, [pc, #28]	; (80010d8 <SystemInit+0x28>)
 80010bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010c4:	4b04      	ldr	r3, [pc, #16]	; (80010d8 <SystemInit+0x28>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	609a      	str	r2, [r3, #8]
#endif
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80010dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001114 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80010e0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80010e4:	4b0c      	ldr	r3, [pc, #48]	; (8001118 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80010e6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80010e8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80010ec:	480b      	ldr	r0, [pc, #44]	; (800111c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80010ee:	4b0c      	ldr	r3, [pc, #48]	; (8001120 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80010f0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80010f2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
  ldr  r2, =_sbss
 80010f6:	4a0b      	ldr	r2, [pc, #44]	; (8001124 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80010fa:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001100:	4b09      	ldr	r3, [pc, #36]	; (8001128 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001102:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001106:	f7ff ffd3 	bl	80010b0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800110a:	f005 fd35 	bl	8006b78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800110e:	f7ff fa99 	bl	8000644 <main>
  bx  lr    
 8001112:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001114:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001118:	08007bd8 	.word	0x08007bd8
  ldr  r0, =_sdata
 800111c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001120:	200000a4 	.word	0x200000a4
  ldr  r2, =_sbss
 8001124:	200000a4 	.word	0x200000a4
  ldr  r3, = _ebss
 8001128:	20004190 	.word	0x20004190

0800112c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800112c:	e7fe      	b.n	800112c <CAN1_RX0_IRQHandler>
	...

08001130 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001134:	4b0e      	ldr	r3, [pc, #56]	; (8001170 <HAL_Init+0x40>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a0d      	ldr	r2, [pc, #52]	; (8001170 <HAL_Init+0x40>)
 800113a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800113e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001140:	4b0b      	ldr	r3, [pc, #44]	; (8001170 <HAL_Init+0x40>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <HAL_Init+0x40>)
 8001146:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800114a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800114c:	4b08      	ldr	r3, [pc, #32]	; (8001170 <HAL_Init+0x40>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a07      	ldr	r2, [pc, #28]	; (8001170 <HAL_Init+0x40>)
 8001152:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001156:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001158:	2003      	movs	r0, #3
 800115a:	f000 fe2c 	bl	8001db6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800115e:	2000      	movs	r0, #0
 8001160:	f7ff fe96 	bl	8000e90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001164:	f7ff fdcc 	bl	8000d00 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001168:	2300      	movs	r3, #0
}
 800116a:	4618      	mov	r0, r3
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023c00 	.word	0x40023c00

08001174 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d101      	bne.n	800118a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001186:	2301      	movs	r3, #1
 8001188:	e033      	b.n	80011f2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	2b00      	cmp	r3, #0
 8001190:	d109      	bne.n	80011a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff fde0 	bl	8000d58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2200      	movs	r2, #0
 800119c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	f003 0310 	and.w	r3, r3, #16
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d118      	bne.n	80011e4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80011ba:	f023 0302 	bic.w	r3, r3, #2
 80011be:	f043 0202 	orr.w	r2, r3, #2
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 fc42 	bl	8001a50 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2200      	movs	r2, #0
 80011d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d6:	f023 0303 	bic.w	r3, r3, #3
 80011da:	f043 0201 	orr.w	r2, r3, #1
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	641a      	str	r2, [r3, #64]	; 0x40
 80011e2:	e001      	b.n	80011e8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80011f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
	...

080011fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b085      	sub	sp, #20
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001204:	2300      	movs	r3, #0
 8001206:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800120e:	2b01      	cmp	r3, #1
 8001210:	d101      	bne.n	8001216 <HAL_ADC_Start+0x1a>
 8001212:	2302      	movs	r3, #2
 8001214:	e0a5      	b.n	8001362 <HAL_ADC_Start+0x166>
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689b      	ldr	r3, [r3, #8]
 8001224:	f003 0301 	and.w	r3, r3, #1
 8001228:	2b01      	cmp	r3, #1
 800122a:	d018      	beq.n	800125e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	689a      	ldr	r2, [r3, #8]
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	f042 0201 	orr.w	r2, r2, #1
 800123a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800123c:	4b4c      	ldr	r3, [pc, #304]	; (8001370 <HAL_ADC_Start+0x174>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a4c      	ldr	r2, [pc, #304]	; (8001374 <HAL_ADC_Start+0x178>)
 8001242:	fba2 2303 	umull	r2, r3, r2, r3
 8001246:	0c9a      	lsrs	r2, r3, #18
 8001248:	4613      	mov	r3, r2
 800124a:	005b      	lsls	r3, r3, #1
 800124c:	4413      	add	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001250:	e002      	b.n	8001258 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	3b01      	subs	r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f9      	bne.n	8001252 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689b      	ldr	r3, [r3, #8]
 8001264:	f003 0301 	and.w	r3, r3, #1
 8001268:	2b01      	cmp	r3, #1
 800126a:	d179      	bne.n	8001360 <HAL_ADC_Start+0x164>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001270:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001274:	f023 0301 	bic.w	r3, r3, #1
 8001278:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	685b      	ldr	r3, [r3, #4]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	2b00      	cmp	r3, #0
 800128c:	d007      	beq.n	800129e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001292:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001296:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012aa:	d106      	bne.n	80012ba <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b0:	f023 0206 	bic.w	r2, r3, #6
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	645a      	str	r2, [r3, #68]	; 0x44
 80012b8:	e002      	b.n	80012c0 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	2200      	movs	r2, #0
 80012be:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012c8:	4b2b      	ldr	r3, [pc, #172]	; (8001378 <HAL_ADC_Start+0x17c>)
 80012ca:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80012d4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 031f 	and.w	r3, r3, #31
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d12a      	bne.n	8001338 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4a25      	ldr	r2, [pc, #148]	; (800137c <HAL_ADC_Start+0x180>)
 80012e8:	4293      	cmp	r3, r2
 80012ea:	d015      	beq.n	8001318 <HAL_ADC_Start+0x11c>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a23      	ldr	r2, [pc, #140]	; (8001380 <HAL_ADC_Start+0x184>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d105      	bne.n	8001302 <HAL_ADC_Start+0x106>
 80012f6:	4b20      	ldr	r3, [pc, #128]	; (8001378 <HAL_ADC_Start+0x17c>)
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 031f 	and.w	r3, r3, #31
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d00a      	beq.n	8001318 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a1f      	ldr	r2, [pc, #124]	; (8001384 <HAL_ADC_Start+0x188>)
 8001308:	4293      	cmp	r3, r2
 800130a:	d129      	bne.n	8001360 <HAL_ADC_Start+0x164>
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <HAL_ADC_Start+0x17c>)
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f003 031f 	and.w	r3, r3, #31
 8001314:	2b0f      	cmp	r3, #15
 8001316:	d823      	bhi.n	8001360 <HAL_ADC_Start+0x164>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001322:	2b00      	cmp	r3, #0
 8001324:	d11c      	bne.n	8001360 <HAL_ADC_Start+0x164>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	689a      	ldr	r2, [r3, #8]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001334:	609a      	str	r2, [r3, #8]
 8001336:	e013      	b.n	8001360 <HAL_ADC_Start+0x164>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a0f      	ldr	r2, [pc, #60]	; (800137c <HAL_ADC_Start+0x180>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d10e      	bne.n	8001360 <HAL_ADC_Start+0x164>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800134c:	2b00      	cmp	r3, #0
 800134e:	d107      	bne.n	8001360 <HAL_ADC_Start+0x164>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689a      	ldr	r2, [r3, #8]
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	681b      	ldr	r3, [r3, #0]
 800135a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800135e:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001360:	2300      	movs	r3, #0
}
 8001362:	4618      	mov	r0, r3
 8001364:	3714      	adds	r7, #20
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000034 	.word	0x20000034
 8001374:	431bde83 	.word	0x431bde83
 8001378:	40012300 	.word	0x40012300
 800137c:	40012000 	.word	0x40012000
 8001380:	40012100 	.word	0x40012100
 8001384:	40012200 	.word	0x40012200

08001388 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139a:	2b01      	cmp	r3, #1
 800139c:	d101      	bne.n	80013a2 <HAL_ADC_Start_IT+0x1a>
 800139e:	2302      	movs	r3, #2
 80013a0:	e0b0      	b.n	8001504 <HAL_ADC_Start_IT+0x17c>
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	2201      	movs	r2, #1
 80013a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d018      	beq.n	80013ea <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	689a      	ldr	r2, [r3, #8]
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f042 0201 	orr.w	r2, r2, #1
 80013c6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013c8:	4b51      	ldr	r3, [pc, #324]	; (8001510 <HAL_ADC_Start_IT+0x188>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a51      	ldr	r2, [pc, #324]	; (8001514 <HAL_ADC_Start_IT+0x18c>)
 80013ce:	fba2 2303 	umull	r2, r3, r2, r3
 80013d2:	0c9a      	lsrs	r2, r3, #18
 80013d4:	4613      	mov	r3, r2
 80013d6:	005b      	lsls	r3, r3, #1
 80013d8:	4413      	add	r3, r2
 80013da:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013dc:	e002      	b.n	80013e4 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 80013de:	68bb      	ldr	r3, [r7, #8]
 80013e0:	3b01      	subs	r3, #1
 80013e2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d1f9      	bne.n	80013de <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	689b      	ldr	r3, [r3, #8]
 80013f0:	f003 0301 	and.w	r3, r3, #1
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	f040 8084 	bne.w	8001502 <HAL_ADC_Start_IT+0x17a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001418:	2b00      	cmp	r3, #0
 800141a:	d007      	beq.n	800142c <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001420:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001424:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001434:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001438:	d106      	bne.n	8001448 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143e:	f023 0206 	bic.w	r2, r3, #6
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	645a      	str	r2, [r3, #68]	; 0x44
 8001446:	e002      	b.n	800144e <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	2200      	movs	r2, #0
 800144c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001456:	4b30      	ldr	r3, [pc, #192]	; (8001518 <HAL_ADC_Start_IT+0x190>)
 8001458:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001462:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	6812      	ldr	r2, [r2, #0]
 800146e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001472:	f043 0320 	orr.w	r3, r3, #32
 8001476:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 031f 	and.w	r3, r3, #31
 8001480:	2b00      	cmp	r3, #0
 8001482:	d12a      	bne.n	80014da <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a24      	ldr	r2, [pc, #144]	; (800151c <HAL_ADC_Start_IT+0x194>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d015      	beq.n	80014ba <HAL_ADC_Start_IT+0x132>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a23      	ldr	r2, [pc, #140]	; (8001520 <HAL_ADC_Start_IT+0x198>)
 8001494:	4293      	cmp	r3, r2
 8001496:	d105      	bne.n	80014a4 <HAL_ADC_Start_IT+0x11c>
 8001498:	4b1f      	ldr	r3, [pc, #124]	; (8001518 <HAL_ADC_Start_IT+0x190>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f003 031f 	and.w	r3, r3, #31
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d00a      	beq.n	80014ba <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a1e      	ldr	r2, [pc, #120]	; (8001524 <HAL_ADC_Start_IT+0x19c>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d129      	bne.n	8001502 <HAL_ADC_Start_IT+0x17a>
 80014ae:	4b1a      	ldr	r3, [pc, #104]	; (8001518 <HAL_ADC_Start_IT+0x190>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	2b0f      	cmp	r3, #15
 80014b8:	d823      	bhi.n	8001502 <HAL_ADC_Start_IT+0x17a>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d11c      	bne.n	8001502 <HAL_ADC_Start_IT+0x17a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014d6:	609a      	str	r2, [r3, #8]
 80014d8:	e013      	b.n	8001502 <HAL_ADC_Start_IT+0x17a>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0f      	ldr	r2, [pc, #60]	; (800151c <HAL_ADC_Start_IT+0x194>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d10e      	bne.n	8001502 <HAL_ADC_Start_IT+0x17a>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d107      	bne.n	8001502 <HAL_ADC_Start_IT+0x17a>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	689a      	ldr	r2, [r3, #8]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001500:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	3714      	adds	r7, #20
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	20000034 	.word	0x20000034
 8001514:	431bde83 	.word	0x431bde83
 8001518:	40012300 	.word	0x40012300
 800151c:	40012000 	.word	0x40012000
 8001520:	40012100 	.word	0x40012100
 8001524:	40012200 	.word	0x40012200

08001528 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b084      	sub	sp, #16
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 8001530:	2300      	movs	r3, #0
 8001532:	60fb      	str	r3, [r7, #12]
 8001534:	2300      	movs	r3, #0
 8001536:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC);
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b02      	cmp	r3, #2
 8001544:	bf0c      	ite	eq
 8001546:	2301      	moveq	r3, #1
 8001548:	2300      	movne	r3, #0
 800154a:	b2db      	uxtb	r3, r3
 800154c:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_EOC);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	f003 0320 	and.w	r3, r3, #32
 8001558:	2b20      	cmp	r3, #32
 800155a:	bf0c      	ite	eq
 800155c:	2301      	moveq	r3, #1
 800155e:	2300      	movne	r3, #0
 8001560:	b2db      	uxtb	r3, r3
 8001562:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d049      	beq.n	80015fe <HAL_ADC_IRQHandler+0xd6>
 800156a:	68bb      	ldr	r3, [r7, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d046      	beq.n	80015fe <HAL_ADC_IRQHandler+0xd6>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f003 0310 	and.w	r3, r3, #16
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <HAL_ADC_IRQHandler+0x60>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001580:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d12b      	bne.n	80015ee <HAL_ADC_IRQHandler+0xc6>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800159a:	2b00      	cmp	r3, #0
 800159c:	d127      	bne.n	80015ee <HAL_ADC_IRQHandler+0xc6>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d006      	beq.n	80015ba <HAL_ADC_IRQHandler+0x92>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	689b      	ldr	r3, [r3, #8]
 80015b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d119      	bne.n	80015ee <HAL_ADC_IRQHandler+0xc6>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	685a      	ldr	r2, [r3, #4]
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f022 0220 	bic.w	r2, r2, #32
 80015c8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ce:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d105      	bne.n	80015ee <HAL_ADC_IRQHandler+0xc6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015e6:	f043 0201 	orr.w	r2, r3, #1
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80015ee:	6878      	ldr	r0, [r7, #4]
 80015f0:	f7ff fb32 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f06f 0212 	mvn.w	r2, #18
 80015fc:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0304 	and.w	r3, r3, #4
 8001608:	2b04      	cmp	r3, #4
 800160a:	bf0c      	ite	eq
 800160c:	2301      	moveq	r3, #1
 800160e:	2300      	movne	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_JEOC);                               
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	2b80      	cmp	r3, #128	; 0x80
 8001620:	bf0c      	ite	eq
 8001622:	2301      	moveq	r3, #1
 8001624:	2300      	movne	r3, #0
 8001626:	b2db      	uxtb	r3, r3
 8001628:	60bb      	str	r3, [r7, #8]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d057      	beq.n	80016e0 <HAL_ADC_IRQHandler+0x1b8>
 8001630:	68bb      	ldr	r3, [r7, #8]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d054      	beq.n	80016e0 <HAL_ADC_IRQHandler+0x1b8>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b00      	cmp	r3, #0
 8001640:	d105      	bne.n	800164e <HAL_ADC_IRQHandler+0x126>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d139      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001662:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001666:	2b00      	cmp	r3, #0
 8001668:	d006      	beq.n	8001678 <HAL_ADC_IRQHandler+0x150>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8001674:	2b00      	cmp	r3, #0
 8001676:	d12b      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 8001682:	2b00      	cmp	r3, #0
 8001684:	d124      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001690:	2b00      	cmp	r3, #0
 8001692:	d11d      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8001698:	2b00      	cmp	r3, #0
 800169a:	d119      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	685a      	ldr	r2, [r3, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016aa:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d105      	bne.n	80016d0 <HAL_ADC_IRQHandler+0x1a8>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c8:	f043 0201 	orr.w	r2, r3, #1
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016d0:	6878      	ldr	r0, [r7, #4]
 80016d2:	f000 fab9 	bl	8001c48 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f06f 020c 	mvn.w	r2, #12
 80016de:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0301 	and.w	r3, r3, #1
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	bf0c      	ite	eq
 80016ee:	2301      	moveq	r3, #1
 80016f0:	2300      	movne	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_AWD);                          
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001700:	2b40      	cmp	r3, #64	; 0x40
 8001702:	bf0c      	ite	eq
 8001704:	2301      	moveq	r3, #1
 8001706:	2300      	movne	r3, #0
 8001708:	b2db      	uxtb	r3, r3
 800170a:	60bb      	str	r3, [r7, #8]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d017      	beq.n	8001742 <HAL_ADC_IRQHandler+0x21a>
 8001712:	68bb      	ldr	r3, [r7, #8]
 8001714:	2b00      	cmp	r3, #0
 8001716:	d014      	beq.n	8001742 <HAL_ADC_IRQHandler+0x21a>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	2b01      	cmp	r3, #1
 8001724:	d10d      	bne.n	8001742 <HAL_ADC_IRQHandler+0x21a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800172a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 f846 	bl	80017c4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f06f 0201 	mvn.w	r2, #1
 8001740:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_OVR);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0320 	and.w	r3, r3, #32
 800174c:	2b20      	cmp	r3, #32
 800174e:	bf0c      	ite	eq
 8001750:	2301      	moveq	r3, #1
 8001752:	2300      	movne	r3, #0
 8001754:	b2db      	uxtb	r3, r3
 8001756:	60fb      	str	r3, [r7, #12]
  tmp2 = __HAL_ADC_GET_IT_SOURCE(hadc, ADC_IT_OVR);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001762:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001766:	bf0c      	ite	eq
 8001768:	2301      	moveq	r3, #1
 800176a:	2300      	movne	r3, #0
 800176c:	b2db      	uxtb	r3, r3
 800176e:	60bb      	str	r3, [r7, #8]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d015      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x27a>
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d012      	beq.n	80017a2 <HAL_ADC_IRQHandler+0x27a>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001780:	f043 0202 	orr.w	r2, r3, #2
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f06f 0220 	mvn.w	r2, #32
 8001790:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f820 	bl	80017d8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0220 	mvn.w	r2, #32
 80017a0:	601a      	str	r2, [r3, #0]
  }
}
 80017a2:	bf00      	nop
 80017a4:	3710      	adds	r7, #16
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80017aa:	b480      	push	{r7}
 80017ac:	b083      	sub	sp, #12
 80017ae:	af00      	add	r7, sp, #0
 80017b0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017cc:	bf00      	nop
 80017ce:	370c      	adds	r7, #12
 80017d0:	46bd      	mov	sp, r7
 80017d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d6:	4770      	bx	lr

080017d8 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017d8:	b480      	push	{r7}
 80017da:	b083      	sub	sp, #12
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017e0:	bf00      	nop
 80017e2:	370c      	adds	r7, #12
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b085      	sub	sp, #20
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80017f6:	2300      	movs	r3, #0
 80017f8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001800:	2b01      	cmp	r3, #1
 8001802:	d101      	bne.n	8001808 <HAL_ADC_ConfigChannel+0x1c>
 8001804:	2302      	movs	r3, #2
 8001806:	e113      	b.n	8001a30 <HAL_ADC_ConfigChannel+0x244>
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	2201      	movs	r2, #1
 800180c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2b09      	cmp	r3, #9
 8001816:	d925      	bls.n	8001864 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	68d9      	ldr	r1, [r3, #12]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	b29b      	uxth	r3, r3
 8001824:	461a      	mov	r2, r3
 8001826:	4613      	mov	r3, r2
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	4413      	add	r3, r2
 800182c:	3b1e      	subs	r3, #30
 800182e:	2207      	movs	r2, #7
 8001830:	fa02 f303 	lsl.w	r3, r2, r3
 8001834:	43da      	mvns	r2, r3
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	400a      	ands	r2, r1
 800183c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	68d9      	ldr	r1, [r3, #12]
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	b29b      	uxth	r3, r3
 800184e:	4618      	mov	r0, r3
 8001850:	4603      	mov	r3, r0
 8001852:	005b      	lsls	r3, r3, #1
 8001854:	4403      	add	r3, r0
 8001856:	3b1e      	subs	r3, #30
 8001858:	409a      	lsls	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	430a      	orrs	r2, r1
 8001860:	60da      	str	r2, [r3, #12]
 8001862:	e022      	b.n	80018aa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	6919      	ldr	r1, [r3, #16]
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	b29b      	uxth	r3, r3
 8001870:	461a      	mov	r2, r3
 8001872:	4613      	mov	r3, r2
 8001874:	005b      	lsls	r3, r3, #1
 8001876:	4413      	add	r3, r2
 8001878:	2207      	movs	r2, #7
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	43da      	mvns	r2, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	400a      	ands	r2, r1
 8001886:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6919      	ldr	r1, [r3, #16]
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	689a      	ldr	r2, [r3, #8]
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	b29b      	uxth	r3, r3
 8001898:	4618      	mov	r0, r3
 800189a:	4603      	mov	r3, r0
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	4403      	add	r3, r0
 80018a0:	409a      	lsls	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	430a      	orrs	r2, r1
 80018a8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	2b06      	cmp	r3, #6
 80018b0:	d824      	bhi.n	80018fc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b8:	683b      	ldr	r3, [r7, #0]
 80018ba:	685a      	ldr	r2, [r3, #4]
 80018bc:	4613      	mov	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	4413      	add	r3, r2
 80018c2:	3b05      	subs	r3, #5
 80018c4:	221f      	movs	r2, #31
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	400a      	ands	r2, r1
 80018d2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	4618      	mov	r0, r3
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	685a      	ldr	r2, [r3, #4]
 80018e6:	4613      	mov	r3, r2
 80018e8:	009b      	lsls	r3, r3, #2
 80018ea:	4413      	add	r3, r2
 80018ec:	3b05      	subs	r3, #5
 80018ee:	fa00 f203 	lsl.w	r2, r0, r3
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	430a      	orrs	r2, r1
 80018f8:	635a      	str	r2, [r3, #52]	; 0x34
 80018fa:	e04c      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	2b0c      	cmp	r3, #12
 8001902:	d824      	bhi.n	800194e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800190a:	683b      	ldr	r3, [r7, #0]
 800190c:	685a      	ldr	r2, [r3, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	3b23      	subs	r3, #35	; 0x23
 8001916:	221f      	movs	r2, #31
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	43da      	mvns	r2, r3
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	400a      	ands	r2, r1
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	b29b      	uxth	r3, r3
 8001932:	4618      	mov	r0, r3
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	685a      	ldr	r2, [r3, #4]
 8001938:	4613      	mov	r3, r2
 800193a:	009b      	lsls	r3, r3, #2
 800193c:	4413      	add	r3, r2
 800193e:	3b23      	subs	r3, #35	; 0x23
 8001940:	fa00 f203 	lsl.w	r2, r0, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	430a      	orrs	r2, r1
 800194a:	631a      	str	r2, [r3, #48]	; 0x30
 800194c:	e023      	b.n	8001996 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	4613      	mov	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	4413      	add	r3, r2
 800195e:	3b41      	subs	r3, #65	; 0x41
 8001960:	221f      	movs	r2, #31
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43da      	mvns	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	400a      	ands	r2, r1
 800196e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001976:	683b      	ldr	r3, [r7, #0]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	b29b      	uxth	r3, r3
 800197c:	4618      	mov	r0, r3
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	685a      	ldr	r2, [r3, #4]
 8001982:	4613      	mov	r3, r2
 8001984:	009b      	lsls	r3, r3, #2
 8001986:	4413      	add	r3, r2
 8001988:	3b41      	subs	r3, #65	; 0x41
 800198a:	fa00 f203 	lsl.w	r2, r0, r3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	430a      	orrs	r2, r1
 8001994:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001996:	4b29      	ldr	r3, [pc, #164]	; (8001a3c <HAL_ADC_ConfigChannel+0x250>)
 8001998:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a28      	ldr	r2, [pc, #160]	; (8001a40 <HAL_ADC_ConfigChannel+0x254>)
 80019a0:	4293      	cmp	r3, r2
 80019a2:	d10f      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d8>
 80019a4:	683b      	ldr	r3, [r7, #0]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	2b12      	cmp	r3, #18
 80019aa:	d10b      	bne.n	80019c4 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a1d      	ldr	r2, [pc, #116]	; (8001a40 <HAL_ADC_ConfigChannel+0x254>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d12b      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
 80019ce:	683b      	ldr	r3, [r7, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <HAL_ADC_ConfigChannel+0x258>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d003      	beq.n	80019e0 <HAL_ADC_ConfigChannel+0x1f4>
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2b11      	cmp	r3, #17
 80019de:	d122      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	4a11      	ldr	r2, [pc, #68]	; (8001a44 <HAL_ADC_ConfigChannel+0x258>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d111      	bne.n	8001a26 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001a02:	4b11      	ldr	r3, [pc, #68]	; (8001a48 <HAL_ADC_ConfigChannel+0x25c>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	4a11      	ldr	r2, [pc, #68]	; (8001a4c <HAL_ADC_ConfigChannel+0x260>)
 8001a08:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0c:	0c9a      	lsrs	r2, r3, #18
 8001a0e:	4613      	mov	r3, r2
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	005b      	lsls	r3, r3, #1
 8001a16:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a18:	e002      	b.n	8001a20 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d1f9      	bne.n	8001a1a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a2e:	2300      	movs	r3, #0
}
 8001a30:	4618      	mov	r0, r3
 8001a32:	3714      	adds	r7, #20
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40012300 	.word	0x40012300
 8001a40:	40012000 	.word	0x40012000
 8001a44:	10000012 	.word	0x10000012
 8001a48:	20000034 	.word	0x20000034
 8001a4c:	431bde83 	.word	0x431bde83

08001a50 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b085      	sub	sp, #20
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a58:	4b79      	ldr	r3, [pc, #484]	; (8001c40 <ADC_Init+0x1f0>)
 8001a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	685a      	ldr	r2, [r3, #4]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	431a      	orrs	r2, r3
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	685a      	ldr	r2, [r3, #4]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a84:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	6859      	ldr	r1, [r3, #4]
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	691b      	ldr	r3, [r3, #16]
 8001a90:	021a      	lsls	r2, r3, #8
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	685a      	ldr	r2, [r3, #4]
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001aa8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	6859      	ldr	r1, [r3, #4]
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	689a      	ldr	r2, [r3, #8]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	430a      	orrs	r2, r1
 8001aba:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	689a      	ldr	r2, [r3, #8]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001aca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	6899      	ldr	r1, [r3, #8]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	68da      	ldr	r2, [r3, #12]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	430a      	orrs	r2, r1
 8001adc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ae2:	4a58      	ldr	r2, [pc, #352]	; (8001c44 <ADC_Init+0x1f4>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d022      	beq.n	8001b2e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	689a      	ldr	r2, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001af6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	6899      	ldr	r1, [r3, #8]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	430a      	orrs	r2, r1
 8001b08:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b18:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	6899      	ldr	r1, [r3, #8]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	430a      	orrs	r2, r1
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	e00f      	b.n	8001b4e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	689a      	ldr	r2, [r3, #8]
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b3c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	689a      	ldr	r2, [r3, #8]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b4c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689a      	ldr	r2, [r3, #8]
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0202 	bic.w	r2, r2, #2
 8001b5c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6899      	ldr	r1, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	7e1b      	ldrb	r3, [r3, #24]
 8001b68:	005a      	lsls	r2, r3, #1
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	430a      	orrs	r2, r1
 8001b70:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d01b      	beq.n	8001bb4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	685a      	ldr	r2, [r3, #4]
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001b8a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001b9a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	6859      	ldr	r1, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	035a      	lsls	r2, r3, #13
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	e007      	b.n	8001bc4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bc2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	69db      	ldr	r3, [r3, #28]
 8001bde:	3b01      	subs	r3, #1
 8001be0:	051a      	lsls	r2, r3, #20
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	430a      	orrs	r2, r1
 8001be8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001bf8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	6899      	ldr	r1, [r3, #8]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c06:	025a      	lsls	r2, r3, #9
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	430a      	orrs	r2, r1
 8001c0e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c1e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	6899      	ldr	r1, [r3, #8]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	695b      	ldr	r3, [r3, #20]
 8001c2a:	029a      	lsls	r2, r3, #10
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	430a      	orrs	r2, r1
 8001c32:	609a      	str	r2, [r3, #8]
}
 8001c34:	bf00      	nop
 8001c36:	3714      	adds	r7, #20
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40012300 	.word	0x40012300
 8001c44:	0f000001 	.word	0x0f000001

08001c48 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c50:	bf00      	nop
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr

08001c5c <__NVIC_SetPriorityGrouping>:
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	f003 0307 	and.w	r3, r3, #7
 8001c6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c72:	68ba      	ldr	r2, [r7, #8]
 8001c74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c78:	4013      	ands	r3, r2
 8001c7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c80:	68bb      	ldr	r3, [r7, #8]
 8001c82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c8e:	4a04      	ldr	r2, [pc, #16]	; (8001ca0 <__NVIC_SetPriorityGrouping+0x44>)
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	60d3      	str	r3, [r2, #12]
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr
 8001ca0:	e000ed00 	.word	0xe000ed00

08001ca4 <__NVIC_GetPriorityGrouping>:
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ca8:	4b04      	ldr	r3, [pc, #16]	; (8001cbc <__NVIC_GetPriorityGrouping+0x18>)
 8001caa:	68db      	ldr	r3, [r3, #12]
 8001cac:	0a1b      	lsrs	r3, r3, #8
 8001cae:	f003 0307 	and.w	r3, r3, #7
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	e000ed00 	.word	0xe000ed00

08001cc0 <__NVIC_EnableIRQ>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	db0b      	blt.n	8001cea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cd2:	79fb      	ldrb	r3, [r7, #7]
 8001cd4:	f003 021f 	and.w	r2, r3, #31
 8001cd8:	4907      	ldr	r1, [pc, #28]	; (8001cf8 <__NVIC_EnableIRQ+0x38>)
 8001cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cde:	095b      	lsrs	r3, r3, #5
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	fa00 f202 	lsl.w	r2, r0, r2
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr
 8001cf6:	bf00      	nop
 8001cf8:	e000e100 	.word	0xe000e100

08001cfc <__NVIC_SetPriority>:
{
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	4603      	mov	r3, r0
 8001d04:	6039      	str	r1, [r7, #0]
 8001d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	db0a      	blt.n	8001d26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	b2da      	uxtb	r2, r3
 8001d14:	490c      	ldr	r1, [pc, #48]	; (8001d48 <__NVIC_SetPriority+0x4c>)
 8001d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d1a:	0112      	lsls	r2, r2, #4
 8001d1c:	b2d2      	uxtb	r2, r2
 8001d1e:	440b      	add	r3, r1
 8001d20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001d24:	e00a      	b.n	8001d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	b2da      	uxtb	r2, r3
 8001d2a:	4908      	ldr	r1, [pc, #32]	; (8001d4c <__NVIC_SetPriority+0x50>)
 8001d2c:	79fb      	ldrb	r3, [r7, #7]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	3b04      	subs	r3, #4
 8001d34:	0112      	lsls	r2, r2, #4
 8001d36:	b2d2      	uxtb	r2, r2
 8001d38:	440b      	add	r3, r1
 8001d3a:	761a      	strb	r2, [r3, #24]
}
 8001d3c:	bf00      	nop
 8001d3e:	370c      	adds	r7, #12
 8001d40:	46bd      	mov	sp, r7
 8001d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d46:	4770      	bx	lr
 8001d48:	e000e100 	.word	0xe000e100
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <NVIC_EncodePriority>:
{
 8001d50:	b480      	push	{r7}
 8001d52:	b089      	sub	sp, #36	; 0x24
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	60b9      	str	r1, [r7, #8]
 8001d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 0307 	and.w	r3, r3, #7
 8001d62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	f1c3 0307 	rsb	r3, r3, #7
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	bf28      	it	cs
 8001d6e:	2304      	movcs	r3, #4
 8001d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	3304      	adds	r3, #4
 8001d76:	2b06      	cmp	r3, #6
 8001d78:	d902      	bls.n	8001d80 <NVIC_EncodePriority+0x30>
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	3b03      	subs	r3, #3
 8001d7e:	e000      	b.n	8001d82 <NVIC_EncodePriority+0x32>
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d84:	f04f 32ff 	mov.w	r2, #4294967295
 8001d88:	69bb      	ldr	r3, [r7, #24]
 8001d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8e:	43da      	mvns	r2, r3
 8001d90:	68bb      	ldr	r3, [r7, #8]
 8001d92:	401a      	ands	r2, r3
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d98:	f04f 31ff 	mov.w	r1, #4294967295
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8001da2:	43d9      	mvns	r1, r3
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da8:	4313      	orrs	r3, r2
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	3724      	adds	r7, #36	; 0x24
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db6:	b580      	push	{r7, lr}
 8001db8:	b082      	sub	sp, #8
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff4c 	bl	8001c5c <__NVIC_SetPriorityGrouping>
}
 8001dc4:	bf00      	nop
 8001dc6:	3708      	adds	r7, #8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}

08001dcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	b086      	sub	sp, #24
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001dde:	f7ff ff61 	bl	8001ca4 <__NVIC_GetPriorityGrouping>
 8001de2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de4:	687a      	ldr	r2, [r7, #4]
 8001de6:	68b9      	ldr	r1, [r7, #8]
 8001de8:	6978      	ldr	r0, [r7, #20]
 8001dea:	f7ff ffb1 	bl	8001d50 <NVIC_EncodePriority>
 8001dee:	4602      	mov	r2, r0
 8001df0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df4:	4611      	mov	r1, r2
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7ff ff80 	bl	8001cfc <__NVIC_SetPriority>
}
 8001dfc:	bf00      	nop
 8001dfe:	3718      	adds	r7, #24
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}

08001e04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7ff ff54 	bl	8001cc0 <__NVIC_EnableIRQ>
}
 8001e18:	bf00      	nop
 8001e1a:	3708      	adds	r7, #8
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}

08001e20 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b02      	cmp	r3, #2
 8001e32:	d004      	beq.n	8001e3e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2280      	movs	r2, #128	; 0x80
 8001e38:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e00c      	b.n	8001e58 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2205      	movs	r2, #5
 8001e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	681a      	ldr	r2, [r3, #0]
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f022 0201 	bic.w	r2, r2, #1
 8001e54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	370c      	adds	r7, #12
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b089      	sub	sp, #36	; 0x24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
 8001e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001e72:	2300      	movs	r3, #0
 8001e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001e76:	2300      	movs	r3, #0
 8001e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	61fb      	str	r3, [r7, #28]
 8001e7e:	e165      	b.n	800214c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001e80:	2201      	movs	r2, #1
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	fa02 f303 	lsl.w	r3, r2, r3
 8001e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	697a      	ldr	r2, [r7, #20]
 8001e90:	4013      	ands	r3, r2
 8001e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	429a      	cmp	r2, r3
 8001e9a:	f040 8154 	bne.w	8002146 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d00b      	beq.n	8001ebe <HAL_GPIO_Init+0x5a>
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b02      	cmp	r3, #2
 8001eac:	d007      	beq.n	8001ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001eb2:	2b11      	cmp	r3, #17
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	2b12      	cmp	r3, #18
 8001ebc:	d130      	bne.n	8001f20 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001ec4:	69fb      	ldr	r3, [r7, #28]
 8001ec6:	005b      	lsls	r3, r3, #1
 8001ec8:	2203      	movs	r2, #3
 8001eca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ece:	43db      	mvns	r3, r3
 8001ed0:	69ba      	ldr	r2, [r7, #24]
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68da      	ldr	r2, [r3, #12]
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	005b      	lsls	r3, r3, #1
 8001ede:	fa02 f303 	lsl.w	r3, r2, r3
 8001ee2:	69ba      	ldr	r2, [r7, #24]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69ba      	ldr	r2, [r7, #24]
 8001eec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	69fb      	ldr	r3, [r7, #28]
 8001ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8001efc:	43db      	mvns	r3, r3
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4013      	ands	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	091b      	lsrs	r3, r3, #4
 8001f0a:	f003 0201 	and.w	r2, r3, #1
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	fa02 f303 	lsl.w	r3, r2, r3
 8001f14:	69ba      	ldr	r2, [r7, #24]
 8001f16:	4313      	orrs	r3, r2
 8001f18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	68db      	ldr	r3, [r3, #12]
 8001f24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001f26:	69fb      	ldr	r3, [r7, #28]
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	2203      	movs	r2, #3
 8001f2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f30:	43db      	mvns	r3, r3
 8001f32:	69ba      	ldr	r2, [r7, #24]
 8001f34:	4013      	ands	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	689a      	ldr	r2, [r3, #8]
 8001f3c:	69fb      	ldr	r3, [r7, #28]
 8001f3e:	005b      	lsls	r3, r3, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	69ba      	ldr	r2, [r7, #24]
 8001f46:	4313      	orrs	r3, r2
 8001f48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	69ba      	ldr	r2, [r7, #24]
 8001f4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	2b02      	cmp	r3, #2
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0xfc>
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	2b12      	cmp	r3, #18
 8001f5e:	d123      	bne.n	8001fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001f60:	69fb      	ldr	r3, [r7, #28]
 8001f62:	08da      	lsrs	r2, r3, #3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	3208      	adds	r2, #8
 8001f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001f6e:	69fb      	ldr	r3, [r7, #28]
 8001f70:	f003 0307 	and.w	r3, r3, #7
 8001f74:	009b      	lsls	r3, r3, #2
 8001f76:	220f      	movs	r2, #15
 8001f78:	fa02 f303 	lsl.w	r3, r2, r3
 8001f7c:	43db      	mvns	r3, r3
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	4013      	ands	r3, r2
 8001f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	691a      	ldr	r2, [r3, #16]
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f003 0307 	and.w	r3, r3, #7
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	fa02 f303 	lsl.w	r3, r2, r3
 8001f94:	69ba      	ldr	r2, [r7, #24]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	08da      	lsrs	r2, r3, #3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	3208      	adds	r2, #8
 8001fa2:	69b9      	ldr	r1, [r7, #24]
 8001fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001fae:	69fb      	ldr	r3, [r7, #28]
 8001fb0:	005b      	lsls	r3, r3, #1
 8001fb2:	2203      	movs	r2, #3
 8001fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb8:	43db      	mvns	r3, r3
 8001fba:	69ba      	ldr	r2, [r7, #24]
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 0203 	and.w	r2, r3, #3
 8001fc8:	69fb      	ldr	r3, [r7, #28]
 8001fca:	005b      	lsls	r3, r3, #1
 8001fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001fd0:	69ba      	ldr	r2, [r7, #24]
 8001fd2:	4313      	orrs	r3, r2
 8001fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	69ba      	ldr	r2, [r7, #24]
 8001fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	685b      	ldr	r3, [r3, #4]
 8001fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	f000 80ae 	beq.w	8002146 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b5c      	ldr	r3, [pc, #368]	; (8002160 <HAL_GPIO_Init+0x2fc>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a5b      	ldr	r2, [pc, #364]	; (8002160 <HAL_GPIO_Init+0x2fc>)
 8001ff4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b59      	ldr	r3, [pc, #356]	; (8002160 <HAL_GPIO_Init+0x2fc>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002006:	4a57      	ldr	r2, [pc, #348]	; (8002164 <HAL_GPIO_Init+0x300>)
 8002008:	69fb      	ldr	r3, [r7, #28]
 800200a:	089b      	lsrs	r3, r3, #2
 800200c:	3302      	adds	r3, #2
 800200e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	f003 0303 	and.w	r3, r3, #3
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	220f      	movs	r2, #15
 800201e:	fa02 f303 	lsl.w	r3, r2, r3
 8002022:	43db      	mvns	r3, r3
 8002024:	69ba      	ldr	r2, [r7, #24]
 8002026:	4013      	ands	r3, r2
 8002028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	4a4e      	ldr	r2, [pc, #312]	; (8002168 <HAL_GPIO_Init+0x304>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d025      	beq.n	800207e <HAL_GPIO_Init+0x21a>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	4a4d      	ldr	r2, [pc, #308]	; (800216c <HAL_GPIO_Init+0x308>)
 8002036:	4293      	cmp	r3, r2
 8002038:	d01f      	beq.n	800207a <HAL_GPIO_Init+0x216>
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	4a4c      	ldr	r2, [pc, #304]	; (8002170 <HAL_GPIO_Init+0x30c>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d019      	beq.n	8002076 <HAL_GPIO_Init+0x212>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	4a4b      	ldr	r2, [pc, #300]	; (8002174 <HAL_GPIO_Init+0x310>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d013      	beq.n	8002072 <HAL_GPIO_Init+0x20e>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	4a4a      	ldr	r2, [pc, #296]	; (8002178 <HAL_GPIO_Init+0x314>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d00d      	beq.n	800206e <HAL_GPIO_Init+0x20a>
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	4a49      	ldr	r2, [pc, #292]	; (800217c <HAL_GPIO_Init+0x318>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d007      	beq.n	800206a <HAL_GPIO_Init+0x206>
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a48      	ldr	r2, [pc, #288]	; (8002180 <HAL_GPIO_Init+0x31c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d101      	bne.n	8002066 <HAL_GPIO_Init+0x202>
 8002062:	2306      	movs	r3, #6
 8002064:	e00c      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002066:	2307      	movs	r3, #7
 8002068:	e00a      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800206a:	2305      	movs	r3, #5
 800206c:	e008      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800206e:	2304      	movs	r3, #4
 8002070:	e006      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002072:	2303      	movs	r3, #3
 8002074:	e004      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 8002076:	2302      	movs	r3, #2
 8002078:	e002      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800207a:	2301      	movs	r3, #1
 800207c:	e000      	b.n	8002080 <HAL_GPIO_Init+0x21c>
 800207e:	2300      	movs	r3, #0
 8002080:	69fa      	ldr	r2, [r7, #28]
 8002082:	f002 0203 	and.w	r2, r2, #3
 8002086:	0092      	lsls	r2, r2, #2
 8002088:	4093      	lsls	r3, r2
 800208a:	69ba      	ldr	r2, [r7, #24]
 800208c:	4313      	orrs	r3, r2
 800208e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002090:	4934      	ldr	r1, [pc, #208]	; (8002164 <HAL_GPIO_Init+0x300>)
 8002092:	69fb      	ldr	r3, [r7, #28]
 8002094:	089b      	lsrs	r3, r3, #2
 8002096:	3302      	adds	r3, #2
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800209e:	4b39      	ldr	r3, [pc, #228]	; (8002184 <HAL_GPIO_Init+0x320>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020a4:	693b      	ldr	r3, [r7, #16]
 80020a6:	43db      	mvns	r3, r3
 80020a8:	69ba      	ldr	r2, [r7, #24]
 80020aa:	4013      	ands	r3, r2
 80020ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	685b      	ldr	r3, [r3, #4]
 80020b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80020ba:	69ba      	ldr	r2, [r7, #24]
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	4313      	orrs	r3, r2
 80020c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80020c2:	4a30      	ldr	r2, [pc, #192]	; (8002184 <HAL_GPIO_Init+0x320>)
 80020c4:	69bb      	ldr	r3, [r7, #24]
 80020c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80020c8:	4b2e      	ldr	r3, [pc, #184]	; (8002184 <HAL_GPIO_Init+0x320>)
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	43db      	mvns	r3, r3
 80020d2:	69ba      	ldr	r2, [r7, #24]
 80020d4:	4013      	ands	r3, r2
 80020d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80020e4:	69ba      	ldr	r2, [r7, #24]
 80020e6:	693b      	ldr	r3, [r7, #16]
 80020e8:	4313      	orrs	r3, r2
 80020ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80020ec:	4a25      	ldr	r2, [pc, #148]	; (8002184 <HAL_GPIO_Init+0x320>)
 80020ee:	69bb      	ldr	r3, [r7, #24]
 80020f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80020f2:	4b24      	ldr	r3, [pc, #144]	; (8002184 <HAL_GPIO_Init+0x320>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80020f8:	693b      	ldr	r3, [r7, #16]
 80020fa:	43db      	mvns	r3, r3
 80020fc:	69ba      	ldr	r2, [r7, #24]
 80020fe:	4013      	ands	r3, r2
 8002100:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800210a:	2b00      	cmp	r3, #0
 800210c:	d003      	beq.n	8002116 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800210e:	69ba      	ldr	r2, [r7, #24]
 8002110:	693b      	ldr	r3, [r7, #16]
 8002112:	4313      	orrs	r3, r2
 8002114:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002116:	4a1b      	ldr	r2, [pc, #108]	; (8002184 <HAL_GPIO_Init+0x320>)
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800211c:	4b19      	ldr	r3, [pc, #100]	; (8002184 <HAL_GPIO_Init+0x320>)
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	43db      	mvns	r3, r3
 8002126:	69ba      	ldr	r2, [r7, #24]
 8002128:	4013      	ands	r3, r2
 800212a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002134:	2b00      	cmp	r3, #0
 8002136:	d003      	beq.n	8002140 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002138:	69ba      	ldr	r2, [r7, #24]
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002140:	4a10      	ldr	r2, [pc, #64]	; (8002184 <HAL_GPIO_Init+0x320>)
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	3301      	adds	r3, #1
 800214a:	61fb      	str	r3, [r7, #28]
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	2b0f      	cmp	r3, #15
 8002150:	f67f ae96 	bls.w	8001e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002154:	bf00      	nop
 8002156:	3724      	adds	r7, #36	; 0x24
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40023800 	.word	0x40023800
 8002164:	40013800 	.word	0x40013800
 8002168:	40020000 	.word	0x40020000
 800216c:	40020400 	.word	0x40020400
 8002170:	40020800 	.word	0x40020800
 8002174:	40020c00 	.word	0x40020c00
 8002178:	40021000 	.word	0x40021000
 800217c:	40021400 	.word	0x40021400
 8002180:	40021800 	.word	0x40021800
 8002184:	40013c00 	.word	0x40013c00

08002188 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	460b      	mov	r3, r1
 8002192:	807b      	strh	r3, [r7, #2]
 8002194:	4613      	mov	r3, r2
 8002196:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002198:	787b      	ldrb	r3, [r7, #1]
 800219a:	2b00      	cmp	r3, #0
 800219c:	d003      	beq.n	80021a6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800219e:	887a      	ldrh	r2, [r7, #2]
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80021a4:	e003      	b.n	80021ae <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80021a6:	887b      	ldrh	r3, [r7, #2]
 80021a8:	041a      	lsls	r2, r3, #16
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	619a      	str	r2, [r3, #24]
}
 80021ae:	bf00      	nop
 80021b0:	370c      	adds	r7, #12
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
	...

080021bc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b082      	sub	sp, #8
 80021c0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80021c2:	2300      	movs	r3, #0
 80021c4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	603b      	str	r3, [r7, #0]
 80021ca:	4b20      	ldr	r3, [pc, #128]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a1f      	ldr	r2, [pc, #124]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b1d      	ldr	r3, [pc, #116]	; (800224c <HAL_PWREx_EnableOverDrive+0x90>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021de:	603b      	str	r3, [r7, #0]
 80021e0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_PWREx_EnableOverDrive+0x94>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e8:	f004 f9ba 	bl	8006560 <HAL_GetTick>
 80021ec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80021ee:	e009      	b.n	8002204 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80021f0:	f004 f9b6 	bl	8006560 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021fe:	d901      	bls.n	8002204 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e01f      	b.n	8002244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002204:	4b13      	ldr	r3, [pc, #76]	; (8002254 <HAL_PWREx_EnableOverDrive+0x98>)
 8002206:	685b      	ldr	r3, [r3, #4]
 8002208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800220c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002210:	d1ee      	bne.n	80021f0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002212:	4b11      	ldr	r3, [pc, #68]	; (8002258 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002214:	2201      	movs	r2, #1
 8002216:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002218:	f004 f9a2 	bl	8006560 <HAL_GetTick>
 800221c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800221e:	e009      	b.n	8002234 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002220:	f004 f99e 	bl	8006560 <HAL_GetTick>
 8002224:	4602      	mov	r2, r0
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	1ad3      	subs	r3, r2, r3
 800222a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800222e:	d901      	bls.n	8002234 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002230:	2303      	movs	r3, #3
 8002232:	e007      	b.n	8002244 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002234:	4b07      	ldr	r3, [pc, #28]	; (8002254 <HAL_PWREx_EnableOverDrive+0x98>)
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002240:	d1ee      	bne.n	8002220 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40023800 	.word	0x40023800
 8002250:	420e0040 	.word	0x420e0040
 8002254:	40007000 	.word	0x40007000
 8002258:	420e0044 	.word	0x420e0044

0800225c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b084      	sub	sp, #16
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
 8002264:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e0cc      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002270:	4b68      	ldr	r3, [pc, #416]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 030f 	and.w	r3, r3, #15
 8002278:	683a      	ldr	r2, [r7, #0]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90c      	bls.n	8002298 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800227e:	4b65      	ldr	r3, [pc, #404]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	b2d2      	uxtb	r2, r2
 8002284:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002286:	4b63      	ldr	r3, [pc, #396]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	429a      	cmp	r2, r3
 8002292:	d001      	beq.n	8002298 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e0b8      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0302 	and.w	r3, r3, #2
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d020      	beq.n	80022e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0304 	and.w	r3, r3, #4
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d005      	beq.n	80022bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b0:	4b59      	ldr	r3, [pc, #356]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	4a58      	ldr	r2, [pc, #352]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0308 	and.w	r3, r3, #8
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d005      	beq.n	80022d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022c8:	4b53      	ldr	r3, [pc, #332]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	4a52      	ldr	r2, [pc, #328]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d4:	4b50      	ldr	r3, [pc, #320]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	494d      	ldr	r1, [pc, #308]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022e2:	4313      	orrs	r3, r2
 80022e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f003 0301 	and.w	r3, r3, #1
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d044      	beq.n	800237c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d107      	bne.n	800230a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002302:	2b00      	cmp	r3, #0
 8002304:	d119      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	e07f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	2b02      	cmp	r3, #2
 8002310:	d003      	beq.n	800231a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002316:	2b03      	cmp	r3, #3
 8002318:	d107      	bne.n	800232a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231a:	4b3f      	ldr	r3, [pc, #252]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e06f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232a:	4b3b      	ldr	r3, [pc, #236]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	2b00      	cmp	r3, #0
 8002334:	d101      	bne.n	800233a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e067      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233a:	4b37      	ldr	r3, [pc, #220]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f023 0203 	bic.w	r2, r3, #3
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	4934      	ldr	r1, [pc, #208]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 8002348:	4313      	orrs	r3, r2
 800234a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800234c:	f004 f908 	bl	8006560 <HAL_GetTick>
 8002350:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002352:	e00a      	b.n	800236a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002354:	f004 f904 	bl	8006560 <HAL_GetTick>
 8002358:	4602      	mov	r2, r0
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002362:	4293      	cmp	r3, r2
 8002364:	d901      	bls.n	800236a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002366:	2303      	movs	r3, #3
 8002368:	e04f      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	f003 020c 	and.w	r2, r3, #12
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	009b      	lsls	r3, r3, #2
 8002378:	429a      	cmp	r2, r3
 800237a:	d1eb      	bne.n	8002354 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f003 030f 	and.w	r3, r3, #15
 8002384:	683a      	ldr	r2, [r7, #0]
 8002386:	429a      	cmp	r2, r3
 8002388:	d20c      	bcs.n	80023a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238a:	4b22      	ldr	r3, [pc, #136]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002392:	4b20      	ldr	r3, [pc, #128]	; (8002414 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 030f 	and.w	r3, r3, #15
 800239a:	683a      	ldr	r2, [r7, #0]
 800239c:	429a      	cmp	r2, r3
 800239e:	d001      	beq.n	80023a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e032      	b.n	800240a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f003 0304 	and.w	r3, r3, #4
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d008      	beq.n	80023c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b0:	4b19      	ldr	r3, [pc, #100]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	4916      	ldr	r1, [pc, #88]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023be:	4313      	orrs	r3, r2
 80023c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0308 	and.w	r3, r3, #8
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d009      	beq.n	80023e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023ce:	4b12      	ldr	r3, [pc, #72]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691b      	ldr	r3, [r3, #16]
 80023da:	00db      	lsls	r3, r3, #3
 80023dc:	490e      	ldr	r1, [pc, #56]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	4313      	orrs	r3, r2
 80023e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e2:	f000 f887 	bl	80024f4 <HAL_RCC_GetSysClockFreq>
 80023e6:	4601      	mov	r1, r0
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	091b      	lsrs	r3, r3, #4
 80023ee:	f003 030f 	and.w	r3, r3, #15
 80023f2:	4a0a      	ldr	r2, [pc, #40]	; (800241c <HAL_RCC_ClockConfig+0x1c0>)
 80023f4:	5cd3      	ldrb	r3, [r2, r3]
 80023f6:	fa21 f303 	lsr.w	r3, r1, r3
 80023fa:	4a09      	ldr	r2, [pc, #36]	; (8002420 <HAL_RCC_ClockConfig+0x1c4>)
 80023fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023fe:	4b09      	ldr	r3, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4618      	mov	r0, r3
 8002404:	f7fe fd44 	bl	8000e90 <HAL_InitTick>

  return HAL_OK;
 8002408:	2300      	movs	r3, #0
}
 800240a:	4618      	mov	r0, r3
 800240c:	3710      	adds	r7, #16
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	40023c00 	.word	0x40023c00
 8002418:	40023800 	.word	0x40023800
 800241c:	08007b18 	.word	0x08007b18
 8002420:	20000034 	.word	0x20000034
 8002424:	20000038 	.word	0x20000038

08002428 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002428:	b480      	push	{r7}
 800242a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800242c:	4b03      	ldr	r3, [pc, #12]	; (800243c <HAL_RCC_GetHCLKFreq+0x14>)
 800242e:	681b      	ldr	r3, [r3, #0]
}
 8002430:	4618      	mov	r0, r3
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000034 	.word	0x20000034

08002440 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002444:	f7ff fff0 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002448:	4601      	mov	r1, r0
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_RCC_GetPCLK1Freq+0x20>)
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	0a9b      	lsrs	r3, r3, #10
 8002450:	f003 0307 	and.w	r3, r3, #7
 8002454:	4a03      	ldr	r2, [pc, #12]	; (8002464 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002456:	5cd3      	ldrb	r3, [r2, r3]
 8002458:	fa21 f303 	lsr.w	r3, r1, r3
}
 800245c:	4618      	mov	r0, r3
 800245e:	bd80      	pop	{r7, pc}
 8002460:	40023800 	.word	0x40023800
 8002464:	08007b28 	.word	0x08007b28

08002468 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800246c:	f7ff ffdc 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 8002470:	4601      	mov	r1, r0
 8002472:	4b05      	ldr	r3, [pc, #20]	; (8002488 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002474:	689b      	ldr	r3, [r3, #8]
 8002476:	0b5b      	lsrs	r3, r3, #13
 8002478:	f003 0307 	and.w	r3, r3, #7
 800247c:	4a03      	ldr	r2, [pc, #12]	; (800248c <HAL_RCC_GetPCLK2Freq+0x24>)
 800247e:	5cd3      	ldrb	r3, [r2, r3]
 8002480:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002484:	4618      	mov	r0, r3
 8002486:	bd80      	pop	{r7, pc}
 8002488:	40023800 	.word	0x40023800
 800248c:	08007b28 	.word	0x08007b28

08002490 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002490:	b480      	push	{r7}
 8002492:	b083      	sub	sp, #12
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	220f      	movs	r2, #15
 800249e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80024a0:	4b12      	ldr	r3, [pc, #72]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0203 	and.w	r2, r3, #3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80024ac:	4b0f      	ldr	r3, [pc, #60]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80024b8:	4b0c      	ldr	r3, [pc, #48]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80024c4:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_RCC_GetClockConfig+0x5c>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	08db      	lsrs	r3, r3, #3
 80024ca:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80024d2:	4b07      	ldr	r3, [pc, #28]	; (80024f0 <HAL_RCC_GetClockConfig+0x60>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 020f 	and.w	r2, r3, #15
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	601a      	str	r2, [r3, #0]
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40023c00 	.word	0x40023c00

080024f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024f6:	b087      	sub	sp, #28
 80024f8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80024fa:	2300      	movs	r3, #0
 80024fc:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 80024fe:	2300      	movs	r3, #0
 8002500:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8002502:	2300      	movs	r3, #0
 8002504:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8002506:	2300      	movs	r3, #0
 8002508:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800250a:	2300      	movs	r3, #0
 800250c:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800250e:	4bc6      	ldr	r3, [pc, #792]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b0c      	cmp	r3, #12
 8002518:	f200 817e 	bhi.w	8002818 <HAL_RCC_GetSysClockFreq+0x324>
 800251c:	a201      	add	r2, pc, #4	; (adr r2, 8002524 <HAL_RCC_GetSysClockFreq+0x30>)
 800251e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002522:	bf00      	nop
 8002524:	08002559 	.word	0x08002559
 8002528:	08002819 	.word	0x08002819
 800252c:	08002819 	.word	0x08002819
 8002530:	08002819 	.word	0x08002819
 8002534:	0800255f 	.word	0x0800255f
 8002538:	08002819 	.word	0x08002819
 800253c:	08002819 	.word	0x08002819
 8002540:	08002819 	.word	0x08002819
 8002544:	08002565 	.word	0x08002565
 8002548:	08002819 	.word	0x08002819
 800254c:	08002819 	.word	0x08002819
 8002550:	08002819 	.word	0x08002819
 8002554:	080026c1 	.word	0x080026c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002558:	4bb4      	ldr	r3, [pc, #720]	; (800282c <HAL_RCC_GetSysClockFreq+0x338>)
 800255a:	613b      	str	r3, [r7, #16]
       break;
 800255c:	e15f      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800255e:	4bb4      	ldr	r3, [pc, #720]	; (8002830 <HAL_RCC_GetSysClockFreq+0x33c>)
 8002560:	613b      	str	r3, [r7, #16]
      break;
 8002562:	e15c      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002564:	4bb0      	ldr	r3, [pc, #704]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800256c:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800256e:	4bae      	ldr	r3, [pc, #696]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002576:	2b00      	cmp	r3, #0
 8002578:	d04a      	beq.n	8002610 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800257a:	4bab      	ldr	r3, [pc, #684]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	099b      	lsrs	r3, r3, #6
 8002580:	f04f 0400 	mov.w	r4, #0
 8002584:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002588:	f04f 0200 	mov.w	r2, #0
 800258c:	ea03 0501 	and.w	r5, r3, r1
 8002590:	ea04 0602 	and.w	r6, r4, r2
 8002594:	4629      	mov	r1, r5
 8002596:	4632      	mov	r2, r6
 8002598:	f04f 0300 	mov.w	r3, #0
 800259c:	f04f 0400 	mov.w	r4, #0
 80025a0:	0154      	lsls	r4, r2, #5
 80025a2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80025a6:	014b      	lsls	r3, r1, #5
 80025a8:	4619      	mov	r1, r3
 80025aa:	4622      	mov	r2, r4
 80025ac:	1b49      	subs	r1, r1, r5
 80025ae:	eb62 0206 	sbc.w	r2, r2, r6
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	f04f 0400 	mov.w	r4, #0
 80025ba:	0194      	lsls	r4, r2, #6
 80025bc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80025c0:	018b      	lsls	r3, r1, #6
 80025c2:	1a5b      	subs	r3, r3, r1
 80025c4:	eb64 0402 	sbc.w	r4, r4, r2
 80025c8:	f04f 0100 	mov.w	r1, #0
 80025cc:	f04f 0200 	mov.w	r2, #0
 80025d0:	00e2      	lsls	r2, r4, #3
 80025d2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80025d6:	00d9      	lsls	r1, r3, #3
 80025d8:	460b      	mov	r3, r1
 80025da:	4614      	mov	r4, r2
 80025dc:	195b      	adds	r3, r3, r5
 80025de:	eb44 0406 	adc.w	r4, r4, r6
 80025e2:	f04f 0100 	mov.w	r1, #0
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	0262      	lsls	r2, r4, #9
 80025ec:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 80025f0:	0259      	lsls	r1, r3, #9
 80025f2:	460b      	mov	r3, r1
 80025f4:	4614      	mov	r4, r2
 80025f6:	4618      	mov	r0, r3
 80025f8:	4621      	mov	r1, r4
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	f04f 0400 	mov.w	r4, #0
 8002600:	461a      	mov	r2, r3
 8002602:	4623      	mov	r3, r4
 8002604:	f7fd fe5c 	bl	80002c0 <__aeabi_uldivmod>
 8002608:	4603      	mov	r3, r0
 800260a:	460c      	mov	r4, r1
 800260c:	617b      	str	r3, [r7, #20]
 800260e:	e049      	b.n	80026a4 <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002610:	4b85      	ldr	r3, [pc, #532]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	099b      	lsrs	r3, r3, #6
 8002616:	f04f 0400 	mov.w	r4, #0
 800261a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800261e:	f04f 0200 	mov.w	r2, #0
 8002622:	ea03 0501 	and.w	r5, r3, r1
 8002626:	ea04 0602 	and.w	r6, r4, r2
 800262a:	4629      	mov	r1, r5
 800262c:	4632      	mov	r2, r6
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	f04f 0400 	mov.w	r4, #0
 8002636:	0154      	lsls	r4, r2, #5
 8002638:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800263c:	014b      	lsls	r3, r1, #5
 800263e:	4619      	mov	r1, r3
 8002640:	4622      	mov	r2, r4
 8002642:	1b49      	subs	r1, r1, r5
 8002644:	eb62 0206 	sbc.w	r2, r2, r6
 8002648:	f04f 0300 	mov.w	r3, #0
 800264c:	f04f 0400 	mov.w	r4, #0
 8002650:	0194      	lsls	r4, r2, #6
 8002652:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8002656:	018b      	lsls	r3, r1, #6
 8002658:	1a5b      	subs	r3, r3, r1
 800265a:	eb64 0402 	sbc.w	r4, r4, r2
 800265e:	f04f 0100 	mov.w	r1, #0
 8002662:	f04f 0200 	mov.w	r2, #0
 8002666:	00e2      	lsls	r2, r4, #3
 8002668:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800266c:	00d9      	lsls	r1, r3, #3
 800266e:	460b      	mov	r3, r1
 8002670:	4614      	mov	r4, r2
 8002672:	195b      	adds	r3, r3, r5
 8002674:	eb44 0406 	adc.w	r4, r4, r6
 8002678:	f04f 0100 	mov.w	r1, #0
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	02a2      	lsls	r2, r4, #10
 8002682:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8002686:	0299      	lsls	r1, r3, #10
 8002688:	460b      	mov	r3, r1
 800268a:	4614      	mov	r4, r2
 800268c:	4618      	mov	r0, r3
 800268e:	4621      	mov	r1, r4
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	f04f 0400 	mov.w	r4, #0
 8002696:	461a      	mov	r2, r3
 8002698:	4623      	mov	r3, r4
 800269a:	f7fd fe11 	bl	80002c0 <__aeabi_uldivmod>
 800269e:	4603      	mov	r3, r0
 80026a0:	460c      	mov	r4, r1
 80026a2:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80026a4:	4b60      	ldr	r3, [pc, #384]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	0c1b      	lsrs	r3, r3, #16
 80026aa:	f003 0303 	and.w	r3, r3, #3
 80026ae:	3301      	adds	r3, #1
 80026b0:	005b      	lsls	r3, r3, #1
 80026b2:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026bc:	613b      	str	r3, [r7, #16]
      break;
 80026be:	e0ae      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80026c0:	4b59      	ldr	r3, [pc, #356]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80026c8:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80026ca:	4b57      	ldr	r3, [pc, #348]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d04a      	beq.n	800276c <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80026d6:	4b54      	ldr	r3, [pc, #336]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	099b      	lsrs	r3, r3, #6
 80026dc:	f04f 0400 	mov.w	r4, #0
 80026e0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80026e4:	f04f 0200 	mov.w	r2, #0
 80026e8:	ea03 0501 	and.w	r5, r3, r1
 80026ec:	ea04 0602 	and.w	r6, r4, r2
 80026f0:	4629      	mov	r1, r5
 80026f2:	4632      	mov	r2, r6
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	f04f 0400 	mov.w	r4, #0
 80026fc:	0154      	lsls	r4, r2, #5
 80026fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002702:	014b      	lsls	r3, r1, #5
 8002704:	4619      	mov	r1, r3
 8002706:	4622      	mov	r2, r4
 8002708:	1b49      	subs	r1, r1, r5
 800270a:	eb62 0206 	sbc.w	r2, r2, r6
 800270e:	f04f 0300 	mov.w	r3, #0
 8002712:	f04f 0400 	mov.w	r4, #0
 8002716:	0194      	lsls	r4, r2, #6
 8002718:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800271c:	018b      	lsls	r3, r1, #6
 800271e:	1a5b      	subs	r3, r3, r1
 8002720:	eb64 0402 	sbc.w	r4, r4, r2
 8002724:	f04f 0100 	mov.w	r1, #0
 8002728:	f04f 0200 	mov.w	r2, #0
 800272c:	00e2      	lsls	r2, r4, #3
 800272e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002732:	00d9      	lsls	r1, r3, #3
 8002734:	460b      	mov	r3, r1
 8002736:	4614      	mov	r4, r2
 8002738:	195b      	adds	r3, r3, r5
 800273a:	eb44 0406 	adc.w	r4, r4, r6
 800273e:	f04f 0100 	mov.w	r1, #0
 8002742:	f04f 0200 	mov.w	r2, #0
 8002746:	0262      	lsls	r2, r4, #9
 8002748:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800274c:	0259      	lsls	r1, r3, #9
 800274e:	460b      	mov	r3, r1
 8002750:	4614      	mov	r4, r2
 8002752:	4618      	mov	r0, r3
 8002754:	4621      	mov	r1, r4
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f04f 0400 	mov.w	r4, #0
 800275c:	461a      	mov	r2, r3
 800275e:	4623      	mov	r3, r4
 8002760:	f7fd fdae 	bl	80002c0 <__aeabi_uldivmod>
 8002764:	4603      	mov	r3, r0
 8002766:	460c      	mov	r4, r1
 8002768:	617b      	str	r3, [r7, #20]
 800276a:	e049      	b.n	8002800 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800276c:	4b2e      	ldr	r3, [pc, #184]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	099b      	lsrs	r3, r3, #6
 8002772:	f04f 0400 	mov.w	r4, #0
 8002776:	f240 11ff 	movw	r1, #511	; 0x1ff
 800277a:	f04f 0200 	mov.w	r2, #0
 800277e:	ea03 0501 	and.w	r5, r3, r1
 8002782:	ea04 0602 	and.w	r6, r4, r2
 8002786:	4629      	mov	r1, r5
 8002788:	4632      	mov	r2, r6
 800278a:	f04f 0300 	mov.w	r3, #0
 800278e:	f04f 0400 	mov.w	r4, #0
 8002792:	0154      	lsls	r4, r2, #5
 8002794:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002798:	014b      	lsls	r3, r1, #5
 800279a:	4619      	mov	r1, r3
 800279c:	4622      	mov	r2, r4
 800279e:	1b49      	subs	r1, r1, r5
 80027a0:	eb62 0206 	sbc.w	r2, r2, r6
 80027a4:	f04f 0300 	mov.w	r3, #0
 80027a8:	f04f 0400 	mov.w	r4, #0
 80027ac:	0194      	lsls	r4, r2, #6
 80027ae:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80027b2:	018b      	lsls	r3, r1, #6
 80027b4:	1a5b      	subs	r3, r3, r1
 80027b6:	eb64 0402 	sbc.w	r4, r4, r2
 80027ba:	f04f 0100 	mov.w	r1, #0
 80027be:	f04f 0200 	mov.w	r2, #0
 80027c2:	00e2      	lsls	r2, r4, #3
 80027c4:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80027c8:	00d9      	lsls	r1, r3, #3
 80027ca:	460b      	mov	r3, r1
 80027cc:	4614      	mov	r4, r2
 80027ce:	195b      	adds	r3, r3, r5
 80027d0:	eb44 0406 	adc.w	r4, r4, r6
 80027d4:	f04f 0100 	mov.w	r1, #0
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	02a2      	lsls	r2, r4, #10
 80027de:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80027e2:	0299      	lsls	r1, r3, #10
 80027e4:	460b      	mov	r3, r1
 80027e6:	4614      	mov	r4, r2
 80027e8:	4618      	mov	r0, r3
 80027ea:	4621      	mov	r1, r4
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f04f 0400 	mov.w	r4, #0
 80027f2:	461a      	mov	r2, r3
 80027f4:	4623      	mov	r3, r4
 80027f6:	f7fd fd63 	bl	80002c0 <__aeabi_uldivmod>
 80027fa:	4603      	mov	r3, r0
 80027fc:	460c      	mov	r4, r1
 80027fe:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002800:	4b09      	ldr	r3, [pc, #36]	; (8002828 <HAL_RCC_GetSysClockFreq+0x334>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	0f1b      	lsrs	r3, r3, #28
 8002806:	f003 0307 	and.w	r3, r3, #7
 800280a:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 800280c:	697a      	ldr	r2, [r7, #20]
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	fbb2 f3f3 	udiv	r3, r2, r3
 8002814:	613b      	str	r3, [r7, #16]
      break;
 8002816:	e002      	b.n	800281e <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002818:	4b04      	ldr	r3, [pc, #16]	; (800282c <HAL_RCC_GetSysClockFreq+0x338>)
 800281a:	613b      	str	r3, [r7, #16]
      break;
 800281c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800281e:	693b      	ldr	r3, [r7, #16]
}
 8002820:	4618      	mov	r0, r3
 8002822:	371c      	adds	r7, #28
 8002824:	46bd      	mov	sp, r7
 8002826:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002828:	40023800 	.word	0x40023800
 800282c:	00f42400 	.word	0x00f42400
 8002830:	007a1200 	.word	0x007a1200

08002834 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b086      	sub	sp, #24
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0301 	and.w	r3, r3, #1
 8002848:	2b00      	cmp	r3, #0
 800284a:	f000 8083 	beq.w	8002954 <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800284e:	4b95      	ldr	r3, [pc, #596]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 030c 	and.w	r3, r3, #12
 8002856:	2b04      	cmp	r3, #4
 8002858:	d019      	beq.n	800288e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800285a:	4b92      	ldr	r3, [pc, #584]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 800285c:	689b      	ldr	r3, [r3, #8]
 800285e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002862:	2b08      	cmp	r3, #8
 8002864:	d106      	bne.n	8002874 <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002866:	4b8f      	ldr	r3, [pc, #572]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002868:	685b      	ldr	r3, [r3, #4]
 800286a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002872:	d00c      	beq.n	800288e <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002874:	4b8b      	ldr	r3, [pc, #556]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800287c:	2b0c      	cmp	r3, #12
 800287e:	d112      	bne.n	80028a6 <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002880:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002888:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800288c:	d10b      	bne.n	80028a6 <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800288e:	4b85      	ldr	r3, [pc, #532]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d05b      	beq.n	8002952 <HAL_RCC_OscConfig+0x11e>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d157      	bne.n	8002952 <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e216      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028ae:	d106      	bne.n	80028be <HAL_RCC_OscConfig+0x8a>
 80028b0:	4b7c      	ldr	r3, [pc, #496]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a7b      	ldr	r2, [pc, #492]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028ba:	6013      	str	r3, [r2, #0]
 80028bc:	e01d      	b.n	80028fa <HAL_RCC_OscConfig+0xc6>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	685b      	ldr	r3, [r3, #4]
 80028c2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80028c6:	d10c      	bne.n	80028e2 <HAL_RCC_OscConfig+0xae>
 80028c8:	4b76      	ldr	r3, [pc, #472]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	4a75      	ldr	r2, [pc, #468]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80028d2:	6013      	str	r3, [r2, #0]
 80028d4:	4b73      	ldr	r3, [pc, #460]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4a72      	ldr	r2, [pc, #456]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028de:	6013      	str	r3, [r2, #0]
 80028e0:	e00b      	b.n	80028fa <HAL_RCC_OscConfig+0xc6>
 80028e2:	4b70      	ldr	r3, [pc, #448]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4a6f      	ldr	r2, [pc, #444]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ec:	6013      	str	r3, [r2, #0]
 80028ee:	4b6d      	ldr	r3, [pc, #436]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a6c      	ldr	r2, [pc, #432]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80028f4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028f8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d013      	beq.n	800292a <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002902:	f003 fe2d 	bl	8006560 <HAL_GetTick>
 8002906:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002908:	e008      	b.n	800291c <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800290a:	f003 fe29 	bl	8006560 <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	2b64      	cmp	r3, #100	; 0x64
 8002916:	d901      	bls.n	800291c <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002918:	2303      	movs	r3, #3
 800291a:	e1db      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800291c:	4b61      	ldr	r3, [pc, #388]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002924:	2b00      	cmp	r3, #0
 8002926:	d0f0      	beq.n	800290a <HAL_RCC_OscConfig+0xd6>
 8002928:	e014      	b.n	8002954 <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292a:	f003 fe19 	bl	8006560 <HAL_GetTick>
 800292e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002930:	e008      	b.n	8002944 <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002932:	f003 fe15 	bl	8006560 <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	693b      	ldr	r3, [r7, #16]
 800293a:	1ad3      	subs	r3, r2, r3
 800293c:	2b64      	cmp	r3, #100	; 0x64
 800293e:	d901      	bls.n	8002944 <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e1c7      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002944:	4b57      	ldr	r3, [pc, #348]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800294c:	2b00      	cmp	r3, #0
 800294e:	d1f0      	bne.n	8002932 <HAL_RCC_OscConfig+0xfe>
 8002950:	e000      	b.n	8002954 <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002952:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f003 0302 	and.w	r3, r3, #2
 800295c:	2b00      	cmp	r3, #0
 800295e:	d06f      	beq.n	8002a40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002960:	4b50      	ldr	r3, [pc, #320]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f003 030c 	and.w	r3, r3, #12
 8002968:	2b00      	cmp	r3, #0
 800296a:	d017      	beq.n	800299c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800296c:	4b4d      	ldr	r3, [pc, #308]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002974:	2b08      	cmp	r3, #8
 8002976:	d105      	bne.n	8002984 <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002978:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002980:	2b00      	cmp	r3, #0
 8002982:	d00b      	beq.n	800299c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002984:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800298c:	2b0c      	cmp	r3, #12
 800298e:	d11c      	bne.n	80029ca <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002990:	4b44      	ldr	r3, [pc, #272]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d116      	bne.n	80029ca <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800299c:	4b41      	ldr	r3, [pc, #260]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f003 0302 	and.w	r3, r3, #2
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d005      	beq.n	80029b4 <HAL_RCC_OscConfig+0x180>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	d001      	beq.n	80029b4 <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e18f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029b4:	4b3b      	ldr	r3, [pc, #236]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	691b      	ldr	r3, [r3, #16]
 80029c0:	00db      	lsls	r3, r3, #3
 80029c2:	4938      	ldr	r1, [pc, #224]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029c4:	4313      	orrs	r3, r2
 80029c6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029c8:	e03a      	b.n	8002a40 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	68db      	ldr	r3, [r3, #12]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d020      	beq.n	8002a14 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029d2:	4b35      	ldr	r3, [pc, #212]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 80029d4:	2201      	movs	r2, #1
 80029d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029d8:	f003 fdc2 	bl	8006560 <HAL_GetTick>
 80029dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029de:	e008      	b.n	80029f2 <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80029e0:	f003 fdbe 	bl	8006560 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	2b02      	cmp	r3, #2
 80029ec:	d901      	bls.n	80029f2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80029ee:	2303      	movs	r3, #3
 80029f0:	e170      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029f2:	4b2c      	ldr	r3, [pc, #176]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0302 	and.w	r3, r3, #2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d0f0      	beq.n	80029e0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029fe:	4b29      	ldr	r3, [pc, #164]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4925      	ldr	r1, [pc, #148]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	600b      	str	r3, [r1, #0]
 8002a12:	e015      	b.n	8002a40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a14:	4b24      	ldr	r3, [pc, #144]	; (8002aa8 <HAL_RCC_OscConfig+0x274>)
 8002a16:	2200      	movs	r2, #0
 8002a18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a1a:	f003 fda1 	bl	8006560 <HAL_GetTick>
 8002a1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a20:	e008      	b.n	8002a34 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002a22:	f003 fd9d 	bl	8006560 <HAL_GetTick>
 8002a26:	4602      	mov	r2, r0
 8002a28:	693b      	ldr	r3, [r7, #16]
 8002a2a:	1ad3      	subs	r3, r2, r3
 8002a2c:	2b02      	cmp	r3, #2
 8002a2e:	d901      	bls.n	8002a34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002a30:	2303      	movs	r3, #3
 8002a32:	e14f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a34:	4b1b      	ldr	r3, [pc, #108]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0302 	and.w	r3, r3, #2
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d1f0      	bne.n	8002a22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f003 0308 	and.w	r3, r3, #8
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d037      	beq.n	8002abc <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	695b      	ldr	r3, [r3, #20]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d016      	beq.n	8002a82 <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a54:	4b15      	ldr	r3, [pc, #84]	; (8002aac <HAL_RCC_OscConfig+0x278>)
 8002a56:	2201      	movs	r2, #1
 8002a58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a5a:	f003 fd81 	bl	8006560 <HAL_GetTick>
 8002a5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a60:	e008      	b.n	8002a74 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a62:	f003 fd7d 	bl	8006560 <HAL_GetTick>
 8002a66:	4602      	mov	r2, r0
 8002a68:	693b      	ldr	r3, [r7, #16]
 8002a6a:	1ad3      	subs	r3, r2, r3
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d901      	bls.n	8002a74 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002a70:	2303      	movs	r3, #3
 8002a72:	e12f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a74:	4b0b      	ldr	r3, [pc, #44]	; (8002aa4 <HAL_RCC_OscConfig+0x270>)
 8002a76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a78:	f003 0302 	and.w	r3, r3, #2
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d0f0      	beq.n	8002a62 <HAL_RCC_OscConfig+0x22e>
 8002a80:	e01c      	b.n	8002abc <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a82:	4b0a      	ldr	r3, [pc, #40]	; (8002aac <HAL_RCC_OscConfig+0x278>)
 8002a84:	2200      	movs	r2, #0
 8002a86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a88:	f003 fd6a 	bl	8006560 <HAL_GetTick>
 8002a8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	e00f      	b.n	8002ab0 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a90:	f003 fd66 	bl	8006560 <HAL_GetTick>
 8002a94:	4602      	mov	r2, r0
 8002a96:	693b      	ldr	r3, [r7, #16]
 8002a98:	1ad3      	subs	r3, r2, r3
 8002a9a:	2b02      	cmp	r3, #2
 8002a9c:	d908      	bls.n	8002ab0 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e118      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
 8002aa2:	bf00      	nop
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	42470000 	.word	0x42470000
 8002aac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ab0:	4b8a      	ldr	r3, [pc, #552]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002ab2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ab4:	f003 0302 	and.w	r3, r3, #2
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d1e9      	bne.n	8002a90 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0304 	and.w	r3, r3, #4
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	f000 8097 	beq.w	8002bf8 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002aca:	2300      	movs	r3, #0
 8002acc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ace:	4b83      	ldr	r3, [pc, #524]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d10f      	bne.n	8002afa <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b7f      	ldr	r3, [pc, #508]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	4a7e      	ldr	r2, [pc, #504]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002ae4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ae8:	6413      	str	r3, [r2, #64]	; 0x40
 8002aea:	4b7c      	ldr	r3, [pc, #496]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002af6:	2301      	movs	r3, #1
 8002af8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afa:	4b79      	ldr	r3, [pc, #484]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d118      	bne.n	8002b38 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b06:	4b76      	ldr	r3, [pc, #472]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a75      	ldr	r2, [pc, #468]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b10:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b12:	f003 fd25 	bl	8006560 <HAL_GetTick>
 8002b16:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b18:	e008      	b.n	8002b2c <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b1a:	f003 fd21 	bl	8006560 <HAL_GetTick>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	1ad3      	subs	r3, r2, r3
 8002b24:	2b02      	cmp	r3, #2
 8002b26:	d901      	bls.n	8002b2c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b28:	2303      	movs	r3, #3
 8002b2a:	e0d3      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b2c:	4b6c      	ldr	r3, [pc, #432]	; (8002ce0 <HAL_RCC_OscConfig+0x4ac>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d0f0      	beq.n	8002b1a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	689b      	ldr	r3, [r3, #8]
 8002b3c:	2b01      	cmp	r3, #1
 8002b3e:	d106      	bne.n	8002b4e <HAL_RCC_OscConfig+0x31a>
 8002b40:	4b66      	ldr	r3, [pc, #408]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b44:	4a65      	ldr	r2, [pc, #404]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b46:	f043 0301 	orr.w	r3, r3, #1
 8002b4a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b4c:	e01c      	b.n	8002b88 <HAL_RCC_OscConfig+0x354>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	2b05      	cmp	r3, #5
 8002b54:	d10c      	bne.n	8002b70 <HAL_RCC_OscConfig+0x33c>
 8002b56:	4b61      	ldr	r3, [pc, #388]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b5a:	4a60      	ldr	r2, [pc, #384]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b5c:	f043 0304 	orr.w	r3, r3, #4
 8002b60:	6713      	str	r3, [r2, #112]	; 0x70
 8002b62:	4b5e      	ldr	r3, [pc, #376]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b66:	4a5d      	ldr	r2, [pc, #372]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6713      	str	r3, [r2, #112]	; 0x70
 8002b6e:	e00b      	b.n	8002b88 <HAL_RCC_OscConfig+0x354>
 8002b70:	4b5a      	ldr	r3, [pc, #360]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b74:	4a59      	ldr	r2, [pc, #356]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b76:	f023 0301 	bic.w	r3, r3, #1
 8002b7a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b7c:	4b57      	ldr	r3, [pc, #348]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b80:	4a56      	ldr	r2, [pc, #344]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002b82:	f023 0304 	bic.w	r3, r3, #4
 8002b86:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d015      	beq.n	8002bbc <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b90:	f003 fce6 	bl	8006560 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b96:	e00a      	b.n	8002bae <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b98:	f003 fce2 	bl	8006560 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d901      	bls.n	8002bae <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8002baa:	2303      	movs	r3, #3
 8002bac:	e092      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bae:	4b4b      	ldr	r3, [pc, #300]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb2:	f003 0302 	and.w	r3, r3, #2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d0ee      	beq.n	8002b98 <HAL_RCC_OscConfig+0x364>
 8002bba:	e014      	b.n	8002be6 <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bbc:	f003 fcd0 	bl	8006560 <HAL_GetTick>
 8002bc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bc2:	e00a      	b.n	8002bda <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002bc4:	f003 fccc 	bl	8006560 <HAL_GetTick>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	693b      	ldr	r3, [r7, #16]
 8002bcc:	1ad3      	subs	r3, r2, r3
 8002bce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d901      	bls.n	8002bda <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e07c      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bda:	4b40      	ldr	r3, [pc, #256]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002bdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bde:	f003 0302 	and.w	r3, r3, #2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d1ee      	bne.n	8002bc4 <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002be6:	7dfb      	ldrb	r3, [r7, #23]
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bec:	4b3b      	ldr	r3, [pc, #236]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4a3a      	ldr	r2, [pc, #232]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002bf2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	699b      	ldr	r3, [r3, #24]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d068      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c00:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 030c 	and.w	r3, r3, #12
 8002c08:	2b08      	cmp	r3, #8
 8002c0a:	d060      	beq.n	8002cce <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d145      	bne.n	8002ca0 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c14:	4b33      	ldr	r3, [pc, #204]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c1a:	f003 fca1 	bl	8006560 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c22:	f003 fc9d 	bl	8006560 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e04f      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c34:	4b29      	ldr	r3, [pc, #164]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d1f0      	bne.n	8002c22 <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	69da      	ldr	r2, [r3, #28]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a1b      	ldr	r3, [r3, #32]
 8002c48:	431a      	orrs	r2, r3
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	019b      	lsls	r3, r3, #6
 8002c50:	431a      	orrs	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	041b      	lsls	r3, r3, #16
 8002c5c:	431a      	orrs	r2, r3
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	061b      	lsls	r3, r3, #24
 8002c64:	431a      	orrs	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c6a:	071b      	lsls	r3, r3, #28
 8002c6c:	491b      	ldr	r1, [pc, #108]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c72:	4b1c      	ldr	r3, [pc, #112]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002c74:	2201      	movs	r2, #1
 8002c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c78:	f003 fc72 	bl	8006560 <HAL_GetTick>
 8002c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c7e:	e008      	b.n	8002c92 <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c80:	f003 fc6e 	bl	8006560 <HAL_GetTick>
 8002c84:	4602      	mov	r2, r0
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d901      	bls.n	8002c92 <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	e020      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c92:	4b12      	ldr	r3, [pc, #72]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d0f0      	beq.n	8002c80 <HAL_RCC_OscConfig+0x44c>
 8002c9e:	e018      	b.n	8002cd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca0:	4b10      	ldr	r3, [pc, #64]	; (8002ce4 <HAL_RCC_OscConfig+0x4b0>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f003 fc5b 	bl	8006560 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f003 fc57 	bl	8006560 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e009      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cc0:	4b06      	ldr	r3, [pc, #24]	; (8002cdc <HAL_RCC_OscConfig+0x4a8>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d1f0      	bne.n	8002cae <HAL_RCC_OscConfig+0x47a>
 8002ccc:	e001      	b.n	8002cd2 <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3718      	adds	r7, #24
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}
 8002cdc:	40023800 	.word	0x40023800
 8002ce0:	40007000 	.word	0x40007000
 8002ce4:	42470060 	.word	0x42470060

08002ce8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b082      	sub	sp, #8
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e01d      	b.n	8002d36 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d00:	b2db      	uxtb	r3, r3
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d106      	bne.n	8002d14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 f815 	bl	8002d3e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2202      	movs	r2, #2
 8002d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3304      	adds	r3, #4
 8002d24:	4619      	mov	r1, r3
 8002d26:	4610      	mov	r0, r2
 8002d28:	f000 f968 	bl	8002ffc <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2201      	movs	r2, #1
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	3708      	adds	r7, #8
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	bd80      	pop	{r7, pc}

08002d3e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002d46:	bf00      	nop
 8002d48:	370c      	adds	r7, #12
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d50:	4770      	bx	lr

08002d52 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002d52:	b480      	push	{r7}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	68da      	ldr	r2, [r3, #12]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f042 0201 	orr.w	r2, r2, #1
 8002d68:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f003 0307 	and.w	r3, r3, #7
 8002d74:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2b06      	cmp	r3, #6
 8002d7a:	d007      	beq.n	8002d8c <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	681a      	ldr	r2, [r3, #0]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f042 0201 	orr.w	r2, r2, #1
 8002d8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3714      	adds	r7, #20
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b082      	sub	sp, #8
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	691b      	ldr	r3, [r3, #16]
 8002da8:	f003 0302 	and.w	r3, r3, #2
 8002dac:	2b02      	cmp	r3, #2
 8002dae:	d122      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d11b      	bne.n	8002df6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f06f 0202 	mvn.w	r2, #2
 8002dc6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2201      	movs	r2, #1
 8002dcc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	f003 0303 	and.w	r3, r3, #3
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d003      	beq.n	8002de4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f000 f8ee 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002de2:	e005      	b.n	8002df0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f000 f8e0 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002dea:	6878      	ldr	r0, [r7, #4]
 8002dec:	f000 f8f1 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	691b      	ldr	r3, [r3, #16]
 8002dfc:	f003 0304 	and.w	r3, r3, #4
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d122      	bne.n	8002e4a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f003 0304 	and.w	r3, r3, #4
 8002e0e:	2b04      	cmp	r3, #4
 8002e10:	d11b      	bne.n	8002e4a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f06f 0204 	mvn.w	r2, #4
 8002e1a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2202      	movs	r2, #2
 8002e20:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d003      	beq.n	8002e38 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f8c4 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002e36:	e005      	b.n	8002e44 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e38:	6878      	ldr	r0, [r7, #4]
 8002e3a:	f000 f8b6 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 f8c7 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2200      	movs	r2, #0
 8002e48:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	691b      	ldr	r3, [r3, #16]
 8002e50:	f003 0308 	and.w	r3, r3, #8
 8002e54:	2b08      	cmp	r3, #8
 8002e56:	d122      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0308 	and.w	r3, r3, #8
 8002e62:	2b08      	cmp	r3, #8
 8002e64:	d11b      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f06f 0208 	mvn.w	r2, #8
 8002e6e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2204      	movs	r2, #4
 8002e74:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	69db      	ldr	r3, [r3, #28]
 8002e7c:	f003 0303 	and.w	r3, r3, #3
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d003      	beq.n	8002e8c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 f89a 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002e8a:	e005      	b.n	8002e98 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e8c:	6878      	ldr	r0, [r7, #4]
 8002e8e:	f000 f88c 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e92:	6878      	ldr	r0, [r7, #4]
 8002e94:	f000 f89d 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	691b      	ldr	r3, [r3, #16]
 8002ea4:	f003 0310 	and.w	r3, r3, #16
 8002ea8:	2b10      	cmp	r3, #16
 8002eaa:	d122      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f003 0310 	and.w	r3, r3, #16
 8002eb6:	2b10      	cmp	r3, #16
 8002eb8:	d11b      	bne.n	8002ef2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f06f 0210 	mvn.w	r2, #16
 8002ec2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2208      	movs	r2, #8
 8002ec8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	69db      	ldr	r3, [r3, #28]
 8002ed0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d003      	beq.n	8002ee0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ed8:	6878      	ldr	r0, [r7, #4]
 8002eda:	f000 f870 	bl	8002fbe <HAL_TIM_IC_CaptureCallback>
 8002ede:	e005      	b.n	8002eec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ee0:	6878      	ldr	r0, [r7, #4]
 8002ee2:	f000 f862 	bl	8002faa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ee6:	6878      	ldr	r0, [r7, #4]
 8002ee8:	f000 f873 	bl	8002fd2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2200      	movs	r2, #0
 8002ef0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	691b      	ldr	r3, [r3, #16]
 8002ef8:	f003 0301 	and.w	r3, r3, #1
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d10e      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	68db      	ldr	r3, [r3, #12]
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d107      	bne.n	8002f1e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f06f 0201 	mvn.w	r2, #1
 8002f16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fd fed7 	bl	8000ccc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	691b      	ldr	r3, [r3, #16]
 8002f24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f28:	2b80      	cmp	r3, #128	; 0x80
 8002f2a:	d10e      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	68db      	ldr	r3, [r3, #12]
 8002f32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f36:	2b80      	cmp	r3, #128	; 0x80
 8002f38:	d107      	bne.n	8002f4a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002f42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002f44:	6878      	ldr	r0, [r7, #4]
 8002f46:	f000 f903 	bl	8003150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	691b      	ldr	r3, [r3, #16]
 8002f50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f54:	2b40      	cmp	r3, #64	; 0x40
 8002f56:	d10e      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68db      	ldr	r3, [r3, #12]
 8002f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f62:	2b40      	cmp	r3, #64	; 0x40
 8002f64:	d107      	bne.n	8002f76 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002f6e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002f70:	6878      	ldr	r0, [r7, #4]
 8002f72:	f000 f838 	bl	8002fe6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
 8002f7c:	f003 0320 	and.w	r3, r3, #32
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	d10e      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	68db      	ldr	r3, [r3, #12]
 8002f8a:	f003 0320 	and.w	r3, r3, #32
 8002f8e:	2b20      	cmp	r3, #32
 8002f90:	d107      	bne.n	8002fa2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f06f 0220 	mvn.w	r2, #32
 8002f9a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002f9c:	6878      	ldr	r0, [r7, #4]
 8002f9e:	f000 f8cd 	bl	800313c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002faa:	b480      	push	{r7}
 8002fac:	b083      	sub	sp, #12
 8002fae:	af00      	add	r7, sp, #0
 8002fb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fb2:	bf00      	nop
 8002fb4:	370c      	adds	r7, #12
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr

08002fbe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b083      	sub	sp, #12
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	b083      	sub	sp, #12
 8002fd6:	af00      	add	r7, sp, #0
 8002fd8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fda:	bf00      	nop
 8002fdc:	370c      	adds	r7, #12
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe4:	4770      	bx	lr

08002fe6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fe6:	b480      	push	{r7}
 8002fe8:	b083      	sub	sp, #12
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
	...

08002ffc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
 8003004:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	4a40      	ldr	r2, [pc, #256]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d013      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800301a:	d00f      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	4a3d      	ldr	r2, [pc, #244]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d00b      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a3c      	ldr	r2, [pc, #240]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d007      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a3b      	ldr	r2, [pc, #236]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d003      	beq.n	800303c <TIM_Base_SetConfig+0x40>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	4a3a      	ldr	r2, [pc, #232]	; (8003120 <TIM_Base_SetConfig+0x124>)
 8003038:	4293      	cmp	r3, r2
 800303a:	d108      	bne.n	800304e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003042:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	68fa      	ldr	r2, [r7, #12]
 800304a:	4313      	orrs	r3, r2
 800304c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	4a2f      	ldr	r2, [pc, #188]	; (8003110 <TIM_Base_SetConfig+0x114>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d02b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d027      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	4a2c      	ldr	r2, [pc, #176]	; (8003114 <TIM_Base_SetConfig+0x118>)
 8003062:	4293      	cmp	r3, r2
 8003064:	d023      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	4a2b      	ldr	r2, [pc, #172]	; (8003118 <TIM_Base_SetConfig+0x11c>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d01f      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	4a2a      	ldr	r2, [pc, #168]	; (800311c <TIM_Base_SetConfig+0x120>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d01b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	4a29      	ldr	r2, [pc, #164]	; (8003120 <TIM_Base_SetConfig+0x124>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d017      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	4a28      	ldr	r2, [pc, #160]	; (8003124 <TIM_Base_SetConfig+0x128>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d013      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	4a27      	ldr	r2, [pc, #156]	; (8003128 <TIM_Base_SetConfig+0x12c>)
 800308a:	4293      	cmp	r3, r2
 800308c:	d00f      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	4a26      	ldr	r2, [pc, #152]	; (800312c <TIM_Base_SetConfig+0x130>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d00b      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a25      	ldr	r2, [pc, #148]	; (8003130 <TIM_Base_SetConfig+0x134>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d007      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a24      	ldr	r2, [pc, #144]	; (8003134 <TIM_Base_SetConfig+0x138>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d003      	beq.n	80030ae <TIM_Base_SetConfig+0xb2>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a23      	ldr	r2, [pc, #140]	; (8003138 <TIM_Base_SetConfig+0x13c>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d108      	bne.n	80030c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68db      	ldr	r3, [r3, #12]
 80030ba:	68fa      	ldr	r2, [r7, #12]
 80030bc:	4313      	orrs	r3, r2
 80030be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	695b      	ldr	r3, [r3, #20]
 80030ca:	4313      	orrs	r3, r2
 80030cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	68fa      	ldr	r2, [r7, #12]
 80030d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a0a      	ldr	r2, [pc, #40]	; (8003110 <TIM_Base_SetConfig+0x114>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d003      	beq.n	80030f4 <TIM_Base_SetConfig+0xf8>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a0c      	ldr	r2, [pc, #48]	; (8003120 <TIM_Base_SetConfig+0x124>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d103      	bne.n	80030fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	691a      	ldr	r2, [r3, #16]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	615a      	str	r2, [r3, #20]
}
 8003102:	bf00      	nop
 8003104:	3714      	adds	r7, #20
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	40010000 	.word	0x40010000
 8003114:	40000400 	.word	0x40000400
 8003118:	40000800 	.word	0x40000800
 800311c:	40000c00 	.word	0x40000c00
 8003120:	40010400 	.word	0x40010400
 8003124:	40014000 	.word	0x40014000
 8003128:	40014400 	.word	0x40014400
 800312c:	40014800 	.word	0x40014800
 8003130:	40001800 	.word	0x40001800
 8003134:	40001c00 	.word	0x40001c00
 8003138:	40002000 	.word	0x40002000

0800313c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800313c:	b480      	push	{r7}
 800313e:	b083      	sub	sp, #12
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003144:	bf00      	nop
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr

08003150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003162:	4770      	bx	lr

08003164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003164:	b580      	push	{r7, lr}
 8003166:	b082      	sub	sp, #8
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d101      	bne.n	8003176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e03f      	b.n	80031f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800317c:	b2db      	uxtb	r3, r3
 800317e:	2b00      	cmp	r3, #0
 8003180:	d106      	bne.n	8003190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2200      	movs	r2, #0
 8003186:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7fd fe30 	bl	8000df0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2224      	movs	r2, #36	; 0x24
 8003194:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68da      	ldr	r2, [r3, #12]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80031a8:	6878      	ldr	r0, [r7, #4]
 80031aa:	f000 fb4b 	bl	8003844 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	691a      	ldr	r2, [r3, #16]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80031bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	695a      	ldr	r2, [r3, #20]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80031cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68da      	ldr	r2, [r3, #12]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2220      	movs	r2, #32
 80031e8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2220      	movs	r2, #32
 80031f0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 80031f4:	2300      	movs	r3, #0
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}

080031fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80031fe:	b580      	push	{r7, lr}
 8003200:	b088      	sub	sp, #32
 8003202:	af02      	add	r7, sp, #8
 8003204:	60f8      	str	r0, [r7, #12]
 8003206:	60b9      	str	r1, [r7, #8]
 8003208:	603b      	str	r3, [r7, #0]
 800320a:	4613      	mov	r3, r2
 800320c:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800320e:	2300      	movs	r3, #0
 8003210:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003218:	b2db      	uxtb	r3, r3
 800321a:	2b20      	cmp	r3, #32
 800321c:	f040 8083 	bne.w	8003326 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d002      	beq.n	800322c <HAL_UART_Transmit+0x2e>
 8003226:	88fb      	ldrh	r3, [r7, #6]
 8003228:	2b00      	cmp	r3, #0
 800322a:	d101      	bne.n	8003230 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800322c:	2301      	movs	r3, #1
 800322e:	e07b      	b.n	8003328 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003236:	2b01      	cmp	r3, #1
 8003238:	d101      	bne.n	800323e <HAL_UART_Transmit+0x40>
 800323a:	2302      	movs	r3, #2
 800323c:	e074      	b.n	8003328 <HAL_UART_Transmit+0x12a>
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2201      	movs	r2, #1
 8003242:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	2200      	movs	r2, #0
 800324a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	2221      	movs	r2, #33	; 0x21
 8003250:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8003254:	f003 f984 	bl	8006560 <HAL_GetTick>
 8003258:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	88fa      	ldrh	r2, [r7, #6]
 800325e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	88fa      	ldrh	r2, [r7, #6]
 8003264:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2200      	movs	r2, #0
 800326a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800326e:	e042      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003274:	b29b      	uxth	r3, r3
 8003276:	3b01      	subs	r3, #1
 8003278:	b29a      	uxth	r2, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	689b      	ldr	r3, [r3, #8]
 8003282:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003286:	d122      	bne.n	80032ce <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	9300      	str	r3, [sp, #0]
 800328c:	697b      	ldr	r3, [r7, #20]
 800328e:	2200      	movs	r2, #0
 8003290:	2180      	movs	r1, #128	; 0x80
 8003292:	68f8      	ldr	r0, [r7, #12]
 8003294:	f000 f96a 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003298:	4603      	mov	r3, r0
 800329a:	2b00      	cmp	r3, #0
 800329c:	d001      	beq.n	80032a2 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e042      	b.n	8003328 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	881b      	ldrh	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80032b4:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	691b      	ldr	r3, [r3, #16]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d103      	bne.n	80032c6 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	3302      	adds	r3, #2
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	e017      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	e013      	b.n	80032f6 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	9300      	str	r3, [sp, #0]
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2200      	movs	r2, #0
 80032d6:	2180      	movs	r1, #128	; 0x80
 80032d8:	68f8      	ldr	r0, [r7, #12]
 80032da:	f000 f947 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 80032e4:	2303      	movs	r3, #3
 80032e6:	e01f      	b.n	8003328 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80032e8:	68bb      	ldr	r3, [r7, #8]
 80032ea:	1c5a      	adds	r2, r3, #1
 80032ec:	60ba      	str	r2, [r7, #8]
 80032ee:	781a      	ldrb	r2, [r3, #0]
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032fa:	b29b      	uxth	r3, r3
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d1b7      	bne.n	8003270 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	9300      	str	r3, [sp, #0]
 8003304:	697b      	ldr	r3, [r7, #20]
 8003306:	2200      	movs	r2, #0
 8003308:	2140      	movs	r1, #64	; 0x40
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f000 f92e 	bl	800356c <UART_WaitOnFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d001      	beq.n	800331a <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e006      	b.n	8003328 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8003322:	2300      	movs	r3, #0
 8003324:	e000      	b.n	8003328 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003326:	2302      	movs	r3, #2
  }
}
 8003328:	4618      	mov	r0, r3
 800332a:	3718      	adds	r7, #24
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b088      	sub	sp, #32
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	68db      	ldr	r3, [r3, #12]
 8003346:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8003350:	2300      	movs	r3, #0
 8003352:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003354:	2300      	movs	r3, #0
 8003356:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	f003 030f 	and.w	r3, r3, #15
 800335e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d10d      	bne.n	8003382 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	f003 0320 	and.w	r3, r3, #32
 800336c:	2b00      	cmp	r3, #0
 800336e:	d008      	beq.n	8003382 <HAL_UART_IRQHandler+0x52>
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	f003 0320 	and.w	r3, r3, #32
 8003376:	2b00      	cmp	r3, #0
 8003378:	d003      	beq.n	8003382 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f000 f9e0 	bl	8003740 <UART_Receive_IT>
      return;
 8003380:	e0d1      	b.n	8003526 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	2b00      	cmp	r3, #0
 8003386:	f000 80b0 	beq.w	80034ea <HAL_UART_IRQHandler+0x1ba>
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	f003 0301 	and.w	r3, r3, #1
 8003390:	2b00      	cmp	r3, #0
 8003392:	d105      	bne.n	80033a0 <HAL_UART_IRQHandler+0x70>
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800339a:	2b00      	cmp	r3, #0
 800339c:	f000 80a5 	beq.w	80034ea <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033a0:	69fb      	ldr	r3, [r7, #28]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_UART_IRQHandler+0x90>
 80033aa:	69bb      	ldr	r3, [r7, #24]
 80033ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b8:	f043 0201 	orr.w	r2, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_UART_IRQHandler+0xb0>
 80033ca:	697b      	ldr	r3, [r7, #20]
 80033cc:	f003 0301 	and.w	r3, r3, #1
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d005      	beq.n	80033e0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033d8:	f043 0202 	orr.w	r2, r3, #2
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00a      	beq.n	8003400 <HAL_UART_IRQHandler+0xd0>
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	f003 0301 	and.w	r3, r3, #1
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d005      	beq.n	8003400 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033f8:	f043 0204 	orr.w	r2, r3, #4
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	f003 0308 	and.w	r3, r3, #8
 8003406:	2b00      	cmp	r3, #0
 8003408:	d00f      	beq.n	800342a <HAL_UART_IRQHandler+0xfa>
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d104      	bne.n	800341e <HAL_UART_IRQHandler+0xee>
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d005      	beq.n	800342a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003422:	f043 0208 	orr.w	r2, r3, #8
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800342e:	2b00      	cmp	r3, #0
 8003430:	d078      	beq.n	8003524 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003432:	69fb      	ldr	r3, [r7, #28]
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	2b00      	cmp	r3, #0
 800343a:	d007      	beq.n	800344c <HAL_UART_IRQHandler+0x11c>
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 f97a 	bl	8003740 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003456:	2b40      	cmp	r3, #64	; 0x40
 8003458:	bf0c      	ite	eq
 800345a:	2301      	moveq	r3, #1
 800345c:	2300      	movne	r3, #0
 800345e:	b2db      	uxtb	r3, r3
 8003460:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003466:	f003 0308 	and.w	r3, r3, #8
 800346a:	2b00      	cmp	r3, #0
 800346c:	d102      	bne.n	8003474 <HAL_UART_IRQHandler+0x144>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d031      	beq.n	80034d8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f000 f8c3 	bl	8003600 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	695b      	ldr	r3, [r3, #20]
 8003480:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003484:	2b40      	cmp	r3, #64	; 0x40
 8003486:	d123      	bne.n	80034d0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	695a      	ldr	r2, [r3, #20]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003496:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800349c:	2b00      	cmp	r3, #0
 800349e:	d013      	beq.n	80034c8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034a4:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_UART_IRQHandler+0x1fc>)
 80034a6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034ac:	4618      	mov	r0, r3
 80034ae:	f7fe fcb7 	bl	8001e20 <HAL_DMA_Abort_IT>
 80034b2:	4603      	mov	r3, r0
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d016      	beq.n	80034e6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034be:	687a      	ldr	r2, [r7, #4]
 80034c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80034c2:	4610      	mov	r0, r2
 80034c4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c6:	e00e      	b.n	80034e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f845 	bl	8003558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ce:	e00a      	b.n	80034e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034d0:	6878      	ldr	r0, [r7, #4]
 80034d2:	f000 f841 	bl	8003558 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034d6:	e006      	b.n	80034e6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f83d 	bl	8003558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80034e4:	e01e      	b.n	8003524 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e6:	bf00      	nop
    return;
 80034e8:	e01c      	b.n	8003524 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_UART_IRQHandler+0x1d6>
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d003      	beq.n	8003506 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f000 f8b0 	bl	8003664 <UART_Transmit_IT>
    return;
 8003504:	e00f      	b.n	8003526 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00a      	beq.n	8003526 <HAL_UART_IRQHandler+0x1f6>
 8003510:	69bb      	ldr	r3, [r7, #24]
 8003512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f8f8 	bl	8003710 <UART_EndTransmit_IT>
    return;
 8003520:	bf00      	nop
 8003522:	e000      	b.n	8003526 <HAL_UART_IRQHandler+0x1f6>
    return;
 8003524:	bf00      	nop
  }
}
 8003526:	3720      	adds	r7, #32
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	0800363d 	.word	0x0800363d

08003530 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003530:	b480      	push	{r7}
 8003532:	b083      	sub	sp, #12
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003538:	bf00      	nop
 800353a:	370c      	adds	r7, #12
 800353c:	46bd      	mov	sp, r7
 800353e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003542:	4770      	bx	lr

08003544 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b083      	sub	sp, #12
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800354c:	bf00      	nop
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800356c:	b580      	push	{r7, lr}
 800356e:	b084      	sub	sp, #16
 8003570:	af00      	add	r7, sp, #0
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	60b9      	str	r1, [r7, #8]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	4613      	mov	r3, r2
 800357a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800357c:	e02c      	b.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800357e:	69bb      	ldr	r3, [r7, #24]
 8003580:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003584:	d028      	beq.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d007      	beq.n	800359c <UART_WaitOnFlagUntilTimeout+0x30>
 800358c:	f002 ffe8 	bl	8006560 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	429a      	cmp	r2, r3
 800359a:	d21d      	bcs.n	80035d8 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	68da      	ldr	r2, [r3, #12]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80035aa:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695a      	ldr	r2, [r3, #20]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f022 0201 	bic.w	r2, r2, #1
 80035ba:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2220      	movs	r2, #32
 80035c8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80035d4:	2303      	movs	r3, #3
 80035d6:	e00f      	b.n	80035f8 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	681a      	ldr	r2, [r3, #0]
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4013      	ands	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	429a      	cmp	r2, r3
 80035e6:	bf0c      	ite	eq
 80035e8:	2301      	moveq	r3, #1
 80035ea:	2300      	movne	r3, #0
 80035ec:	b2db      	uxtb	r3, r3
 80035ee:	461a      	mov	r2, r3
 80035f0:	79fb      	ldrb	r3, [r7, #7]
 80035f2:	429a      	cmp	r2, r3
 80035f4:	d0c3      	beq.n	800357e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
 8003606:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68da      	ldr	r2, [r3, #12]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003616:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	695a      	ldr	r2, [r3, #20]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f022 0201 	bic.w	r2, r2, #1
 8003626:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2220      	movs	r2, #32
 800362c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003630:	bf00      	nop
 8003632:	370c      	adds	r7, #12
 8003634:	46bd      	mov	sp, r7
 8003636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363a:	4770      	bx	lr

0800363c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b084      	sub	sp, #16
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003648:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff ff7e 	bl	8003558 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800365c:	bf00      	nop
 800365e:	3710      	adds	r7, #16
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b21      	cmp	r3, #33	; 0x21
 8003676:	d144      	bne.n	8003702 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	689b      	ldr	r3, [r3, #8]
 800367c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003680:	d11a      	bne.n	80036b8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	881b      	ldrh	r3, [r3, #0]
 800368c:	461a      	mov	r2, r3
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003696:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	691b      	ldr	r3, [r3, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	1c9a      	adds	r2, r3, #2
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	621a      	str	r2, [r3, #32]
 80036aa:	e00e      	b.n	80036ca <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	1c5a      	adds	r2, r3, #1
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]
 80036b6:	e008      	b.n	80036ca <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6a1b      	ldr	r3, [r3, #32]
 80036bc:	1c59      	adds	r1, r3, #1
 80036be:	687a      	ldr	r2, [r7, #4]
 80036c0:	6211      	str	r1, [r2, #32]
 80036c2:	781a      	ldrb	r2, [r3, #0]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80036ce:	b29b      	uxth	r3, r3
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	4619      	mov	r1, r3
 80036d8:	84d1      	strh	r1, [r2, #38]	; 0x26
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10f      	bne.n	80036fe <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68da      	ldr	r2, [r3, #12]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036ec:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	68da      	ldr	r2, [r3, #12]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036fc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036fe:	2300      	movs	r3, #0
 8003700:	e000      	b.n	8003704 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8003702:	2302      	movs	r3, #2
  }
}
 8003704:	4618      	mov	r0, r3
 8003706:	3714      	adds	r7, #20
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003710:	b580      	push	{r7, lr}
 8003712:	b082      	sub	sp, #8
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	68da      	ldr	r2, [r3, #12]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003726:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2220      	movs	r2, #32
 800372c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003730:	6878      	ldr	r0, [r7, #4]
 8003732:	f7ff fefd 	bl	8003530 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003736:	2300      	movs	r3, #0
}
 8003738:	4618      	mov	r0, r3
 800373a:	3708      	adds	r7, #8
 800373c:	46bd      	mov	sp, r7
 800373e:	bd80      	pop	{r7, pc}

08003740 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003740:	b580      	push	{r7, lr}
 8003742:	b084      	sub	sp, #16
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800374e:	b2db      	uxtb	r3, r3
 8003750:	2b22      	cmp	r3, #34	; 0x22
 8003752:	d171      	bne.n	8003838 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800375c:	d123      	bne.n	80037a6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003762:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d10e      	bne.n	800378a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	685b      	ldr	r3, [r3, #4]
 8003772:	b29b      	uxth	r3, r3
 8003774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003782:	1c9a      	adds	r2, r3, #2
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	629a      	str	r2, [r3, #40]	; 0x28
 8003788:	e029      	b.n	80037de <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	685b      	ldr	r3, [r3, #4]
 8003790:	b29b      	uxth	r3, r3
 8003792:	b2db      	uxtb	r3, r3
 8003794:	b29a      	uxth	r2, r3
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	629a      	str	r2, [r3, #40]	; 0x28
 80037a4:	e01b      	b.n	80037de <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	691b      	ldr	r3, [r3, #16]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d10a      	bne.n	80037c4 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6858      	ldr	r0, [r3, #4]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037b8:	1c59      	adds	r1, r3, #1
 80037ba:	687a      	ldr	r2, [r7, #4]
 80037bc:	6291      	str	r1, [r2, #40]	; 0x28
 80037be:	b2c2      	uxtb	r2, r0
 80037c0:	701a      	strb	r2, [r3, #0]
 80037c2:	e00c      	b.n	80037de <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d0:	1c58      	adds	r0, r3, #1
 80037d2:	6879      	ldr	r1, [r7, #4]
 80037d4:	6288      	str	r0, [r1, #40]	; 0x28
 80037d6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80037da:	b2d2      	uxtb	r2, r2
 80037dc:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80037e2:	b29b      	uxth	r3, r3
 80037e4:	3b01      	subs	r3, #1
 80037e6:	b29b      	uxth	r3, r3
 80037e8:	687a      	ldr	r2, [r7, #4]
 80037ea:	4619      	mov	r1, r3
 80037ec:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d120      	bne.n	8003834 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	68da      	ldr	r2, [r3, #12]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f022 0220 	bic.w	r2, r2, #32
 8003800:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003810:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695a      	ldr	r2, [r3, #20]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f022 0201 	bic.w	r2, r2, #1
 8003820:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2220      	movs	r2, #32
 8003826:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff fe8a 	bl	8003544 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003830:	2300      	movs	r3, #0
 8003832:	e002      	b.n	800383a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003834:	2300      	movs	r3, #0
 8003836:	e000      	b.n	800383a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003838:	2302      	movs	r3, #2
  }
}
 800383a:	4618      	mov	r0, r3
 800383c:	3710      	adds	r7, #16
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003844:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003848:	b085      	sub	sp, #20
 800384a:	af00      	add	r7, sp, #0
 800384c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	68da      	ldr	r2, [r3, #12]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	689a      	ldr	r2, [r3, #8]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	691b      	ldr	r3, [r3, #16]
 800386c:	431a      	orrs	r2, r3
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	695b      	ldr	r3, [r3, #20]
 8003872:	431a      	orrs	r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	69db      	ldr	r3, [r3, #28]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68db      	ldr	r3, [r3, #12]
 8003882:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8003886:	f023 030c 	bic.w	r3, r3, #12
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6812      	ldr	r2, [r2, #0]
 800388e:	68f9      	ldr	r1, [r7, #12]
 8003890:	430b      	orrs	r3, r1
 8003892:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	695b      	ldr	r3, [r3, #20]
 800389a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	699a      	ldr	r2, [r3, #24]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80038b2:	f040 818b 	bne.w	8003bcc <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	4ac1      	ldr	r2, [pc, #772]	; (8003bc0 <UART_SetConfig+0x37c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d005      	beq.n	80038cc <UART_SetConfig+0x88>
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4abf      	ldr	r2, [pc, #764]	; (8003bc4 <UART_SetConfig+0x380>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	f040 80bd 	bne.w	8003a46 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80038cc:	f7fe fdcc 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 80038d0:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	461d      	mov	r5, r3
 80038d6:	f04f 0600 	mov.w	r6, #0
 80038da:	46a8      	mov	r8, r5
 80038dc:	46b1      	mov	r9, r6
 80038de:	eb18 0308 	adds.w	r3, r8, r8
 80038e2:	eb49 0409 	adc.w	r4, r9, r9
 80038e6:	4698      	mov	r8, r3
 80038e8:	46a1      	mov	r9, r4
 80038ea:	eb18 0805 	adds.w	r8, r8, r5
 80038ee:	eb49 0906 	adc.w	r9, r9, r6
 80038f2:	f04f 0100 	mov.w	r1, #0
 80038f6:	f04f 0200 	mov.w	r2, #0
 80038fa:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80038fe:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003902:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003906:	4688      	mov	r8, r1
 8003908:	4691      	mov	r9, r2
 800390a:	eb18 0005 	adds.w	r0, r8, r5
 800390e:	eb49 0106 	adc.w	r1, r9, r6
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	461d      	mov	r5, r3
 8003918:	f04f 0600 	mov.w	r6, #0
 800391c:	196b      	adds	r3, r5, r5
 800391e:	eb46 0406 	adc.w	r4, r6, r6
 8003922:	461a      	mov	r2, r3
 8003924:	4623      	mov	r3, r4
 8003926:	f7fc fccb 	bl	80002c0 <__aeabi_uldivmod>
 800392a:	4603      	mov	r3, r0
 800392c:	460c      	mov	r4, r1
 800392e:	461a      	mov	r2, r3
 8003930:	4ba5      	ldr	r3, [pc, #660]	; (8003bc8 <UART_SetConfig+0x384>)
 8003932:	fba3 2302 	umull	r2, r3, r3, r2
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	461d      	mov	r5, r3
 8003940:	f04f 0600 	mov.w	r6, #0
 8003944:	46a9      	mov	r9, r5
 8003946:	46b2      	mov	sl, r6
 8003948:	eb19 0309 	adds.w	r3, r9, r9
 800394c:	eb4a 040a 	adc.w	r4, sl, sl
 8003950:	4699      	mov	r9, r3
 8003952:	46a2      	mov	sl, r4
 8003954:	eb19 0905 	adds.w	r9, r9, r5
 8003958:	eb4a 0a06 	adc.w	sl, sl, r6
 800395c:	f04f 0100 	mov.w	r1, #0
 8003960:	f04f 0200 	mov.w	r2, #0
 8003964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003968:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800396c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003970:	4689      	mov	r9, r1
 8003972:	4692      	mov	sl, r2
 8003974:	eb19 0005 	adds.w	r0, r9, r5
 8003978:	eb4a 0106 	adc.w	r1, sl, r6
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	685b      	ldr	r3, [r3, #4]
 8003980:	461d      	mov	r5, r3
 8003982:	f04f 0600 	mov.w	r6, #0
 8003986:	196b      	adds	r3, r5, r5
 8003988:	eb46 0406 	adc.w	r4, r6, r6
 800398c:	461a      	mov	r2, r3
 800398e:	4623      	mov	r3, r4
 8003990:	f7fc fc96 	bl	80002c0 <__aeabi_uldivmod>
 8003994:	4603      	mov	r3, r0
 8003996:	460c      	mov	r4, r1
 8003998:	461a      	mov	r2, r3
 800399a:	4b8b      	ldr	r3, [pc, #556]	; (8003bc8 <UART_SetConfig+0x384>)
 800399c:	fba3 1302 	umull	r1, r3, r3, r2
 80039a0:	095b      	lsrs	r3, r3, #5
 80039a2:	2164      	movs	r1, #100	; 0x64
 80039a4:	fb01 f303 	mul.w	r3, r1, r3
 80039a8:	1ad3      	subs	r3, r2, r3
 80039aa:	00db      	lsls	r3, r3, #3
 80039ac:	3332      	adds	r3, #50	; 0x32
 80039ae:	4a86      	ldr	r2, [pc, #536]	; (8003bc8 <UART_SetConfig+0x384>)
 80039b0:	fba2 2303 	umull	r2, r3, r2, r3
 80039b4:	095b      	lsrs	r3, r3, #5
 80039b6:	005b      	lsls	r3, r3, #1
 80039b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80039bc:	4498      	add	r8, r3
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	461d      	mov	r5, r3
 80039c2:	f04f 0600 	mov.w	r6, #0
 80039c6:	46a9      	mov	r9, r5
 80039c8:	46b2      	mov	sl, r6
 80039ca:	eb19 0309 	adds.w	r3, r9, r9
 80039ce:	eb4a 040a 	adc.w	r4, sl, sl
 80039d2:	4699      	mov	r9, r3
 80039d4:	46a2      	mov	sl, r4
 80039d6:	eb19 0905 	adds.w	r9, r9, r5
 80039da:	eb4a 0a06 	adc.w	sl, sl, r6
 80039de:	f04f 0100 	mov.w	r1, #0
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80039ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80039ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80039f2:	4689      	mov	r9, r1
 80039f4:	4692      	mov	sl, r2
 80039f6:	eb19 0005 	adds.w	r0, r9, r5
 80039fa:	eb4a 0106 	adc.w	r1, sl, r6
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	685b      	ldr	r3, [r3, #4]
 8003a02:	461d      	mov	r5, r3
 8003a04:	f04f 0600 	mov.w	r6, #0
 8003a08:	196b      	adds	r3, r5, r5
 8003a0a:	eb46 0406 	adc.w	r4, r6, r6
 8003a0e:	461a      	mov	r2, r3
 8003a10:	4623      	mov	r3, r4
 8003a12:	f7fc fc55 	bl	80002c0 <__aeabi_uldivmod>
 8003a16:	4603      	mov	r3, r0
 8003a18:	460c      	mov	r4, r1
 8003a1a:	461a      	mov	r2, r3
 8003a1c:	4b6a      	ldr	r3, [pc, #424]	; (8003bc8 <UART_SetConfig+0x384>)
 8003a1e:	fba3 1302 	umull	r1, r3, r3, r2
 8003a22:	095b      	lsrs	r3, r3, #5
 8003a24:	2164      	movs	r1, #100	; 0x64
 8003a26:	fb01 f303 	mul.w	r3, r1, r3
 8003a2a:	1ad3      	subs	r3, r2, r3
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	3332      	adds	r3, #50	; 0x32
 8003a30:	4a65      	ldr	r2, [pc, #404]	; (8003bc8 <UART_SetConfig+0x384>)
 8003a32:	fba2 2303 	umull	r2, r3, r2, r3
 8003a36:	095b      	lsrs	r3, r3, #5
 8003a38:	f003 0207 	and.w	r2, r3, #7
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	4442      	add	r2, r8
 8003a42:	609a      	str	r2, [r3, #8]
 8003a44:	e26f      	b.n	8003f26 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003a46:	f7fe fcfb 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003a4a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a4c:	68bb      	ldr	r3, [r7, #8]
 8003a4e:	461d      	mov	r5, r3
 8003a50:	f04f 0600 	mov.w	r6, #0
 8003a54:	46a8      	mov	r8, r5
 8003a56:	46b1      	mov	r9, r6
 8003a58:	eb18 0308 	adds.w	r3, r8, r8
 8003a5c:	eb49 0409 	adc.w	r4, r9, r9
 8003a60:	4698      	mov	r8, r3
 8003a62:	46a1      	mov	r9, r4
 8003a64:	eb18 0805 	adds.w	r8, r8, r5
 8003a68:	eb49 0906 	adc.w	r9, r9, r6
 8003a6c:	f04f 0100 	mov.w	r1, #0
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003a78:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003a7c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003a80:	4688      	mov	r8, r1
 8003a82:	4691      	mov	r9, r2
 8003a84:	eb18 0005 	adds.w	r0, r8, r5
 8003a88:	eb49 0106 	adc.w	r1, r9, r6
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	461d      	mov	r5, r3
 8003a92:	f04f 0600 	mov.w	r6, #0
 8003a96:	196b      	adds	r3, r5, r5
 8003a98:	eb46 0406 	adc.w	r4, r6, r6
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	4623      	mov	r3, r4
 8003aa0:	f7fc fc0e 	bl	80002c0 <__aeabi_uldivmod>
 8003aa4:	4603      	mov	r3, r0
 8003aa6:	460c      	mov	r4, r1
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	4b47      	ldr	r3, [pc, #284]	; (8003bc8 <UART_SetConfig+0x384>)
 8003aac:	fba3 2302 	umull	r2, r3, r3, r2
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	461d      	mov	r5, r3
 8003aba:	f04f 0600 	mov.w	r6, #0
 8003abe:	46a9      	mov	r9, r5
 8003ac0:	46b2      	mov	sl, r6
 8003ac2:	eb19 0309 	adds.w	r3, r9, r9
 8003ac6:	eb4a 040a 	adc.w	r4, sl, sl
 8003aca:	4699      	mov	r9, r3
 8003acc:	46a2      	mov	sl, r4
 8003ace:	eb19 0905 	adds.w	r9, r9, r5
 8003ad2:	eb4a 0a06 	adc.w	sl, sl, r6
 8003ad6:	f04f 0100 	mov.w	r1, #0
 8003ada:	f04f 0200 	mov.w	r2, #0
 8003ade:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ae2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ae6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003aea:	4689      	mov	r9, r1
 8003aec:	4692      	mov	sl, r2
 8003aee:	eb19 0005 	adds.w	r0, r9, r5
 8003af2:	eb4a 0106 	adc.w	r1, sl, r6
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	461d      	mov	r5, r3
 8003afc:	f04f 0600 	mov.w	r6, #0
 8003b00:	196b      	adds	r3, r5, r5
 8003b02:	eb46 0406 	adc.w	r4, r6, r6
 8003b06:	461a      	mov	r2, r3
 8003b08:	4623      	mov	r3, r4
 8003b0a:	f7fc fbd9 	bl	80002c0 <__aeabi_uldivmod>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	460c      	mov	r4, r1
 8003b12:	461a      	mov	r2, r3
 8003b14:	4b2c      	ldr	r3, [pc, #176]	; (8003bc8 <UART_SetConfig+0x384>)
 8003b16:	fba3 1302 	umull	r1, r3, r3, r2
 8003b1a:	095b      	lsrs	r3, r3, #5
 8003b1c:	2164      	movs	r1, #100	; 0x64
 8003b1e:	fb01 f303 	mul.w	r3, r1, r3
 8003b22:	1ad3      	subs	r3, r2, r3
 8003b24:	00db      	lsls	r3, r3, #3
 8003b26:	3332      	adds	r3, #50	; 0x32
 8003b28:	4a27      	ldr	r2, [pc, #156]	; (8003bc8 <UART_SetConfig+0x384>)
 8003b2a:	fba2 2303 	umull	r2, r3, r2, r3
 8003b2e:	095b      	lsrs	r3, r3, #5
 8003b30:	005b      	lsls	r3, r3, #1
 8003b32:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003b36:	4498      	add	r8, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	461d      	mov	r5, r3
 8003b3c:	f04f 0600 	mov.w	r6, #0
 8003b40:	46a9      	mov	r9, r5
 8003b42:	46b2      	mov	sl, r6
 8003b44:	eb19 0309 	adds.w	r3, r9, r9
 8003b48:	eb4a 040a 	adc.w	r4, sl, sl
 8003b4c:	4699      	mov	r9, r3
 8003b4e:	46a2      	mov	sl, r4
 8003b50:	eb19 0905 	adds.w	r9, r9, r5
 8003b54:	eb4a 0a06 	adc.w	sl, sl, r6
 8003b58:	f04f 0100 	mov.w	r1, #0
 8003b5c:	f04f 0200 	mov.w	r2, #0
 8003b60:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b64:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003b68:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003b6c:	4689      	mov	r9, r1
 8003b6e:	4692      	mov	sl, r2
 8003b70:	eb19 0005 	adds.w	r0, r9, r5
 8003b74:	eb4a 0106 	adc.w	r1, sl, r6
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	461d      	mov	r5, r3
 8003b7e:	f04f 0600 	mov.w	r6, #0
 8003b82:	196b      	adds	r3, r5, r5
 8003b84:	eb46 0406 	adc.w	r4, r6, r6
 8003b88:	461a      	mov	r2, r3
 8003b8a:	4623      	mov	r3, r4
 8003b8c:	f7fc fb98 	bl	80002c0 <__aeabi_uldivmod>
 8003b90:	4603      	mov	r3, r0
 8003b92:	460c      	mov	r4, r1
 8003b94:	461a      	mov	r2, r3
 8003b96:	4b0c      	ldr	r3, [pc, #48]	; (8003bc8 <UART_SetConfig+0x384>)
 8003b98:	fba3 1302 	umull	r1, r3, r3, r2
 8003b9c:	095b      	lsrs	r3, r3, #5
 8003b9e:	2164      	movs	r1, #100	; 0x64
 8003ba0:	fb01 f303 	mul.w	r3, r1, r3
 8003ba4:	1ad3      	subs	r3, r2, r3
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	3332      	adds	r3, #50	; 0x32
 8003baa:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <UART_SetConfig+0x384>)
 8003bac:	fba2 2303 	umull	r2, r3, r2, r3
 8003bb0:	095b      	lsrs	r3, r3, #5
 8003bb2:	f003 0207 	and.w	r2, r3, #7
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4442      	add	r2, r8
 8003bbc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8003bbe:	e1b2      	b.n	8003f26 <UART_SetConfig+0x6e2>
 8003bc0:	40011000 	.word	0x40011000
 8003bc4:	40011400 	.word	0x40011400
 8003bc8:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4ad7      	ldr	r2, [pc, #860]	; (8003f30 <UART_SetConfig+0x6ec>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d005      	beq.n	8003be2 <UART_SetConfig+0x39e>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4ad6      	ldr	r2, [pc, #856]	; (8003f34 <UART_SetConfig+0x6f0>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	f040 80d1 	bne.w	8003d84 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8003be2:	f7fe fc41 	bl	8002468 <HAL_RCC_GetPCLK2Freq>
 8003be6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003be8:	68bb      	ldr	r3, [r7, #8]
 8003bea:	469a      	mov	sl, r3
 8003bec:	f04f 0b00 	mov.w	fp, #0
 8003bf0:	46d0      	mov	r8, sl
 8003bf2:	46d9      	mov	r9, fp
 8003bf4:	eb18 0308 	adds.w	r3, r8, r8
 8003bf8:	eb49 0409 	adc.w	r4, r9, r9
 8003bfc:	4698      	mov	r8, r3
 8003bfe:	46a1      	mov	r9, r4
 8003c00:	eb18 080a 	adds.w	r8, r8, sl
 8003c04:	eb49 090b 	adc.w	r9, r9, fp
 8003c08:	f04f 0100 	mov.w	r1, #0
 8003c0c:	f04f 0200 	mov.w	r2, #0
 8003c10:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003c14:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003c18:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003c1c:	4688      	mov	r8, r1
 8003c1e:	4691      	mov	r9, r2
 8003c20:	eb1a 0508 	adds.w	r5, sl, r8
 8003c24:	eb4b 0609 	adc.w	r6, fp, r9
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	4619      	mov	r1, r3
 8003c2e:	f04f 0200 	mov.w	r2, #0
 8003c32:	f04f 0300 	mov.w	r3, #0
 8003c36:	f04f 0400 	mov.w	r4, #0
 8003c3a:	0094      	lsls	r4, r2, #2
 8003c3c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003c40:	008b      	lsls	r3, r1, #2
 8003c42:	461a      	mov	r2, r3
 8003c44:	4623      	mov	r3, r4
 8003c46:	4628      	mov	r0, r5
 8003c48:	4631      	mov	r1, r6
 8003c4a:	f7fc fb39 	bl	80002c0 <__aeabi_uldivmod>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	460c      	mov	r4, r1
 8003c52:	461a      	mov	r2, r3
 8003c54:	4bb8      	ldr	r3, [pc, #736]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003c56:	fba3 2302 	umull	r2, r3, r3, r2
 8003c5a:	095b      	lsrs	r3, r3, #5
 8003c5c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	469b      	mov	fp, r3
 8003c64:	f04f 0c00 	mov.w	ip, #0
 8003c68:	46d9      	mov	r9, fp
 8003c6a:	46e2      	mov	sl, ip
 8003c6c:	eb19 0309 	adds.w	r3, r9, r9
 8003c70:	eb4a 040a 	adc.w	r4, sl, sl
 8003c74:	4699      	mov	r9, r3
 8003c76:	46a2      	mov	sl, r4
 8003c78:	eb19 090b 	adds.w	r9, r9, fp
 8003c7c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003c80:	f04f 0100 	mov.w	r1, #0
 8003c84:	f04f 0200 	mov.w	r2, #0
 8003c88:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003c8c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003c90:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003c94:	4689      	mov	r9, r1
 8003c96:	4692      	mov	sl, r2
 8003c98:	eb1b 0509 	adds.w	r5, fp, r9
 8003c9c:	eb4c 060a 	adc.w	r6, ip, sl
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	f04f 0400 	mov.w	r4, #0
 8003cb2:	0094      	lsls	r4, r2, #2
 8003cb4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003cb8:	008b      	lsls	r3, r1, #2
 8003cba:	461a      	mov	r2, r3
 8003cbc:	4623      	mov	r3, r4
 8003cbe:	4628      	mov	r0, r5
 8003cc0:	4631      	mov	r1, r6
 8003cc2:	f7fc fafd 	bl	80002c0 <__aeabi_uldivmod>
 8003cc6:	4603      	mov	r3, r0
 8003cc8:	460c      	mov	r4, r1
 8003cca:	461a      	mov	r2, r3
 8003ccc:	4b9a      	ldr	r3, [pc, #616]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003cce:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd2:	095b      	lsrs	r3, r3, #5
 8003cd4:	2164      	movs	r1, #100	; 0x64
 8003cd6:	fb01 f303 	mul.w	r3, r1, r3
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	011b      	lsls	r3, r3, #4
 8003cde:	3332      	adds	r3, #50	; 0x32
 8003ce0:	4a95      	ldr	r2, [pc, #596]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce6:	095b      	lsrs	r3, r3, #5
 8003ce8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003cec:	4498      	add	r8, r3
 8003cee:	68bb      	ldr	r3, [r7, #8]
 8003cf0:	469b      	mov	fp, r3
 8003cf2:	f04f 0c00 	mov.w	ip, #0
 8003cf6:	46d9      	mov	r9, fp
 8003cf8:	46e2      	mov	sl, ip
 8003cfa:	eb19 0309 	adds.w	r3, r9, r9
 8003cfe:	eb4a 040a 	adc.w	r4, sl, sl
 8003d02:	4699      	mov	r9, r3
 8003d04:	46a2      	mov	sl, r4
 8003d06:	eb19 090b 	adds.w	r9, r9, fp
 8003d0a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003d0e:	f04f 0100 	mov.w	r1, #0
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003d1a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003d1e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003d22:	4689      	mov	r9, r1
 8003d24:	4692      	mov	sl, r2
 8003d26:	eb1b 0509 	adds.w	r5, fp, r9
 8003d2a:	eb4c 060a 	adc.w	r6, ip, sl
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	4619      	mov	r1, r3
 8003d34:	f04f 0200 	mov.w	r2, #0
 8003d38:	f04f 0300 	mov.w	r3, #0
 8003d3c:	f04f 0400 	mov.w	r4, #0
 8003d40:	0094      	lsls	r4, r2, #2
 8003d42:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003d46:	008b      	lsls	r3, r1, #2
 8003d48:	461a      	mov	r2, r3
 8003d4a:	4623      	mov	r3, r4
 8003d4c:	4628      	mov	r0, r5
 8003d4e:	4631      	mov	r1, r6
 8003d50:	f7fc fab6 	bl	80002c0 <__aeabi_uldivmod>
 8003d54:	4603      	mov	r3, r0
 8003d56:	460c      	mov	r4, r1
 8003d58:	461a      	mov	r2, r3
 8003d5a:	4b77      	ldr	r3, [pc, #476]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003d5c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d60:	095b      	lsrs	r3, r3, #5
 8003d62:	2164      	movs	r1, #100	; 0x64
 8003d64:	fb01 f303 	mul.w	r3, r1, r3
 8003d68:	1ad3      	subs	r3, r2, r3
 8003d6a:	011b      	lsls	r3, r3, #4
 8003d6c:	3332      	adds	r3, #50	; 0x32
 8003d6e:	4a72      	ldr	r2, [pc, #456]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003d70:	fba2 2303 	umull	r2, r3, r2, r3
 8003d74:	095b      	lsrs	r3, r3, #5
 8003d76:	f003 020f 	and.w	r2, r3, #15
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	4442      	add	r2, r8
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	e0d0      	b.n	8003f26 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d84:	f7fe fb5c 	bl	8002440 <HAL_RCC_GetPCLK1Freq>
 8003d88:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	469a      	mov	sl, r3
 8003d8e:	f04f 0b00 	mov.w	fp, #0
 8003d92:	46d0      	mov	r8, sl
 8003d94:	46d9      	mov	r9, fp
 8003d96:	eb18 0308 	adds.w	r3, r8, r8
 8003d9a:	eb49 0409 	adc.w	r4, r9, r9
 8003d9e:	4698      	mov	r8, r3
 8003da0:	46a1      	mov	r9, r4
 8003da2:	eb18 080a 	adds.w	r8, r8, sl
 8003da6:	eb49 090b 	adc.w	r9, r9, fp
 8003daa:	f04f 0100 	mov.w	r1, #0
 8003dae:	f04f 0200 	mov.w	r2, #0
 8003db2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8003db6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8003dba:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8003dbe:	4688      	mov	r8, r1
 8003dc0:	4691      	mov	r9, r2
 8003dc2:	eb1a 0508 	adds.w	r5, sl, r8
 8003dc6:	eb4b 0609 	adc.w	r6, fp, r9
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	4619      	mov	r1, r3
 8003dd0:	f04f 0200 	mov.w	r2, #0
 8003dd4:	f04f 0300 	mov.w	r3, #0
 8003dd8:	f04f 0400 	mov.w	r4, #0
 8003ddc:	0094      	lsls	r4, r2, #2
 8003dde:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003de2:	008b      	lsls	r3, r1, #2
 8003de4:	461a      	mov	r2, r3
 8003de6:	4623      	mov	r3, r4
 8003de8:	4628      	mov	r0, r5
 8003dea:	4631      	mov	r1, r6
 8003dec:	f7fc fa68 	bl	80002c0 <__aeabi_uldivmod>
 8003df0:	4603      	mov	r3, r0
 8003df2:	460c      	mov	r4, r1
 8003df4:	461a      	mov	r2, r3
 8003df6:	4b50      	ldr	r3, [pc, #320]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003df8:	fba3 2302 	umull	r2, r3, r3, r2
 8003dfc:	095b      	lsrs	r3, r3, #5
 8003dfe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	469b      	mov	fp, r3
 8003e06:	f04f 0c00 	mov.w	ip, #0
 8003e0a:	46d9      	mov	r9, fp
 8003e0c:	46e2      	mov	sl, ip
 8003e0e:	eb19 0309 	adds.w	r3, r9, r9
 8003e12:	eb4a 040a 	adc.w	r4, sl, sl
 8003e16:	4699      	mov	r9, r3
 8003e18:	46a2      	mov	sl, r4
 8003e1a:	eb19 090b 	adds.w	r9, r9, fp
 8003e1e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003e22:	f04f 0100 	mov.w	r1, #0
 8003e26:	f04f 0200 	mov.w	r2, #0
 8003e2a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003e2e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003e32:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003e36:	4689      	mov	r9, r1
 8003e38:	4692      	mov	sl, r2
 8003e3a:	eb1b 0509 	adds.w	r5, fp, r9
 8003e3e:	eb4c 060a 	adc.w	r6, ip, sl
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	685b      	ldr	r3, [r3, #4]
 8003e46:	4619      	mov	r1, r3
 8003e48:	f04f 0200 	mov.w	r2, #0
 8003e4c:	f04f 0300 	mov.w	r3, #0
 8003e50:	f04f 0400 	mov.w	r4, #0
 8003e54:	0094      	lsls	r4, r2, #2
 8003e56:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003e5a:	008b      	lsls	r3, r1, #2
 8003e5c:	461a      	mov	r2, r3
 8003e5e:	4623      	mov	r3, r4
 8003e60:	4628      	mov	r0, r5
 8003e62:	4631      	mov	r1, r6
 8003e64:	f7fc fa2c 	bl	80002c0 <__aeabi_uldivmod>
 8003e68:	4603      	mov	r3, r0
 8003e6a:	460c      	mov	r4, r1
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4b32      	ldr	r3, [pc, #200]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003e70:	fba3 1302 	umull	r1, r3, r3, r2
 8003e74:	095b      	lsrs	r3, r3, #5
 8003e76:	2164      	movs	r1, #100	; 0x64
 8003e78:	fb01 f303 	mul.w	r3, r1, r3
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	3332      	adds	r3, #50	; 0x32
 8003e82:	4a2d      	ldr	r2, [pc, #180]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003e84:	fba2 2303 	umull	r2, r3, r2, r3
 8003e88:	095b      	lsrs	r3, r3, #5
 8003e8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e8e:	4498      	add	r8, r3
 8003e90:	68bb      	ldr	r3, [r7, #8]
 8003e92:	469b      	mov	fp, r3
 8003e94:	f04f 0c00 	mov.w	ip, #0
 8003e98:	46d9      	mov	r9, fp
 8003e9a:	46e2      	mov	sl, ip
 8003e9c:	eb19 0309 	adds.w	r3, r9, r9
 8003ea0:	eb4a 040a 	adc.w	r4, sl, sl
 8003ea4:	4699      	mov	r9, r3
 8003ea6:	46a2      	mov	sl, r4
 8003ea8:	eb19 090b 	adds.w	r9, r9, fp
 8003eac:	eb4a 0a0c 	adc.w	sl, sl, ip
 8003eb0:	f04f 0100 	mov.w	r1, #0
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ebc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8003ec0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8003ec4:	4689      	mov	r9, r1
 8003ec6:	4692      	mov	sl, r2
 8003ec8:	eb1b 0509 	adds.w	r5, fp, r9
 8003ecc:	eb4c 060a 	adc.w	r6, ip, sl
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	f04f 0300 	mov.w	r3, #0
 8003ede:	f04f 0400 	mov.w	r4, #0
 8003ee2:	0094      	lsls	r4, r2, #2
 8003ee4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8003ee8:	008b      	lsls	r3, r1, #2
 8003eea:	461a      	mov	r2, r3
 8003eec:	4623      	mov	r3, r4
 8003eee:	4628      	mov	r0, r5
 8003ef0:	4631      	mov	r1, r6
 8003ef2:	f7fc f9e5 	bl	80002c0 <__aeabi_uldivmod>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	460c      	mov	r4, r1
 8003efa:	461a      	mov	r2, r3
 8003efc:	4b0e      	ldr	r3, [pc, #56]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003efe:	fba3 1302 	umull	r1, r3, r3, r2
 8003f02:	095b      	lsrs	r3, r3, #5
 8003f04:	2164      	movs	r1, #100	; 0x64
 8003f06:	fb01 f303 	mul.w	r3, r1, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	011b      	lsls	r3, r3, #4
 8003f0e:	3332      	adds	r3, #50	; 0x32
 8003f10:	4a09      	ldr	r2, [pc, #36]	; (8003f38 <UART_SetConfig+0x6f4>)
 8003f12:	fba2 2303 	umull	r2, r3, r2, r3
 8003f16:	095b      	lsrs	r3, r3, #5
 8003f18:	f003 020f 	and.w	r2, r3, #15
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4442      	add	r2, r8
 8003f22:	609a      	str	r2, [r3, #8]
}
 8003f24:	e7ff      	b.n	8003f26 <UART_SetConfig+0x6e2>
 8003f26:	bf00      	nop
 8003f28:	3714      	adds	r7, #20
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f30:	40011000 	.word	0x40011000
 8003f34:	40011400 	.word	0x40011400
 8003f38:	51eb851f 	.word	0x51eb851f

08003f3c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	4603      	mov	r3, r0
 8003f44:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003f4a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f4e:	2b84      	cmp	r3, #132	; 0x84
 8003f50:	d005      	beq.n	8003f5e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003f52:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	4413      	add	r3, r2
 8003f5a:	3303      	adds	r3, #3
 8003f5c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3714      	adds	r7, #20
 8003f64:	46bd      	mov	sp, r7
 8003f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6a:	4770      	bx	lr

08003f6c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003f6c:	b480      	push	{r7}
 8003f6e:	b083      	sub	sp, #12
 8003f70:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f72:	f3ef 8305 	mrs	r3, IPSR
 8003f76:	607b      	str	r3, [r7, #4]
  return(result);
 8003f78:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	bf14      	ite	ne
 8003f7e:	2301      	movne	r3, #1
 8003f80:	2300      	moveq	r3, #0
 8003f82:	b2db      	uxtb	r3, r3
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003f94:	f001 f8dc 	bl	8005150 <vTaskStartScheduler>
  
  return osOK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	bd80      	pop	{r7, pc}

08003f9e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003f9e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fa0:	b089      	sub	sp, #36	; 0x24
 8003fa2:	af04      	add	r7, sp, #16
 8003fa4:	6078      	str	r0, [r7, #4]
 8003fa6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	695b      	ldr	r3, [r3, #20]
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d020      	beq.n	8003ff2 <osThreadCreate+0x54>
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	699b      	ldr	r3, [r3, #24]
 8003fb4:	2b00      	cmp	r3, #0
 8003fb6:	d01c      	beq.n	8003ff2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685c      	ldr	r4, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681d      	ldr	r5, [r3, #0]
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691e      	ldr	r6, [r3, #16]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff ffb6 	bl	8003f3c <makeFreeRtosPriority>
 8003fd0:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	695b      	ldr	r3, [r3, #20]
 8003fd6:	687a      	ldr	r2, [r7, #4]
 8003fd8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003fda:	9202      	str	r2, [sp, #8]
 8003fdc:	9301      	str	r3, [sp, #4]
 8003fde:	9100      	str	r1, [sp, #0]
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	4632      	mov	r2, r6
 8003fe4:	4629      	mov	r1, r5
 8003fe6:	4620      	mov	r0, r4
 8003fe8:	f000 fef7 	bl	8004dda <xTaskCreateStatic>
 8003fec:	4603      	mov	r3, r0
 8003fee:	60fb      	str	r3, [r7, #12]
 8003ff0:	e01c      	b.n	800402c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	685c      	ldr	r4, [r3, #4]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003ffe:	b29e      	uxth	r6, r3
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8004006:	4618      	mov	r0, r3
 8004008:	f7ff ff98 	bl	8003f3c <makeFreeRtosPriority>
 800400c:	4602      	mov	r2, r0
 800400e:	f107 030c 	add.w	r3, r7, #12
 8004012:	9301      	str	r3, [sp, #4]
 8004014:	9200      	str	r2, [sp, #0]
 8004016:	683b      	ldr	r3, [r7, #0]
 8004018:	4632      	mov	r2, r6
 800401a:	4629      	mov	r1, r5
 800401c:	4620      	mov	r0, r4
 800401e:	f000 ff35 	bl	8004e8c <xTaskCreate>
 8004022:	4603      	mov	r3, r0
 8004024:	2b01      	cmp	r3, #1
 8004026:	d001      	beq.n	800402c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8004028:	2300      	movs	r3, #0
 800402a:	e000      	b.n	800402e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800402c:	68fb      	ldr	r3, [r7, #12]
}
 800402e:	4618      	mov	r0, r3
 8004030:	3714      	adds	r7, #20
 8004032:	46bd      	mov	sp, r7
 8004034:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004036 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b084      	sub	sp, #16
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d001      	beq.n	800404c <osDelay+0x16>
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	e000      	b.n	800404e <osDelay+0x18>
 800404c:	2301      	movs	r3, #1
 800404e:	4618      	mov	r0, r3
 8004050:	f001 f84a 	bl	80050e8 <vTaskDelay>
  
  return osOK;
 8004054:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004056:	4618      	mov	r0, r3
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}

0800405e <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800405e:	b590      	push	{r4, r7, lr}
 8004060:	b085      	sub	sp, #20
 8004062:	af02      	add	r7, sp, #8
 8004064:	6078      	str	r0, [r7, #4]
 8004066:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d012      	beq.n	8004096 <osMessageCreate+0x38>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	68db      	ldr	r3, [r3, #12]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d00e      	beq.n	8004096 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6818      	ldr	r0, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6859      	ldr	r1, [r3, #4]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	689a      	ldr	r2, [r3, #8]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	68dc      	ldr	r4, [r3, #12]
 8004088:	2300      	movs	r3, #0
 800408a:	9300      	str	r3, [sp, #0]
 800408c:	4623      	mov	r3, r4
 800408e:	f000 f9df 	bl	8004450 <xQueueGenericCreateStatic>
 8004092:	4603      	mov	r3, r0
 8004094:	e008      	b.n	80040a8 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6818      	ldr	r0, [r3, #0]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	685b      	ldr	r3, [r3, #4]
 800409e:	2200      	movs	r2, #0
 80040a0:	4619      	mov	r1, r3
 80040a2:	f000 fa47 	bl	8004534 <xQueueGenericCreate>
 80040a6:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 80040a8:	4618      	mov	r0, r3
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd90      	pop	{r4, r7, pc}

080040b0 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 80040b0:	b580      	push	{r7, lr}
 80040b2:	b086      	sub	sp, #24
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	60f8      	str	r0, [r7, #12]
 80040b8:	60b9      	str	r1, [r7, #8]
 80040ba:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <osMessagePut+0x1e>
    ticks = 1;
 80040ca:	2301      	movs	r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 80040ce:	f7ff ff4d 	bl	8003f6c <inHandlerMode>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d018      	beq.n	800410a <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 80040d8:	f107 0210 	add.w	r2, r7, #16
 80040dc:	f107 0108 	add.w	r1, r7, #8
 80040e0:	2300      	movs	r3, #0
 80040e2:	68f8      	ldr	r0, [r7, #12]
 80040e4:	f000 fb7c 	bl	80047e0 <xQueueGenericSendFromISR>
 80040e8:	4603      	mov	r3, r0
 80040ea:	2b01      	cmp	r3, #1
 80040ec:	d001      	beq.n	80040f2 <osMessagePut+0x42>
      return osErrorOS;
 80040ee:	23ff      	movs	r3, #255	; 0xff
 80040f0:	e018      	b.n	8004124 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d014      	beq.n	8004122 <osMessagePut+0x72>
 80040f8:	4b0c      	ldr	r3, [pc, #48]	; (800412c <osMessagePut+0x7c>)
 80040fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	f3bf 8f4f 	dsb	sy
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	e00b      	b.n	8004122 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800410a:	f107 0108 	add.w	r1, r7, #8
 800410e:	2300      	movs	r3, #0
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fa6a 	bl	80045ec <xQueueGenericSend>
 8004118:	4603      	mov	r3, r0
 800411a:	2b01      	cmp	r3, #1
 800411c:	d001      	beq.n	8004122 <osMessagePut+0x72>
      return osErrorOS;
 800411e:	23ff      	movs	r3, #255	; 0xff
 8004120:	e000      	b.n	8004124 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	4618      	mov	r0, r3
 8004126:	3718      	adds	r7, #24
 8004128:	46bd      	mov	sp, r7
 800412a:	bd80      	pop	{r7, pc}
 800412c:	e000ed04 	.word	0xe000ed04

08004130 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8004130:	b590      	push	{r4, r7, lr}
 8004132:	b08b      	sub	sp, #44	; 0x2c
 8004134:	af00      	add	r7, sp, #0
 8004136:	60f8      	str	r0, [r7, #12]
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8004140:	2300      	movs	r3, #0
 8004142:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d10a      	bne.n	8004160 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800414a:	2380      	movs	r3, #128	; 0x80
 800414c:	617b      	str	r3, [r7, #20]
    return event;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	461c      	mov	r4, r3
 8004152:	f107 0314 	add.w	r3, r7, #20
 8004156:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800415a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800415e:	e054      	b.n	800420a <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8004160:	2300      	movs	r3, #0
 8004162:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800416e:	d103      	bne.n	8004178 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8004170:	f04f 33ff 	mov.w	r3, #4294967295
 8004174:	627b      	str	r3, [r7, #36]	; 0x24
 8004176:	e009      	b.n	800418c <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d006      	beq.n	800418c <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8004182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <osMessageGet+0x5c>
      ticks = 1;
 8004188:	2301      	movs	r3, #1
 800418a:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800418c:	f7ff feee 	bl	8003f6c <inHandlerMode>
 8004190:	4603      	mov	r3, r0
 8004192:	2b00      	cmp	r3, #0
 8004194:	d01c      	beq.n	80041d0 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8004196:	f107 0220 	add.w	r2, r7, #32
 800419a:	f107 0314 	add.w	r3, r7, #20
 800419e:	3304      	adds	r3, #4
 80041a0:	4619      	mov	r1, r3
 80041a2:	68b8      	ldr	r0, [r7, #8]
 80041a4:	f000 fc8c 	bl	8004ac0 <xQueueReceiveFromISR>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d102      	bne.n	80041b4 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 80041ae:	2310      	movs	r3, #16
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e001      	b.n	80041b8 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 80041b8:	6a3b      	ldr	r3, [r7, #32]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d01d      	beq.n	80041fa <osMessageGet+0xca>
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <osMessageGet+0xe4>)
 80041c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041c4:	601a      	str	r2, [r3, #0]
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	f3bf 8f6f 	isb	sy
 80041ce:	e014      	b.n	80041fa <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	3304      	adds	r3, #4
 80041d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80041d8:	4619      	mov	r1, r3
 80041da:	68b8      	ldr	r0, [r7, #8]
 80041dc:	f000 fb94 	bl	8004908 <xQueueReceive>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b01      	cmp	r3, #1
 80041e4:	d102      	bne.n	80041ec <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 80041e6:	2310      	movs	r3, #16
 80041e8:	617b      	str	r3, [r7, #20]
 80041ea:	e006      	b.n	80041fa <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 80041ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d101      	bne.n	80041f6 <osMessageGet+0xc6>
 80041f2:	2300      	movs	r3, #0
 80041f4:	e000      	b.n	80041f8 <osMessageGet+0xc8>
 80041f6:	2340      	movs	r3, #64	; 0x40
 80041f8:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	461c      	mov	r4, r3
 80041fe:	f107 0314 	add.w	r3, r7, #20
 8004202:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8004206:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	372c      	adds	r7, #44	; 0x2c
 800420e:	46bd      	mov	sp, r7
 8004210:	bd90      	pop	{r4, r7, pc}
 8004212:	bf00      	nop
 8004214:	e000ed04 	.word	0xe000ed04

08004218 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004218:	b480      	push	{r7}
 800421a:	b083      	sub	sp, #12
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f103 0208 	add.w	r2, r3, #8
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	f04f 32ff 	mov.w	r2, #4294967295
 8004230:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f103 0208 	add.w	r2, r3, #8
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 0208 	add.w	r2, r3, #8
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2200      	movs	r2, #0
 800424a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800424c:	bf00      	nop
 800424e:	370c      	adds	r7, #12
 8004250:	46bd      	mov	sp, r7
 8004252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004256:	4770      	bx	lr

08004258 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004258:	b480      	push	{r7}
 800425a:	b083      	sub	sp, #12
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2200      	movs	r2, #0
 8004264:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr

08004272 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004272:	b480      	push	{r7}
 8004274:	b085      	sub	sp, #20
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
 800427a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	689a      	ldr	r2, [r3, #8]
 800428c:	683b      	ldr	r3, [r7, #0]
 800428e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	683a      	ldr	r2, [r7, #0]
 8004296:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	683a      	ldr	r2, [r7, #0]
 800429c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	1c5a      	adds	r2, r3, #1
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	601a      	str	r2, [r3, #0]
}
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042d0:	d103      	bne.n	80042da <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	691b      	ldr	r3, [r3, #16]
 80042d6:	60fb      	str	r3, [r7, #12]
 80042d8:	e00c      	b.n	80042f4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	3308      	adds	r3, #8
 80042de:	60fb      	str	r3, [r7, #12]
 80042e0:	e002      	b.n	80042e8 <vListInsert+0x2e>
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68ba      	ldr	r2, [r7, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d2f6      	bcs.n	80042e2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	685a      	ldr	r2, [r3, #4]
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	685b      	ldr	r3, [r3, #4]
 8004300:	683a      	ldr	r2, [r7, #0]
 8004302:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004304:	683b      	ldr	r3, [r7, #0]
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	687a      	ldr	r2, [r7, #4]
 8004314:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	601a      	str	r2, [r3, #0]
}
 8004320:	bf00      	nop
 8004322:	3714      	adds	r7, #20
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr

0800432c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	687a      	ldr	r2, [r7, #4]
 8004340:	6892      	ldr	r2, [r2, #8]
 8004342:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	689b      	ldr	r3, [r3, #8]
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	6852      	ldr	r2, [r2, #4]
 800434c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	685b      	ldr	r3, [r3, #4]
 8004352:	687a      	ldr	r2, [r7, #4]
 8004354:	429a      	cmp	r2, r3
 8004356:	d103      	bne.n	8004360 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	689a      	ldr	r2, [r3, #8]
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2200      	movs	r2, #0
 8004364:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	1e5a      	subs	r2, r3, #1
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
}
 8004374:	4618      	mov	r0, r3
 8004376:	3714      	adds	r7, #20
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004398:	f383 8811 	msr	BASEPRI, r3
 800439c:	f3bf 8f6f 	isb	sy
 80043a0:	f3bf 8f4f 	dsb	sy
 80043a4:	60bb      	str	r3, [r7, #8]
 80043a6:	e7fe      	b.n	80043a6 <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 80043a8:	f001 fd00 	bl	8005dac <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043b4:	68f9      	ldr	r1, [r7, #12]
 80043b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043b8:	fb01 f303 	mul.w	r3, r1, r3
 80043bc:	441a      	add	r2, r3
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	2200      	movs	r2, #0
 80043c6:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	681a      	ldr	r2, [r3, #0]
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043d8:	3b01      	subs	r3, #1
 80043da:	68f9      	ldr	r1, [r7, #12]
 80043dc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	441a      	add	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	22ff      	movs	r2, #255	; 0xff
 80043ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	22ff      	movs	r2, #255	; 0xff
 80043f4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d114      	bne.n	8004428 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	691b      	ldr	r3, [r3, #16]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d01a      	beq.n	800443c <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	3310      	adds	r3, #16
 800440a:	4618      	mov	r0, r3
 800440c:	f001 f8e2 	bl	80055d4 <xTaskRemoveFromEventList>
 8004410:	4603      	mov	r3, r0
 8004412:	2b00      	cmp	r3, #0
 8004414:	d012      	beq.n	800443c <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004416:	4b0d      	ldr	r3, [pc, #52]	; (800444c <xQueueGenericReset+0xcc>)
 8004418:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800441c:	601a      	str	r2, [r3, #0]
 800441e:	f3bf 8f4f 	dsb	sy
 8004422:	f3bf 8f6f 	isb	sy
 8004426:	e009      	b.n	800443c <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	3310      	adds	r3, #16
 800442c:	4618      	mov	r0, r3
 800442e:	f7ff fef3 	bl	8004218 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	3324      	adds	r3, #36	; 0x24
 8004436:	4618      	mov	r0, r3
 8004438:	f7ff feee 	bl	8004218 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800443c:	f001 fce4 	bl	8005e08 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004440:	2301      	movs	r3, #1
}
 8004442:	4618      	mov	r0, r3
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	e000ed04 	.word	0xe000ed04

08004450 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004450:	b580      	push	{r7, lr}
 8004452:	b08e      	sub	sp, #56	; 0x38
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
 800445c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2b00      	cmp	r3, #0
 8004462:	d109      	bne.n	8004478 <xQueueGenericCreateStatic+0x28>
 8004464:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004468:	f383 8811 	msr	BASEPRI, r3
 800446c:	f3bf 8f6f 	isb	sy
 8004470:	f3bf 8f4f 	dsb	sy
 8004474:	62bb      	str	r3, [r7, #40]	; 0x28
 8004476:	e7fe      	b.n	8004476 <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d109      	bne.n	8004492 <xQueueGenericCreateStatic+0x42>
 800447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004482:	f383 8811 	msr	BASEPRI, r3
 8004486:	f3bf 8f6f 	isb	sy
 800448a:	f3bf 8f4f 	dsb	sy
 800448e:	627b      	str	r3, [r7, #36]	; 0x24
 8004490:	e7fe      	b.n	8004490 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <xQueueGenericCreateStatic+0x4e>
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d001      	beq.n	80044a2 <xQueueGenericCreateStatic+0x52>
 800449e:	2301      	movs	r3, #1
 80044a0:	e000      	b.n	80044a4 <xQueueGenericCreateStatic+0x54>
 80044a2:	2300      	movs	r3, #0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d109      	bne.n	80044bc <xQueueGenericCreateStatic+0x6c>
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	623b      	str	r3, [r7, #32]
 80044ba:	e7fe      	b.n	80044ba <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d102      	bne.n	80044c8 <xQueueGenericCreateStatic+0x78>
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d101      	bne.n	80044cc <xQueueGenericCreateStatic+0x7c>
 80044c8:	2301      	movs	r3, #1
 80044ca:	e000      	b.n	80044ce <xQueueGenericCreateStatic+0x7e>
 80044cc:	2300      	movs	r3, #0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d109      	bne.n	80044e6 <xQueueGenericCreateStatic+0x96>
 80044d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d6:	f383 8811 	msr	BASEPRI, r3
 80044da:	f3bf 8f6f 	isb	sy
 80044de:	f3bf 8f4f 	dsb	sy
 80044e2:	61fb      	str	r3, [r7, #28]
 80044e4:	e7fe      	b.n	80044e4 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80044e6:	2348      	movs	r3, #72	; 0x48
 80044e8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	2b48      	cmp	r3, #72	; 0x48
 80044ee:	d009      	beq.n	8004504 <xQueueGenericCreateStatic+0xb4>
 80044f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044f4:	f383 8811 	msr	BASEPRI, r3
 80044f8:	f3bf 8f6f 	isb	sy
 80044fc:	f3bf 8f4f 	dsb	sy
 8004500:	61bb      	str	r3, [r7, #24]
 8004502:	e7fe      	b.n	8004502 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004508:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800450a:	2b00      	cmp	r3, #0
 800450c:	d00d      	beq.n	800452a <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800450e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004510:	2201      	movs	r2, #1
 8004512:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004516:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800451a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800451c:	9300      	str	r3, [sp, #0]
 800451e:	4613      	mov	r3, r2
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	68b9      	ldr	r1, [r7, #8]
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f000 f842 	bl	80045ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 800452a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800452c:	4618      	mov	r0, r3
 800452e:	3730      	adds	r7, #48	; 0x30
 8004530:	46bd      	mov	sp, r7
 8004532:	bd80      	pop	{r7, pc}

08004534 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004534:	b580      	push	{r7, lr}
 8004536:	b08a      	sub	sp, #40	; 0x28
 8004538:	af02      	add	r7, sp, #8
 800453a:	60f8      	str	r0, [r7, #12]
 800453c:	60b9      	str	r1, [r7, #8]
 800453e:	4613      	mov	r3, r2
 8004540:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d109      	bne.n	800455c <xQueueGenericCreate+0x28>
 8004548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800454c:	f383 8811 	msr	BASEPRI, r3
 8004550:	f3bf 8f6f 	isb	sy
 8004554:	f3bf 8f4f 	dsb	sy
 8004558:	613b      	str	r3, [r7, #16]
 800455a:	e7fe      	b.n	800455a <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	2b00      	cmp	r3, #0
 8004560:	d102      	bne.n	8004568 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
 8004566:	e004      	b.n	8004572 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	fb02 f303 	mul.w	r3, r2, r3
 8004570:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	3348      	adds	r3, #72	; 0x48
 8004576:	4618      	mov	r0, r3
 8004578:	f001 fd32 	bl	8005fe0 <pvPortMalloc>
 800457c:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800457e:	69bb      	ldr	r3, [r7, #24]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d00f      	beq.n	80045a4 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004584:	69bb      	ldr	r3, [r7, #24]
 8004586:	3348      	adds	r3, #72	; 0x48
 8004588:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800458a:	69bb      	ldr	r3, [r7, #24]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004592:	79fa      	ldrb	r2, [r7, #7]
 8004594:	69bb      	ldr	r3, [r7, #24]
 8004596:	9300      	str	r3, [sp, #0]
 8004598:	4613      	mov	r3, r2
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	68b9      	ldr	r1, [r7, #8]
 800459e:	68f8      	ldr	r0, [r7, #12]
 80045a0:	f000 f805 	bl	80045ae <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 80045a4:	69bb      	ldr	r3, [r7, #24]
	}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3720      	adds	r7, #32
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}

080045ae <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80045ae:	b580      	push	{r7, lr}
 80045b0:	b084      	sub	sp, #16
 80045b2:	af00      	add	r7, sp, #0
 80045b4:	60f8      	str	r0, [r7, #12]
 80045b6:	60b9      	str	r1, [r7, #8]
 80045b8:	607a      	str	r2, [r7, #4]
 80045ba:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d103      	bne.n	80045ca <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80045c2:	69bb      	ldr	r3, [r7, #24]
 80045c4:	69ba      	ldr	r2, [r7, #24]
 80045c6:	601a      	str	r2, [r3, #0]
 80045c8:	e002      	b.n	80045d0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80045ca:	69bb      	ldr	r3, [r7, #24]
 80045cc:	687a      	ldr	r2, [r7, #4]
 80045ce:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80045d0:	69bb      	ldr	r3, [r7, #24]
 80045d2:	68fa      	ldr	r2, [r7, #12]
 80045d4:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80045d6:	69bb      	ldr	r3, [r7, #24]
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80045dc:	2101      	movs	r1, #1
 80045de:	69b8      	ldr	r0, [r7, #24]
 80045e0:	f7ff fece 	bl	8004380 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80045e4:	bf00      	nop
 80045e6:	3710      	adds	r7, #16
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80045ec:	b580      	push	{r7, lr}
 80045ee:	b08e      	sub	sp, #56	; 0x38
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
 80045f8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80045fa:	2300      	movs	r3, #0
 80045fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004604:	2b00      	cmp	r3, #0
 8004606:	d109      	bne.n	800461c <xQueueGenericSend+0x30>
 8004608:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460c:	f383 8811 	msr	BASEPRI, r3
 8004610:	f3bf 8f6f 	isb	sy
 8004614:	f3bf 8f4f 	dsb	sy
 8004618:	62bb      	str	r3, [r7, #40]	; 0x28
 800461a:	e7fe      	b.n	800461a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	2b00      	cmp	r3, #0
 8004620:	d103      	bne.n	800462a <xQueueGenericSend+0x3e>
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004626:	2b00      	cmp	r3, #0
 8004628:	d101      	bne.n	800462e <xQueueGenericSend+0x42>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <xQueueGenericSend+0x44>
 800462e:	2300      	movs	r3, #0
 8004630:	2b00      	cmp	r3, #0
 8004632:	d109      	bne.n	8004648 <xQueueGenericSend+0x5c>
 8004634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004638:	f383 8811 	msr	BASEPRI, r3
 800463c:	f3bf 8f6f 	isb	sy
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	627b      	str	r3, [r7, #36]	; 0x24
 8004646:	e7fe      	b.n	8004646 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	2b02      	cmp	r3, #2
 800464c:	d103      	bne.n	8004656 <xQueueGenericSend+0x6a>
 800464e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004650:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004652:	2b01      	cmp	r3, #1
 8004654:	d101      	bne.n	800465a <xQueueGenericSend+0x6e>
 8004656:	2301      	movs	r3, #1
 8004658:	e000      	b.n	800465c <xQueueGenericSend+0x70>
 800465a:	2300      	movs	r3, #0
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <xQueueGenericSend+0x88>
 8004660:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004664:	f383 8811 	msr	BASEPRI, r3
 8004668:	f3bf 8f6f 	isb	sy
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	623b      	str	r3, [r7, #32]
 8004672:	e7fe      	b.n	8004672 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004674:	f001 f96a 	bl	800594c <xTaskGetSchedulerState>
 8004678:	4603      	mov	r3, r0
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <xQueueGenericSend+0x98>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d101      	bne.n	8004688 <xQueueGenericSend+0x9c>
 8004684:	2301      	movs	r3, #1
 8004686:	e000      	b.n	800468a <xQueueGenericSend+0x9e>
 8004688:	2300      	movs	r3, #0
 800468a:	2b00      	cmp	r3, #0
 800468c:	d109      	bne.n	80046a2 <xQueueGenericSend+0xb6>
 800468e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004692:	f383 8811 	msr	BASEPRI, r3
 8004696:	f3bf 8f6f 	isb	sy
 800469a:	f3bf 8f4f 	dsb	sy
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e7fe      	b.n	80046a0 <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80046a2:	f001 fb83 	bl	8005dac <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80046a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80046aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046ae:	429a      	cmp	r2, r3
 80046b0:	d302      	bcc.n	80046b8 <xQueueGenericSend+0xcc>
 80046b2:	683b      	ldr	r3, [r7, #0]
 80046b4:	2b02      	cmp	r3, #2
 80046b6:	d129      	bne.n	800470c <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80046b8:	683a      	ldr	r2, [r7, #0]
 80046ba:	68b9      	ldr	r1, [r7, #8]
 80046bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80046be:	f000 fa7c 	bl	8004bba <prvCopyDataToQueue>
 80046c2:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d010      	beq.n	80046ee <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80046cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ce:	3324      	adds	r3, #36	; 0x24
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 ff7f 	bl	80055d4 <xTaskRemoveFromEventList>
 80046d6:	4603      	mov	r3, r0
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d013      	beq.n	8004704 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80046dc:	4b3f      	ldr	r3, [pc, #252]	; (80047dc <xQueueGenericSend+0x1f0>)
 80046de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	f3bf 8f4f 	dsb	sy
 80046e8:	f3bf 8f6f 	isb	sy
 80046ec:	e00a      	b.n	8004704 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80046ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d007      	beq.n	8004704 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80046f4:	4b39      	ldr	r3, [pc, #228]	; (80047dc <xQueueGenericSend+0x1f0>)
 80046f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046fa:	601a      	str	r2, [r3, #0]
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004704:	f001 fb80 	bl	8005e08 <vPortExitCritical>
				return pdPASS;
 8004708:	2301      	movs	r3, #1
 800470a:	e063      	b.n	80047d4 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d103      	bne.n	800471a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004712:	f001 fb79 	bl	8005e08 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004716:	2300      	movs	r3, #0
 8004718:	e05c      	b.n	80047d4 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800471a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800471c:	2b00      	cmp	r3, #0
 800471e:	d106      	bne.n	800472e <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004720:	f107 0314 	add.w	r3, r7, #20
 8004724:	4618      	mov	r0, r3
 8004726:	f000 ffb7 	bl	8005698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800472a:	2301      	movs	r3, #1
 800472c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800472e:	f001 fb6b 	bl	8005e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004732:	f000 fd6b 	bl	800520c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004736:	f001 fb39 	bl	8005dac <vPortEnterCritical>
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004740:	b25b      	sxtb	r3, r3
 8004742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004746:	d103      	bne.n	8004750 <xQueueGenericSend+0x164>
 8004748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004752:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004756:	b25b      	sxtb	r3, r3
 8004758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800475c:	d103      	bne.n	8004766 <xQueueGenericSend+0x17a>
 800475e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004766:	f001 fb4f 	bl	8005e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800476a:	1d3a      	adds	r2, r7, #4
 800476c:	f107 0314 	add.w	r3, r7, #20
 8004770:	4611      	mov	r1, r2
 8004772:	4618      	mov	r0, r3
 8004774:	f000 ffa6 	bl	80056c4 <xTaskCheckForTimeOut>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d124      	bne.n	80047c8 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800477e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004780:	f000 fb13 	bl	8004daa <prvIsQueueFull>
 8004784:	4603      	mov	r3, r0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d018      	beq.n	80047bc <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800478a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800478c:	3310      	adds	r3, #16
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4611      	mov	r1, r2
 8004792:	4618      	mov	r0, r3
 8004794:	f000 fefa 	bl	800558c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004798:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800479a:	f000 fa9e 	bl	8004cda <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800479e:	f000 fd43 	bl	8005228 <xTaskResumeAll>
 80047a2:	4603      	mov	r3, r0
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	f47f af7c 	bne.w	80046a2 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 80047aa:	4b0c      	ldr	r3, [pc, #48]	; (80047dc <xQueueGenericSend+0x1f0>)
 80047ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047b0:	601a      	str	r2, [r3, #0]
 80047b2:	f3bf 8f4f 	dsb	sy
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	e772      	b.n	80046a2 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80047bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047be:	f000 fa8c 	bl	8004cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80047c2:	f000 fd31 	bl	8005228 <xTaskResumeAll>
 80047c6:	e76c      	b.n	80046a2 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80047c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047ca:	f000 fa86 	bl	8004cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80047ce:	f000 fd2b 	bl	8005228 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80047d2:	2300      	movs	r3, #0
		}
	}
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3738      	adds	r7, #56	; 0x38
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}
 80047dc:	e000ed04 	.word	0xe000ed04

080047e0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b08e      	sub	sp, #56	; 0x38
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	60f8      	str	r0, [r7, #12]
 80047e8:	60b9      	str	r1, [r7, #8]
 80047ea:	607a      	str	r2, [r7, #4]
 80047ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d109      	bne.n	800480c <xQueueGenericSendFromISR+0x2c>
 80047f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fc:	f383 8811 	msr	BASEPRI, r3
 8004800:	f3bf 8f6f 	isb	sy
 8004804:	f3bf 8f4f 	dsb	sy
 8004808:	627b      	str	r3, [r7, #36]	; 0x24
 800480a:	e7fe      	b.n	800480a <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	2b00      	cmp	r3, #0
 8004810:	d103      	bne.n	800481a <xQueueGenericSendFromISR+0x3a>
 8004812:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004816:	2b00      	cmp	r3, #0
 8004818:	d101      	bne.n	800481e <xQueueGenericSendFromISR+0x3e>
 800481a:	2301      	movs	r3, #1
 800481c:	e000      	b.n	8004820 <xQueueGenericSendFromISR+0x40>
 800481e:	2300      	movs	r3, #0
 8004820:	2b00      	cmp	r3, #0
 8004822:	d109      	bne.n	8004838 <xQueueGenericSendFromISR+0x58>
 8004824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004828:	f383 8811 	msr	BASEPRI, r3
 800482c:	f3bf 8f6f 	isb	sy
 8004830:	f3bf 8f4f 	dsb	sy
 8004834:	623b      	str	r3, [r7, #32]
 8004836:	e7fe      	b.n	8004836 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b02      	cmp	r3, #2
 800483c:	d103      	bne.n	8004846 <xQueueGenericSendFromISR+0x66>
 800483e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004842:	2b01      	cmp	r3, #1
 8004844:	d101      	bne.n	800484a <xQueueGenericSendFromISR+0x6a>
 8004846:	2301      	movs	r3, #1
 8004848:	e000      	b.n	800484c <xQueueGenericSendFromISR+0x6c>
 800484a:	2300      	movs	r3, #0
 800484c:	2b00      	cmp	r3, #0
 800484e:	d109      	bne.n	8004864 <xQueueGenericSendFromISR+0x84>
 8004850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004854:	f383 8811 	msr	BASEPRI, r3
 8004858:	f3bf 8f6f 	isb	sy
 800485c:	f3bf 8f4f 	dsb	sy
 8004860:	61fb      	str	r3, [r7, #28]
 8004862:	e7fe      	b.n	8004862 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004864:	f001 fb7e 	bl	8005f64 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004868:	f3ef 8211 	mrs	r2, BASEPRI
 800486c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004870:	f383 8811 	msr	BASEPRI, r3
 8004874:	f3bf 8f6f 	isb	sy
 8004878:	f3bf 8f4f 	dsb	sy
 800487c:	61ba      	str	r2, [r7, #24]
 800487e:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004880:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004882:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004886:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800488a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <xQueueGenericSendFromISR+0xb6>
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	2b02      	cmp	r3, #2
 8004894:	d12c      	bne.n	80048f0 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800489c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048a0:	683a      	ldr	r2, [r7, #0]
 80048a2:	68b9      	ldr	r1, [r7, #8]
 80048a4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048a6:	f000 f988 	bl	8004bba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80048aa:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80048ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048b2:	d112      	bne.n	80048da <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d016      	beq.n	80048ea <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	3324      	adds	r3, #36	; 0x24
 80048c0:	4618      	mov	r0, r3
 80048c2:	f000 fe87 	bl	80055d4 <xTaskRemoveFromEventList>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00e      	beq.n	80048ea <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d00b      	beq.n	80048ea <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	2201      	movs	r2, #1
 80048d6:	601a      	str	r2, [r3, #0]
 80048d8:	e007      	b.n	80048ea <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80048da:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80048de:	3301      	adds	r3, #1
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	b25a      	sxtb	r2, r3
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80048ea:	2301      	movs	r3, #1
 80048ec:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80048ee:	e001      	b.n	80048f4 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80048f0:	2300      	movs	r3, #0
 80048f2:	637b      	str	r3, [r7, #52]	; 0x34
 80048f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f6:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80048f8:	693b      	ldr	r3, [r7, #16]
 80048fa:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004900:	4618      	mov	r0, r3
 8004902:	3738      	adds	r7, #56	; 0x38
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}

08004908 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004908:	b580      	push	{r7, lr}
 800490a:	b08c      	sub	sp, #48	; 0x30
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004914:	2300      	movs	r3, #0
 8004916:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <xQueueReceive+0x2e>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	623b      	str	r3, [r7, #32]
 8004934:	e7fe      	b.n	8004934 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004936:	68bb      	ldr	r3, [r7, #8]
 8004938:	2b00      	cmp	r3, #0
 800493a:	d103      	bne.n	8004944 <xQueueReceive+0x3c>
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <xQueueReceive+0x40>
 8004944:	2301      	movs	r3, #1
 8004946:	e000      	b.n	800494a <xQueueReceive+0x42>
 8004948:	2300      	movs	r3, #0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d109      	bne.n	8004962 <xQueueReceive+0x5a>
 800494e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004952:	f383 8811 	msr	BASEPRI, r3
 8004956:	f3bf 8f6f 	isb	sy
 800495a:	f3bf 8f4f 	dsb	sy
 800495e:	61fb      	str	r3, [r7, #28]
 8004960:	e7fe      	b.n	8004960 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004962:	f000 fff3 	bl	800594c <xTaskGetSchedulerState>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d102      	bne.n	8004972 <xQueueReceive+0x6a>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d101      	bne.n	8004976 <xQueueReceive+0x6e>
 8004972:	2301      	movs	r3, #1
 8004974:	e000      	b.n	8004978 <xQueueReceive+0x70>
 8004976:	2300      	movs	r3, #0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d109      	bne.n	8004990 <xQueueReceive+0x88>
 800497c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004980:	f383 8811 	msr	BASEPRI, r3
 8004984:	f3bf 8f6f 	isb	sy
 8004988:	f3bf 8f4f 	dsb	sy
 800498c:	61bb      	str	r3, [r7, #24]
 800498e:	e7fe      	b.n	800498e <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004990:	f001 fa0c 	bl	8005dac <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004996:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004998:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800499a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800499c:	2b00      	cmp	r3, #0
 800499e:	d01f      	beq.n	80049e0 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049a0:	68b9      	ldr	r1, [r7, #8]
 80049a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049a4:	f000 f973 	bl	8004c8e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d00f      	beq.n	80049d8 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ba:	3310      	adds	r3, #16
 80049bc:	4618      	mov	r0, r3
 80049be:	f000 fe09 	bl	80055d4 <xTaskRemoveFromEventList>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d007      	beq.n	80049d8 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80049c8:	4b3c      	ldr	r3, [pc, #240]	; (8004abc <xQueueReceive+0x1b4>)
 80049ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049ce:	601a      	str	r2, [r3, #0]
 80049d0:	f3bf 8f4f 	dsb	sy
 80049d4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80049d8:	f001 fa16 	bl	8005e08 <vPortExitCritical>
				return pdPASS;
 80049dc:	2301      	movs	r3, #1
 80049de:	e069      	b.n	8004ab4 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d103      	bne.n	80049ee <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80049e6:	f001 fa0f 	bl	8005e08 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80049ea:	2300      	movs	r3, #0
 80049ec:	e062      	b.n	8004ab4 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 80049ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d106      	bne.n	8004a02 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80049f4:	f107 0310 	add.w	r3, r7, #16
 80049f8:	4618      	mov	r0, r3
 80049fa:	f000 fe4d 	bl	8005698 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80049fe:	2301      	movs	r3, #1
 8004a00:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004a02:	f001 fa01 	bl	8005e08 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004a06:	f000 fc01 	bl	800520c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004a0a:	f001 f9cf 	bl	8005dac <vPortEnterCritical>
 8004a0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a10:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a14:	b25b      	sxtb	r3, r3
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d103      	bne.n	8004a24 <xQueueReceive+0x11c>
 8004a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004a24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a26:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004a2a:	b25b      	sxtb	r3, r3
 8004a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a30:	d103      	bne.n	8004a3a <xQueueReceive+0x132>
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	2200      	movs	r2, #0
 8004a36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004a3a:	f001 f9e5 	bl	8005e08 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004a3e:	1d3a      	adds	r2, r7, #4
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	4611      	mov	r1, r2
 8004a46:	4618      	mov	r0, r3
 8004a48:	f000 fe3c 	bl	80056c4 <xTaskCheckForTimeOut>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d123      	bne.n	8004a9a <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a54:	f000 f993 	bl	8004d7e <prvIsQueueEmpty>
 8004a58:	4603      	mov	r3, r0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d017      	beq.n	8004a8e <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004a5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a60:	3324      	adds	r3, #36	; 0x24
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	4611      	mov	r1, r2
 8004a66:	4618      	mov	r0, r3
 8004a68:	f000 fd90 	bl	800558c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a6e:	f000 f934 	bl	8004cda <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a72:	f000 fbd9 	bl	8005228 <xTaskResumeAll>
 8004a76:	4603      	mov	r3, r0
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d189      	bne.n	8004990 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8004a7c:	4b0f      	ldr	r3, [pc, #60]	; (8004abc <xQueueReceive+0x1b4>)
 8004a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a82:	601a      	str	r2, [r3, #0]
 8004a84:	f3bf 8f4f 	dsb	sy
 8004a88:	f3bf 8f6f 	isb	sy
 8004a8c:	e780      	b.n	8004990 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a90:	f000 f923 	bl	8004cda <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a94:	f000 fbc8 	bl	8005228 <xTaskResumeAll>
 8004a98:	e77a      	b.n	8004990 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a9c:	f000 f91d 	bl	8004cda <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004aa0:	f000 fbc2 	bl	8005228 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004aa4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004aa6:	f000 f96a 	bl	8004d7e <prvIsQueueEmpty>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	f43f af6f 	beq.w	8004990 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004ab2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004ab4:	4618      	mov	r0, r3
 8004ab6:	3730      	adds	r7, #48	; 0x30
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bd80      	pop	{r7, pc}
 8004abc:	e000ed04 	.word	0xe000ed04

08004ac0 <xQueueReceiveFromISR>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08e      	sub	sp, #56	; 0x38
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	60f8      	str	r0, [r7, #12]
 8004ac8:	60b9      	str	r1, [r7, #8]
 8004aca:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004ad0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d109      	bne.n	8004aea <xQueueReceiveFromISR+0x2a>
 8004ad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ada:	f383 8811 	msr	BASEPRI, r3
 8004ade:	f3bf 8f6f 	isb	sy
 8004ae2:	f3bf 8f4f 	dsb	sy
 8004ae6:	623b      	str	r3, [r7, #32]
 8004ae8:	e7fe      	b.n	8004ae8 <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d103      	bne.n	8004af8 <xQueueReceiveFromISR+0x38>
 8004af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <xQueueReceiveFromISR+0x3c>
 8004af8:	2301      	movs	r3, #1
 8004afa:	e000      	b.n	8004afe <xQueueReceiveFromISR+0x3e>
 8004afc:	2300      	movs	r3, #0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d109      	bne.n	8004b16 <xQueueReceiveFromISR+0x56>
 8004b02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b06:	f383 8811 	msr	BASEPRI, r3
 8004b0a:	f3bf 8f6f 	isb	sy
 8004b0e:	f3bf 8f4f 	dsb	sy
 8004b12:	61fb      	str	r3, [r7, #28]
 8004b14:	e7fe      	b.n	8004b14 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b16:	f001 fa25 	bl	8005f64 <vPortValidateInterruptPriority>
	__asm volatile
 8004b1a:	f3ef 8211 	mrs	r2, BASEPRI
 8004b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b22:	f383 8811 	msr	BASEPRI, r3
 8004b26:	f3bf 8f6f 	isb	sy
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	61ba      	str	r2, [r7, #24]
 8004b30:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004b32:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004b34:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d02f      	beq.n	8004ba2 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b4c:	68b9      	ldr	r1, [r7, #8]
 8004b4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004b50:	f000 f89d 	bl	8004c8e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b56:	1e5a      	subs	r2, r3, #1
 8004b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8004b5c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b64:	d112      	bne.n	8004b8c <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d016      	beq.n	8004b9c <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b70:	3310      	adds	r3, #16
 8004b72:	4618      	mov	r0, r3
 8004b74:	f000 fd2e 	bl	80055d4 <xTaskRemoveFromEventList>
 8004b78:	4603      	mov	r3, r0
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d00e      	beq.n	8004b9c <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d00b      	beq.n	8004b9c <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2201      	movs	r2, #1
 8004b88:	601a      	str	r2, [r3, #0]
 8004b8a:	e007      	b.n	8004b9c <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004b8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004b90:	3301      	adds	r3, #1
 8004b92:	b2db      	uxtb	r3, r3
 8004b94:	b25a      	sxtb	r2, r3
 8004b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba0:	e001      	b.n	8004ba6 <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ba6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba8:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004baa:	693b      	ldr	r3, [r7, #16]
 8004bac:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004bb0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	3738      	adds	r7, #56	; 0x38
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004bba:	b580      	push	{r7, lr}
 8004bbc:	b086      	sub	sp, #24
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	60f8      	str	r0, [r7, #12]
 8004bc2:	60b9      	str	r1, [r7, #8]
 8004bc4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d10d      	bne.n	8004bf4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d14d      	bne.n	8004c7c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f000 fecf 	bl	8005988 <xTaskPriorityDisinherit>
 8004bea:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	605a      	str	r2, [r3, #4]
 8004bf2:	e043      	b.n	8004c7c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d119      	bne.n	8004c2e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6898      	ldr	r0, [r3, #8]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c02:	461a      	mov	r2, r3
 8004c04:	68b9      	ldr	r1, [r7, #8]
 8004c06:	f001 ffdb 	bl	8006bc0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	689a      	ldr	r2, [r3, #8]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c12:	441a      	add	r2, r3
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	689a      	ldr	r2, [r3, #8]
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d32b      	bcc.n	8004c7c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681a      	ldr	r2, [r3, #0]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	609a      	str	r2, [r3, #8]
 8004c2c:	e026      	b.n	8004c7c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	68d8      	ldr	r0, [r3, #12]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c36:	461a      	mov	r2, r3
 8004c38:	68b9      	ldr	r1, [r7, #8]
 8004c3a:	f001 ffc1 	bl	8006bc0 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	68da      	ldr	r2, [r3, #12]
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	425b      	negs	r3, r3
 8004c48:	441a      	add	r2, r3
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	68da      	ldr	r2, [r3, #12]
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d207      	bcs.n	8004c6a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685a      	ldr	r2, [r3, #4]
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c62:	425b      	negs	r3, r3
 8004c64:	441a      	add	r2, r3
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d105      	bne.n	8004c7c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004c70:	693b      	ldr	r3, [r7, #16]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d002      	beq.n	8004c7c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	3b01      	subs	r3, #1
 8004c7a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	1c5a      	adds	r2, r3, #1
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004c84:	697b      	ldr	r3, [r7, #20]
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3718      	adds	r7, #24
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	bd80      	pop	{r7, pc}

08004c8e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004c8e:	b580      	push	{r7, lr}
 8004c90:	b082      	sub	sp, #8
 8004c92:	af00      	add	r7, sp, #0
 8004c94:	6078      	str	r0, [r7, #4]
 8004c96:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d018      	beq.n	8004cd2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca8:	441a      	add	r2, r3
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	68da      	ldr	r2, [r3, #12]
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	429a      	cmp	r2, r3
 8004cb8:	d303      	bcc.n	8004cc2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	68d9      	ldr	r1, [r3, #12]
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	461a      	mov	r2, r3
 8004ccc:	6838      	ldr	r0, [r7, #0]
 8004cce:	f001 ff77 	bl	8006bc0 <memcpy>
	}
}
 8004cd2:	bf00      	nop
 8004cd4:	3708      	adds	r7, #8
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}

08004cda <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004cda:	b580      	push	{r7, lr}
 8004cdc:	b084      	sub	sp, #16
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004ce2:	f001 f863 	bl	8005dac <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004cec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004cee:	e011      	b.n	8004d14 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d012      	beq.n	8004d1e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	3324      	adds	r3, #36	; 0x24
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f000 fc69 	bl	80055d4 <xTaskRemoveFromEventList>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d001      	beq.n	8004d0c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004d08:	f000 fd3c 	bl	8005784 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004d0c:	7bfb      	ldrb	r3, [r7, #15]
 8004d0e:	3b01      	subs	r3, #1
 8004d10:	b2db      	uxtb	r3, r3
 8004d12:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004d14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	dce9      	bgt.n	8004cf0 <prvUnlockQueue+0x16>
 8004d1c:	e000      	b.n	8004d20 <prvUnlockQueue+0x46>
					break;
 8004d1e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	22ff      	movs	r2, #255	; 0xff
 8004d24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004d28:	f001 f86e 	bl	8005e08 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004d2c:	f001 f83e 	bl	8005dac <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d36:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d38:	e011      	b.n	8004d5e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d012      	beq.n	8004d68 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3310      	adds	r3, #16
 8004d46:	4618      	mov	r0, r3
 8004d48:	f000 fc44 	bl	80055d4 <xTaskRemoveFromEventList>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d001      	beq.n	8004d56 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004d52:	f000 fd17 	bl	8005784 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004d56:	7bbb      	ldrb	r3, [r7, #14]
 8004d58:	3b01      	subs	r3, #1
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004d5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	dce9      	bgt.n	8004d3a <prvUnlockQueue+0x60>
 8004d66:	e000      	b.n	8004d6a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004d68:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	22ff      	movs	r2, #255	; 0xff
 8004d6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004d72:	f001 f849 	bl	8005e08 <vPortExitCritical>
}
 8004d76:	bf00      	nop
 8004d78:	3710      	adds	r7, #16
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}

08004d7e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004d7e:	b580      	push	{r7, lr}
 8004d80:	b084      	sub	sp, #16
 8004d82:	af00      	add	r7, sp, #0
 8004d84:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004d86:	f001 f811 	bl	8005dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d102      	bne.n	8004d98 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004d92:	2301      	movs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
 8004d96:	e001      	b.n	8004d9c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004d98:	2300      	movs	r3, #0
 8004d9a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004d9c:	f001 f834 	bl	8005e08 <vPortExitCritical>

	return xReturn;
 8004da0:	68fb      	ldr	r3, [r7, #12]
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b084      	sub	sp, #16
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004db2:	f000 fffb 	bl	8005dac <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	d102      	bne.n	8004dc8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	60fb      	str	r3, [r7, #12]
 8004dc6:	e001      	b.n	8004dcc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004dc8:	2300      	movs	r3, #0
 8004dca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004dcc:	f001 f81c 	bl	8005e08 <vPortExitCritical>

	return xReturn;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3710      	adds	r7, #16
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b08e      	sub	sp, #56	; 0x38
 8004dde:	af04      	add	r7, sp, #16
 8004de0:	60f8      	str	r0, [r7, #12]
 8004de2:	60b9      	str	r1, [r7, #8]
 8004de4:	607a      	str	r2, [r7, #4]
 8004de6:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004de8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d109      	bne.n	8004e02 <xTaskCreateStatic+0x28>
	__asm volatile
 8004dee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df2:	f383 8811 	msr	BASEPRI, r3
 8004df6:	f3bf 8f6f 	isb	sy
 8004dfa:	f3bf 8f4f 	dsb	sy
 8004dfe:	623b      	str	r3, [r7, #32]
 8004e00:	e7fe      	b.n	8004e00 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 8004e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <xTaskCreateStatic+0x42>
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	61fb      	str	r3, [r7, #28]
 8004e1a:	e7fe      	b.n	8004e1a <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e1c:	2354      	movs	r3, #84	; 0x54
 8004e1e:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	2b54      	cmp	r3, #84	; 0x54
 8004e24:	d009      	beq.n	8004e3a <xTaskCreateStatic+0x60>
 8004e26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2a:	f383 8811 	msr	BASEPRI, r3
 8004e2e:	f3bf 8f6f 	isb	sy
 8004e32:	f3bf 8f4f 	dsb	sy
 8004e36:	61bb      	str	r3, [r7, #24]
 8004e38:	e7fe      	b.n	8004e38 <xTaskCreateStatic+0x5e>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d01e      	beq.n	8004e7e <xTaskCreateStatic+0xa4>
 8004e40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d01b      	beq.n	8004e7e <xTaskCreateStatic+0xa4>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e4c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e4e:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e52:	2202      	movs	r2, #2
 8004e54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e58:	2300      	movs	r3, #0
 8004e5a:	9303      	str	r3, [sp, #12]
 8004e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5e:	9302      	str	r3, [sp, #8]
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	9301      	str	r3, [sp, #4]
 8004e66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e68:	9300      	str	r3, [sp, #0]
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	687a      	ldr	r2, [r7, #4]
 8004e6e:	68b9      	ldr	r1, [r7, #8]
 8004e70:	68f8      	ldr	r0, [r7, #12]
 8004e72:	f000 f850 	bl	8004f16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e76:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e78:	f000 f8cc 	bl	8005014 <prvAddNewTaskToReadyList>
 8004e7c:	e001      	b.n	8004e82 <xTaskCreateStatic+0xa8>
		}
		else
		{
			xReturn = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e82:	697b      	ldr	r3, [r7, #20]
	}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3728      	adds	r7, #40	; 0x28
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b08c      	sub	sp, #48	; 0x30
 8004e90:	af04      	add	r7, sp, #16
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	60b9      	str	r1, [r7, #8]
 8004e96:	603b      	str	r3, [r7, #0]
 8004e98:	4613      	mov	r3, r2
 8004e9a:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e9c:	88fb      	ldrh	r3, [r7, #6]
 8004e9e:	009b      	lsls	r3, r3, #2
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f001 f89d 	bl	8005fe0 <pvPortMalloc>
 8004ea6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d00e      	beq.n	8004ecc <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004eae:	2054      	movs	r0, #84	; 0x54
 8004eb0:	f001 f896 	bl	8005fe0 <pvPortMalloc>
 8004eb4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004eb6:	69fb      	ldr	r3, [r7, #28]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d003      	beq.n	8004ec4 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	631a      	str	r2, [r3, #48]	; 0x30
 8004ec2:	e005      	b.n	8004ed0 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ec4:	6978      	ldr	r0, [r7, #20]
 8004ec6:	f001 f94d 	bl	8006164 <vPortFree>
 8004eca:	e001      	b.n	8004ed0 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ed0:	69fb      	ldr	r3, [r7, #28]
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d017      	beq.n	8004f06 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	2200      	movs	r2, #0
 8004eda:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ede:	88fa      	ldrh	r2, [r7, #6]
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	9303      	str	r3, [sp, #12]
 8004ee4:	69fb      	ldr	r3, [r7, #28]
 8004ee6:	9302      	str	r3, [sp, #8]
 8004ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004eea:	9301      	str	r3, [sp, #4]
 8004eec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eee:	9300      	str	r3, [sp, #0]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	68b9      	ldr	r1, [r7, #8]
 8004ef4:	68f8      	ldr	r0, [r7, #12]
 8004ef6:	f000 f80e 	bl	8004f16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004efa:	69f8      	ldr	r0, [r7, #28]
 8004efc:	f000 f88a 	bl	8005014 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004f00:	2301      	movs	r3, #1
 8004f02:	61bb      	str	r3, [r7, #24]
 8004f04:	e002      	b.n	8004f0c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004f06:	f04f 33ff 	mov.w	r3, #4294967295
 8004f0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004f0c:	69bb      	ldr	r3, [r7, #24]
	}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3720      	adds	r7, #32
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f16:	b580      	push	{r7, lr}
 8004f18:	b088      	sub	sp, #32
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	60f8      	str	r0, [r7, #12]
 8004f1e:	60b9      	str	r1, [r7, #8]
 8004f20:	607a      	str	r2, [r7, #4]
 8004f22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004f24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f2e:	3b01      	subs	r3, #1
 8004f30:	009b      	lsls	r3, r3, #2
 8004f32:	4413      	add	r3, r2
 8004f34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	f023 0307 	bic.w	r3, r3, #7
 8004f3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f3e:	69bb      	ldr	r3, [r7, #24]
 8004f40:	f003 0307 	and.w	r3, r3, #7
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d009      	beq.n	8004f5c <prvInitialiseNewTask+0x46>
 8004f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4c:	f383 8811 	msr	BASEPRI, r3
 8004f50:	f3bf 8f6f 	isb	sy
 8004f54:	f3bf 8f4f 	dsb	sy
 8004f58:	617b      	str	r3, [r7, #20]
 8004f5a:	e7fe      	b.n	8004f5a <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61fb      	str	r3, [r7, #28]
 8004f60:	e012      	b.n	8004f88 <prvInitialiseNewTask+0x72>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f62:	68ba      	ldr	r2, [r7, #8]
 8004f64:	69fb      	ldr	r3, [r7, #28]
 8004f66:	4413      	add	r3, r2
 8004f68:	7819      	ldrb	r1, [r3, #0]
 8004f6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f6c:	69fb      	ldr	r3, [r7, #28]
 8004f6e:	4413      	add	r3, r2
 8004f70:	3334      	adds	r3, #52	; 0x34
 8004f72:	460a      	mov	r2, r1
 8004f74:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8004f76:	68ba      	ldr	r2, [r7, #8]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	4413      	add	r3, r2
 8004f7c:	781b      	ldrb	r3, [r3, #0]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d006      	beq.n	8004f90 <prvInitialiseNewTask+0x7a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	3301      	adds	r3, #1
 8004f86:	61fb      	str	r3, [r7, #28]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	2b0f      	cmp	r3, #15
 8004f8c:	d9e9      	bls.n	8004f62 <prvInitialiseNewTask+0x4c>
 8004f8e:	e000      	b.n	8004f92 <prvInitialiseNewTask+0x7c>
		{
			break;
 8004f90:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f94:	2200      	movs	r2, #0
 8004f96:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004f9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f9c:	2b06      	cmp	r3, #6
 8004f9e:	d901      	bls.n	8004fa4 <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fa0:	2306      	movs	r3, #6
 8004fa2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fa8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004faa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fae:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb2:	2200      	movs	r2, #0
 8004fb4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fb8:	3304      	adds	r3, #4
 8004fba:	4618      	mov	r0, r3
 8004fbc:	f7ff f94c 	bl	8004258 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc2:	3318      	adds	r3, #24
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7ff f947 	bl	8004258 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fce:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd2:	f1c3 0207 	rsb	r2, r3, #7
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fdc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fde:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004fe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004fee:	683a      	ldr	r2, [r7, #0]
 8004ff0:	68f9      	ldr	r1, [r7, #12]
 8004ff2:	69b8      	ldr	r0, [r7, #24]
 8004ff4:	f000 fdb2 	bl	8005b5c <pxPortInitialiseStack>
 8004ff8:	4602      	mov	r2, r0
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005000:	2b00      	cmp	r3, #0
 8005002:	d002      	beq.n	800500a <prvInitialiseNewTask+0xf4>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005004:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005006:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005008:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800500a:	bf00      	nop
 800500c:	3720      	adds	r7, #32
 800500e:	46bd      	mov	sp, r7
 8005010:	bd80      	pop	{r7, pc}
	...

08005014 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b082      	sub	sp, #8
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800501c:	f000 fec6 	bl	8005dac <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005020:	4b2a      	ldr	r3, [pc, #168]	; (80050cc <prvAddNewTaskToReadyList+0xb8>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3301      	adds	r3, #1
 8005026:	4a29      	ldr	r2, [pc, #164]	; (80050cc <prvAddNewTaskToReadyList+0xb8>)
 8005028:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800502a:	4b29      	ldr	r3, [pc, #164]	; (80050d0 <prvAddNewTaskToReadyList+0xbc>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	2b00      	cmp	r3, #0
 8005030:	d109      	bne.n	8005046 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005032:	4a27      	ldr	r2, [pc, #156]	; (80050d0 <prvAddNewTaskToReadyList+0xbc>)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005038:	4b24      	ldr	r3, [pc, #144]	; (80050cc <prvAddNewTaskToReadyList+0xb8>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2b01      	cmp	r3, #1
 800503e:	d110      	bne.n	8005062 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005040:	f000 fbc4 	bl	80057cc <prvInitialiseTaskLists>
 8005044:	e00d      	b.n	8005062 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005046:	4b23      	ldr	r3, [pc, #140]	; (80050d4 <prvAddNewTaskToReadyList+0xc0>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d109      	bne.n	8005062 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800504e:	4b20      	ldr	r3, [pc, #128]	; (80050d0 <prvAddNewTaskToReadyList+0xbc>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005058:	429a      	cmp	r2, r3
 800505a:	d802      	bhi.n	8005062 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800505c:	4a1c      	ldr	r2, [pc, #112]	; (80050d0 <prvAddNewTaskToReadyList+0xbc>)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005062:	4b1d      	ldr	r3, [pc, #116]	; (80050d8 <prvAddNewTaskToReadyList+0xc4>)
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	3301      	adds	r3, #1
 8005068:	4a1b      	ldr	r2, [pc, #108]	; (80050d8 <prvAddNewTaskToReadyList+0xc4>)
 800506a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005070:	2201      	movs	r2, #1
 8005072:	409a      	lsls	r2, r3
 8005074:	4b19      	ldr	r3, [pc, #100]	; (80050dc <prvAddNewTaskToReadyList+0xc8>)
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4313      	orrs	r3, r2
 800507a:	4a18      	ldr	r2, [pc, #96]	; (80050dc <prvAddNewTaskToReadyList+0xc8>)
 800507c:	6013      	str	r3, [r2, #0]
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005082:	4613      	mov	r3, r2
 8005084:	009b      	lsls	r3, r3, #2
 8005086:	4413      	add	r3, r2
 8005088:	009b      	lsls	r3, r3, #2
 800508a:	4a15      	ldr	r2, [pc, #84]	; (80050e0 <prvAddNewTaskToReadyList+0xcc>)
 800508c:	441a      	add	r2, r3
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	3304      	adds	r3, #4
 8005092:	4619      	mov	r1, r3
 8005094:	4610      	mov	r0, r2
 8005096:	f7ff f8ec 	bl	8004272 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800509a:	f000 feb5 	bl	8005e08 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800509e:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <prvAddNewTaskToReadyList+0xc0>)
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00e      	beq.n	80050c4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050a6:	4b0a      	ldr	r3, [pc, #40]	; (80050d0 <prvAddNewTaskToReadyList+0xbc>)
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050b0:	429a      	cmp	r2, r3
 80050b2:	d207      	bcs.n	80050c4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <prvAddNewTaskToReadyList+0xd0>)
 80050b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	f3bf 8f4f 	dsb	sy
 80050c0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050c4:	bf00      	nop
 80050c6:	3708      	adds	r7, #8
 80050c8:	46bd      	mov	sp, r7
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	20000418 	.word	0x20000418
 80050d0:	20000318 	.word	0x20000318
 80050d4:	20000424 	.word	0x20000424
 80050d8:	20000434 	.word	0x20000434
 80050dc:	20000420 	.word	0x20000420
 80050e0:	2000031c 	.word	0x2000031c
 80050e4:	e000ed04 	.word	0xe000ed04

080050e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b084      	sub	sp, #16
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80050f0:	2300      	movs	r3, #0
 80050f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d016      	beq.n	8005128 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80050fa:	4b13      	ldr	r3, [pc, #76]	; (8005148 <vTaskDelay+0x60>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d009      	beq.n	8005116 <vTaskDelay+0x2e>
 8005102:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005106:	f383 8811 	msr	BASEPRI, r3
 800510a:	f3bf 8f6f 	isb	sy
 800510e:	f3bf 8f4f 	dsb	sy
 8005112:	60bb      	str	r3, [r7, #8]
 8005114:	e7fe      	b.n	8005114 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8005116:	f000 f879 	bl	800520c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800511a:	2100      	movs	r1, #0
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 fcb7 	bl	8005a90 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005122:	f000 f881 	bl	8005228 <xTaskResumeAll>
 8005126:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d107      	bne.n	800513e <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800512e:	4b07      	ldr	r3, [pc, #28]	; (800514c <vTaskDelay+0x64>)
 8005130:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005134:	601a      	str	r2, [r3, #0]
 8005136:	f3bf 8f4f 	dsb	sy
 800513a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800513e:	bf00      	nop
 8005140:	3710      	adds	r7, #16
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	20000440 	.word	0x20000440
 800514c:	e000ed04 	.word	0xe000ed04

08005150 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b08a      	sub	sp, #40	; 0x28
 8005154:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005156:	2300      	movs	r3, #0
 8005158:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800515a:	2300      	movs	r3, #0
 800515c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800515e:	463a      	mov	r2, r7
 8005160:	1d39      	adds	r1, r7, #4
 8005162:	f107 0308 	add.w	r3, r7, #8
 8005166:	4618      	mov	r0, r3
 8005168:	f7fb fa2a 	bl	80005c0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800516c:	6839      	ldr	r1, [r7, #0]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	68ba      	ldr	r2, [r7, #8]
 8005172:	9202      	str	r2, [sp, #8]
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	2300      	movs	r3, #0
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	2300      	movs	r3, #0
 800517c:	460a      	mov	r2, r1
 800517e:	491d      	ldr	r1, [pc, #116]	; (80051f4 <vTaskStartScheduler+0xa4>)
 8005180:	481d      	ldr	r0, [pc, #116]	; (80051f8 <vTaskStartScheduler+0xa8>)
 8005182:	f7ff fe2a 	bl	8004dda <xTaskCreateStatic>
 8005186:	4602      	mov	r2, r0
 8005188:	4b1c      	ldr	r3, [pc, #112]	; (80051fc <vTaskStartScheduler+0xac>)
 800518a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <vTaskStartScheduler+0xac>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d002      	beq.n	800519a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005194:	2301      	movs	r3, #1
 8005196:	617b      	str	r3, [r7, #20]
 8005198:	e001      	b.n	800519e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800519a:	2300      	movs	r3, #0
 800519c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800519e:	697b      	ldr	r3, [r7, #20]
 80051a0:	2b01      	cmp	r3, #1
 80051a2:	d115      	bne.n	80051d0 <vTaskStartScheduler+0x80>
 80051a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051a8:	f383 8811 	msr	BASEPRI, r3
 80051ac:	f3bf 8f6f 	isb	sy
 80051b0:	f3bf 8f4f 	dsb	sy
 80051b4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80051b6:	4b12      	ldr	r3, [pc, #72]	; (8005200 <vTaskStartScheduler+0xb0>)
 80051b8:	f04f 32ff 	mov.w	r2, #4294967295
 80051bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80051be:	4b11      	ldr	r3, [pc, #68]	; (8005204 <vTaskStartScheduler+0xb4>)
 80051c0:	2201      	movs	r2, #1
 80051c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80051c4:	4b10      	ldr	r3, [pc, #64]	; (8005208 <vTaskStartScheduler+0xb8>)
 80051c6:	2200      	movs	r2, #0
 80051c8:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80051ca:	f000 fd51 	bl	8005c70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80051ce:	e00d      	b.n	80051ec <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051d6:	d109      	bne.n	80051ec <vTaskStartScheduler+0x9c>
 80051d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051dc:	f383 8811 	msr	BASEPRI, r3
 80051e0:	f3bf 8f6f 	isb	sy
 80051e4:	f3bf 8f4f 	dsb	sy
 80051e8:	60fb      	str	r3, [r7, #12]
 80051ea:	e7fe      	b.n	80051ea <vTaskStartScheduler+0x9a>
}
 80051ec:	bf00      	nop
 80051ee:	3718      	adds	r7, #24
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	08007b0c 	.word	0x08007b0c
 80051f8:	0800579d 	.word	0x0800579d
 80051fc:	2000043c 	.word	0x2000043c
 8005200:	20000438 	.word	0x20000438
 8005204:	20000424 	.word	0x20000424
 8005208:	2000041c 	.word	0x2000041c

0800520c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800520c:	b480      	push	{r7}
 800520e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8005210:	4b04      	ldr	r3, [pc, #16]	; (8005224 <vTaskSuspendAll+0x18>)
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	3301      	adds	r3, #1
 8005216:	4a03      	ldr	r2, [pc, #12]	; (8005224 <vTaskSuspendAll+0x18>)
 8005218:	6013      	str	r3, [r2, #0]
}
 800521a:	bf00      	nop
 800521c:	46bd      	mov	sp, r7
 800521e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005222:	4770      	bx	lr
 8005224:	20000440 	.word	0x20000440

08005228 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b084      	sub	sp, #16
 800522c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800522e:	2300      	movs	r3, #0
 8005230:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005232:	2300      	movs	r3, #0
 8005234:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005236:	4b41      	ldr	r3, [pc, #260]	; (800533c <xTaskResumeAll+0x114>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d109      	bne.n	8005252 <xTaskResumeAll+0x2a>
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	603b      	str	r3, [r7, #0]
 8005250:	e7fe      	b.n	8005250 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005252:	f000 fdab 	bl	8005dac <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005256:	4b39      	ldr	r3, [pc, #228]	; (800533c <xTaskResumeAll+0x114>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3b01      	subs	r3, #1
 800525c:	4a37      	ldr	r2, [pc, #220]	; (800533c <xTaskResumeAll+0x114>)
 800525e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005260:	4b36      	ldr	r3, [pc, #216]	; (800533c <xTaskResumeAll+0x114>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d161      	bne.n	800532c <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005268:	4b35      	ldr	r3, [pc, #212]	; (8005340 <xTaskResumeAll+0x118>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d05d      	beq.n	800532c <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005270:	e02e      	b.n	80052d0 <xTaskResumeAll+0xa8>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8005272:	4b34      	ldr	r3, [pc, #208]	; (8005344 <xTaskResumeAll+0x11c>)
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	3318      	adds	r3, #24
 800527e:	4618      	mov	r0, r3
 8005280:	f7ff f854 	bl	800432c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7ff f84f 	bl	800432c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005292:	2201      	movs	r2, #1
 8005294:	409a      	lsls	r2, r3
 8005296:	4b2c      	ldr	r3, [pc, #176]	; (8005348 <xTaskResumeAll+0x120>)
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	4313      	orrs	r3, r2
 800529c:	4a2a      	ldr	r2, [pc, #168]	; (8005348 <xTaskResumeAll+0x120>)
 800529e:	6013      	str	r3, [r2, #0]
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4a27      	ldr	r2, [pc, #156]	; (800534c <xTaskResumeAll+0x124>)
 80052ae:	441a      	add	r2, r3
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	3304      	adds	r3, #4
 80052b4:	4619      	mov	r1, r3
 80052b6:	4610      	mov	r0, r2
 80052b8:	f7fe ffdb 	bl	8004272 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052c0:	4b23      	ldr	r3, [pc, #140]	; (8005350 <xTaskResumeAll+0x128>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80052ca:	4b22      	ldr	r3, [pc, #136]	; (8005354 <xTaskResumeAll+0x12c>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80052d0:	4b1c      	ldr	r3, [pc, #112]	; (8005344 <xTaskResumeAll+0x11c>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	2b00      	cmp	r3, #0
 80052d6:	d1cc      	bne.n	8005272 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d001      	beq.n	80052e2 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80052de:	f000 fb0f 	bl	8005900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80052e2:	4b1d      	ldr	r3, [pc, #116]	; (8005358 <xTaskResumeAll+0x130>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d010      	beq.n	8005310 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80052ee:	f000 f837 	bl	8005360 <xTaskIncrementTick>
 80052f2:	4603      	mov	r3, r0
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d002      	beq.n	80052fe <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80052f8:	4b16      	ldr	r3, [pc, #88]	; (8005354 <xTaskResumeAll+0x12c>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	3b01      	subs	r3, #1
 8005302:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f1      	bne.n	80052ee <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800530a:	4b13      	ldr	r3, [pc, #76]	; (8005358 <xTaskResumeAll+0x130>)
 800530c:	2200      	movs	r2, #0
 800530e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005310:	4b10      	ldr	r3, [pc, #64]	; (8005354 <xTaskResumeAll+0x12c>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d009      	beq.n	800532c <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005318:	2301      	movs	r3, #1
 800531a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800531c:	4b0f      	ldr	r3, [pc, #60]	; (800535c <xTaskResumeAll+0x134>)
 800531e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005322:	601a      	str	r2, [r3, #0]
 8005324:	f3bf 8f4f 	dsb	sy
 8005328:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800532c:	f000 fd6c 	bl	8005e08 <vPortExitCritical>

	return xAlreadyYielded;
 8005330:	68bb      	ldr	r3, [r7, #8]
}
 8005332:	4618      	mov	r0, r3
 8005334:	3710      	adds	r7, #16
 8005336:	46bd      	mov	sp, r7
 8005338:	bd80      	pop	{r7, pc}
 800533a:	bf00      	nop
 800533c:	20000440 	.word	0x20000440
 8005340:	20000418 	.word	0x20000418
 8005344:	200003d8 	.word	0x200003d8
 8005348:	20000420 	.word	0x20000420
 800534c:	2000031c 	.word	0x2000031c
 8005350:	20000318 	.word	0x20000318
 8005354:	2000042c 	.word	0x2000042c
 8005358:	20000428 	.word	0x20000428
 800535c:	e000ed04 	.word	0xe000ed04

08005360 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005360:	b580      	push	{r7, lr}
 8005362:	b086      	sub	sp, #24
 8005364:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005366:	2300      	movs	r3, #0
 8005368:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800536a:	4b50      	ldr	r3, [pc, #320]	; (80054ac <xTaskIncrementTick+0x14c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	2b00      	cmp	r3, #0
 8005370:	f040 808c 	bne.w	800548c <xTaskIncrementTick+0x12c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005374:	4b4e      	ldr	r3, [pc, #312]	; (80054b0 <xTaskIncrementTick+0x150>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800537c:	4a4c      	ldr	r2, [pc, #304]	; (80054b0 <xTaskIncrementTick+0x150>)
 800537e:	693b      	ldr	r3, [r7, #16]
 8005380:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d11f      	bne.n	80053c8 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8005388:	4b4a      	ldr	r3, [pc, #296]	; (80054b4 <xTaskIncrementTick+0x154>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d009      	beq.n	80053a6 <xTaskIncrementTick+0x46>
 8005392:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005396:	f383 8811 	msr	BASEPRI, r3
 800539a:	f3bf 8f6f 	isb	sy
 800539e:	f3bf 8f4f 	dsb	sy
 80053a2:	603b      	str	r3, [r7, #0]
 80053a4:	e7fe      	b.n	80053a4 <xTaskIncrementTick+0x44>
 80053a6:	4b43      	ldr	r3, [pc, #268]	; (80054b4 <xTaskIncrementTick+0x154>)
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	4b42      	ldr	r3, [pc, #264]	; (80054b8 <xTaskIncrementTick+0x158>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a40      	ldr	r2, [pc, #256]	; (80054b4 <xTaskIncrementTick+0x154>)
 80053b2:	6013      	str	r3, [r2, #0]
 80053b4:	4a40      	ldr	r2, [pc, #256]	; (80054b8 <xTaskIncrementTick+0x158>)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	6013      	str	r3, [r2, #0]
 80053ba:	4b40      	ldr	r3, [pc, #256]	; (80054bc <xTaskIncrementTick+0x15c>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	3301      	adds	r3, #1
 80053c0:	4a3e      	ldr	r2, [pc, #248]	; (80054bc <xTaskIncrementTick+0x15c>)
 80053c2:	6013      	str	r3, [r2, #0]
 80053c4:	f000 fa9c 	bl	8005900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80053c8:	4b3d      	ldr	r3, [pc, #244]	; (80054c0 <xTaskIncrementTick+0x160>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	693a      	ldr	r2, [r7, #16]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d34d      	bcc.n	800546e <xTaskIncrementTick+0x10e>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053d2:	4b38      	ldr	r3, [pc, #224]	; (80054b4 <xTaskIncrementTick+0x154>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <xTaskIncrementTick+0x80>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <xTaskIncrementTick+0x82>
 80053e0:	2300      	movs	r3, #0
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d004      	beq.n	80053f0 <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053e6:	4b36      	ldr	r3, [pc, #216]	; (80054c0 <xTaskIncrementTick+0x160>)
 80053e8:	f04f 32ff 	mov.w	r2, #4294967295
 80053ec:	601a      	str	r2, [r3, #0]
					break;
 80053ee:	e03e      	b.n	800546e <xTaskIncrementTick+0x10e>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80053f0:	4b30      	ldr	r3, [pc, #192]	; (80054b4 <xTaskIncrementTick+0x154>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	68db      	ldr	r3, [r3, #12]
 80053f6:	68db      	ldr	r3, [r3, #12]
 80053f8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80053fa:	68bb      	ldr	r3, [r7, #8]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005400:	693a      	ldr	r2, [r7, #16]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	429a      	cmp	r2, r3
 8005406:	d203      	bcs.n	8005410 <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005408:	4a2d      	ldr	r2, [pc, #180]	; (80054c0 <xTaskIncrementTick+0x160>)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	6013      	str	r3, [r2, #0]
						break;
 800540e:	e02e      	b.n	800546e <xTaskIncrementTick+0x10e>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	3304      	adds	r3, #4
 8005414:	4618      	mov	r0, r3
 8005416:	f7fe ff89 	bl	800432c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800541e:	2b00      	cmp	r3, #0
 8005420:	d004      	beq.n	800542c <xTaskIncrementTick+0xcc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	3318      	adds	r3, #24
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe ff80 	bl	800432c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800542c:	68bb      	ldr	r3, [r7, #8]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	2201      	movs	r2, #1
 8005432:	409a      	lsls	r2, r3
 8005434:	4b23      	ldr	r3, [pc, #140]	; (80054c4 <xTaskIncrementTick+0x164>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	4313      	orrs	r3, r2
 800543a:	4a22      	ldr	r2, [pc, #136]	; (80054c4 <xTaskIncrementTick+0x164>)
 800543c:	6013      	str	r3, [r2, #0]
 800543e:	68bb      	ldr	r3, [r7, #8]
 8005440:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005442:	4613      	mov	r3, r2
 8005444:	009b      	lsls	r3, r3, #2
 8005446:	4413      	add	r3, r2
 8005448:	009b      	lsls	r3, r3, #2
 800544a:	4a1f      	ldr	r2, [pc, #124]	; (80054c8 <xTaskIncrementTick+0x168>)
 800544c:	441a      	add	r2, r3
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	3304      	adds	r3, #4
 8005452:	4619      	mov	r1, r3
 8005454:	4610      	mov	r0, r2
 8005456:	f7fe ff0c 	bl	8004272 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800545e:	4b1b      	ldr	r3, [pc, #108]	; (80054cc <xTaskIncrementTick+0x16c>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d3b4      	bcc.n	80053d2 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800546c:	e7b1      	b.n	80053d2 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800546e:	4b17      	ldr	r3, [pc, #92]	; (80054cc <xTaskIncrementTick+0x16c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005474:	4914      	ldr	r1, [pc, #80]	; (80054c8 <xTaskIncrementTick+0x168>)
 8005476:	4613      	mov	r3, r2
 8005478:	009b      	lsls	r3, r3, #2
 800547a:	4413      	add	r3, r2
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	440b      	add	r3, r1
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d907      	bls.n	8005496 <xTaskIncrementTick+0x136>
			{
				xSwitchRequired = pdTRUE;
 8005486:	2301      	movs	r3, #1
 8005488:	617b      	str	r3, [r7, #20]
 800548a:	e004      	b.n	8005496 <xTaskIncrementTick+0x136>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800548c:	4b10      	ldr	r3, [pc, #64]	; (80054d0 <xTaskIncrementTick+0x170>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3301      	adds	r3, #1
 8005492:	4a0f      	ldr	r2, [pc, #60]	; (80054d0 <xTaskIncrementTick+0x170>)
 8005494:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8005496:	4b0f      	ldr	r3, [pc, #60]	; (80054d4 <xTaskIncrementTick+0x174>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <xTaskIncrementTick+0x142>
		{
			xSwitchRequired = pdTRUE;
 800549e:	2301      	movs	r3, #1
 80054a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80054a2:	697b      	ldr	r3, [r7, #20]
}
 80054a4:	4618      	mov	r0, r3
 80054a6:	3718      	adds	r7, #24
 80054a8:	46bd      	mov	sp, r7
 80054aa:	bd80      	pop	{r7, pc}
 80054ac:	20000440 	.word	0x20000440
 80054b0:	2000041c 	.word	0x2000041c
 80054b4:	200003d0 	.word	0x200003d0
 80054b8:	200003d4 	.word	0x200003d4
 80054bc:	20000430 	.word	0x20000430
 80054c0:	20000438 	.word	0x20000438
 80054c4:	20000420 	.word	0x20000420
 80054c8:	2000031c 	.word	0x2000031c
 80054cc:	20000318 	.word	0x20000318
 80054d0:	20000428 	.word	0x20000428
 80054d4:	2000042c 	.word	0x2000042c

080054d8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80054d8:	b480      	push	{r7}
 80054da:	b087      	sub	sp, #28
 80054dc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80054de:	4b26      	ldr	r3, [pc, #152]	; (8005578 <vTaskSwitchContext+0xa0>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d003      	beq.n	80054ee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80054e6:	4b25      	ldr	r3, [pc, #148]	; (800557c <vTaskSwitchContext+0xa4>)
 80054e8:	2201      	movs	r2, #1
 80054ea:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80054ec:	e03e      	b.n	800556c <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80054ee:	4b23      	ldr	r3, [pc, #140]	; (800557c <vTaskSwitchContext+0xa4>)
 80054f0:	2200      	movs	r2, #0
 80054f2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80054f4:	4b22      	ldr	r3, [pc, #136]	; (8005580 <vTaskSwitchContext+0xa8>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	fab3 f383 	clz	r3, r3
 8005500:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8005502:	7afb      	ldrb	r3, [r7, #11]
 8005504:	f1c3 031f 	rsb	r3, r3, #31
 8005508:	617b      	str	r3, [r7, #20]
 800550a:	491e      	ldr	r1, [pc, #120]	; (8005584 <vTaskSwitchContext+0xac>)
 800550c:	697a      	ldr	r2, [r7, #20]
 800550e:	4613      	mov	r3, r2
 8005510:	009b      	lsls	r3, r3, #2
 8005512:	4413      	add	r3, r2
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	440b      	add	r3, r1
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d109      	bne.n	8005532 <vTaskSwitchContext+0x5a>
	__asm volatile
 800551e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005522:	f383 8811 	msr	BASEPRI, r3
 8005526:	f3bf 8f6f 	isb	sy
 800552a:	f3bf 8f4f 	dsb	sy
 800552e:	607b      	str	r3, [r7, #4]
 8005530:	e7fe      	b.n	8005530 <vTaskSwitchContext+0x58>
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4613      	mov	r3, r2
 8005536:	009b      	lsls	r3, r3, #2
 8005538:	4413      	add	r3, r2
 800553a:	009b      	lsls	r3, r3, #2
 800553c:	4a11      	ldr	r2, [pc, #68]	; (8005584 <vTaskSwitchContext+0xac>)
 800553e:	4413      	add	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	685a      	ldr	r2, [r3, #4]
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	605a      	str	r2, [r3, #4]
 800554c:	693b      	ldr	r3, [r7, #16]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	3308      	adds	r3, #8
 8005554:	429a      	cmp	r2, r3
 8005556:	d104      	bne.n	8005562 <vTaskSwitchContext+0x8a>
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	693b      	ldr	r3, [r7, #16]
 8005560:	605a      	str	r2, [r3, #4]
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	68db      	ldr	r3, [r3, #12]
 8005568:	4a07      	ldr	r2, [pc, #28]	; (8005588 <vTaskSwitchContext+0xb0>)
 800556a:	6013      	str	r3, [r2, #0]
}
 800556c:	bf00      	nop
 800556e:	371c      	adds	r7, #28
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr
 8005578:	20000440 	.word	0x20000440
 800557c:	2000042c 	.word	0x2000042c
 8005580:	20000420 	.word	0x20000420
 8005584:	2000031c 	.word	0x2000031c
 8005588:	20000318 	.word	0x20000318

0800558c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
 8005594:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <vTaskPlaceOnEventList+0x24>
 800559c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a0:	f383 8811 	msr	BASEPRI, r3
 80055a4:	f3bf 8f6f 	isb	sy
 80055a8:	f3bf 8f4f 	dsb	sy
 80055ac:	60fb      	str	r3, [r7, #12]
 80055ae:	e7fe      	b.n	80055ae <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80055b0:	4b07      	ldr	r3, [pc, #28]	; (80055d0 <vTaskPlaceOnEventList+0x44>)
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	3318      	adds	r3, #24
 80055b6:	4619      	mov	r1, r3
 80055b8:	6878      	ldr	r0, [r7, #4]
 80055ba:	f7fe fe7e 	bl	80042ba <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80055be:	2101      	movs	r1, #1
 80055c0:	6838      	ldr	r0, [r7, #0]
 80055c2:	f000 fa65 	bl	8005a90 <prvAddCurrentTaskToDelayedList>
}
 80055c6:	bf00      	nop
 80055c8:	3710      	adds	r7, #16
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20000318 	.word	0x20000318

080055d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b086      	sub	sp, #24
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d109      	bne.n	80055fe <xTaskRemoveFromEventList+0x2a>
 80055ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ee:	f383 8811 	msr	BASEPRI, r3
 80055f2:	f3bf 8f6f 	isb	sy
 80055f6:	f3bf 8f4f 	dsb	sy
 80055fa:	60fb      	str	r3, [r7, #12]
 80055fc:	e7fe      	b.n	80055fc <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	3318      	adds	r3, #24
 8005602:	4618      	mov	r0, r3
 8005604:	f7fe fe92 	bl	800432c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005608:	4b1d      	ldr	r3, [pc, #116]	; (8005680 <xTaskRemoveFromEventList+0xac>)
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d11c      	bne.n	800564a <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	3304      	adds	r3, #4
 8005614:	4618      	mov	r0, r3
 8005616:	f7fe fe89 	bl	800432c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800561a:	693b      	ldr	r3, [r7, #16]
 800561c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800561e:	2201      	movs	r2, #1
 8005620:	409a      	lsls	r2, r3
 8005622:	4b18      	ldr	r3, [pc, #96]	; (8005684 <xTaskRemoveFromEventList+0xb0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4313      	orrs	r3, r2
 8005628:	4a16      	ldr	r2, [pc, #88]	; (8005684 <xTaskRemoveFromEventList+0xb0>)
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	693b      	ldr	r3, [r7, #16]
 800562e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005630:	4613      	mov	r3, r2
 8005632:	009b      	lsls	r3, r3, #2
 8005634:	4413      	add	r3, r2
 8005636:	009b      	lsls	r3, r3, #2
 8005638:	4a13      	ldr	r2, [pc, #76]	; (8005688 <xTaskRemoveFromEventList+0xb4>)
 800563a:	441a      	add	r2, r3
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	3304      	adds	r3, #4
 8005640:	4619      	mov	r1, r3
 8005642:	4610      	mov	r0, r2
 8005644:	f7fe fe15 	bl	8004272 <vListInsertEnd>
 8005648:	e005      	b.n	8005656 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	3318      	adds	r3, #24
 800564e:	4619      	mov	r1, r3
 8005650:	480e      	ldr	r0, [pc, #56]	; (800568c <xTaskRemoveFromEventList+0xb8>)
 8005652:	f7fe fe0e 	bl	8004272 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800565a:	4b0d      	ldr	r3, [pc, #52]	; (8005690 <xTaskRemoveFromEventList+0xbc>)
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005660:	429a      	cmp	r2, r3
 8005662:	d905      	bls.n	8005670 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005664:	2301      	movs	r3, #1
 8005666:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005668:	4b0a      	ldr	r3, [pc, #40]	; (8005694 <xTaskRemoveFromEventList+0xc0>)
 800566a:	2201      	movs	r2, #1
 800566c:	601a      	str	r2, [r3, #0]
 800566e:	e001      	b.n	8005674 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8005670:	2300      	movs	r3, #0
 8005672:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8005674:	697b      	ldr	r3, [r7, #20]
}
 8005676:	4618      	mov	r0, r3
 8005678:	3718      	adds	r7, #24
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}
 800567e:	bf00      	nop
 8005680:	20000440 	.word	0x20000440
 8005684:	20000420 	.word	0x20000420
 8005688:	2000031c 	.word	0x2000031c
 800568c:	200003d8 	.word	0x200003d8
 8005690:	20000318 	.word	0x20000318
 8005694:	2000042c 	.word	0x2000042c

08005698 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005698:	b480      	push	{r7}
 800569a:	b083      	sub	sp, #12
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80056a0:	4b06      	ldr	r3, [pc, #24]	; (80056bc <vTaskInternalSetTimeOutState+0x24>)
 80056a2:	681a      	ldr	r2, [r3, #0]
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <vTaskInternalSetTimeOutState+0x28>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	605a      	str	r2, [r3, #4]
}
 80056b0:	bf00      	nop
 80056b2:	370c      	adds	r7, #12
 80056b4:	46bd      	mov	sp, r7
 80056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ba:	4770      	bx	lr
 80056bc:	20000430 	.word	0x20000430
 80056c0:	2000041c 	.word	0x2000041c

080056c4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80056c4:	b580      	push	{r7, lr}
 80056c6:	b088      	sub	sp, #32
 80056c8:	af00      	add	r7, sp, #0
 80056ca:	6078      	str	r0, [r7, #4]
 80056cc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d109      	bne.n	80056e8 <xTaskCheckForTimeOut+0x24>
 80056d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d8:	f383 8811 	msr	BASEPRI, r3
 80056dc:	f3bf 8f6f 	isb	sy
 80056e0:	f3bf 8f4f 	dsb	sy
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	e7fe      	b.n	80056e6 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80056e8:	683b      	ldr	r3, [r7, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d109      	bne.n	8005702 <xTaskCheckForTimeOut+0x3e>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60fb      	str	r3, [r7, #12]
 8005700:	e7fe      	b.n	8005700 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8005702:	f000 fb53 	bl	8005dac <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005706:	4b1d      	ldr	r3, [pc, #116]	; (800577c <xTaskCheckForTimeOut+0xb8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	1ad3      	subs	r3, r2, r3
 8005714:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800571e:	d102      	bne.n	8005726 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005720:	2300      	movs	r3, #0
 8005722:	61fb      	str	r3, [r7, #28]
 8005724:	e023      	b.n	800576e <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b15      	ldr	r3, [pc, #84]	; (8005780 <xTaskCheckForTimeOut+0xbc>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	429a      	cmp	r2, r3
 8005730:	d007      	beq.n	8005742 <xTaskCheckForTimeOut+0x7e>
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	69ba      	ldr	r2, [r7, #24]
 8005738:	429a      	cmp	r2, r3
 800573a:	d302      	bcc.n	8005742 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800573c:	2301      	movs	r3, #1
 800573e:	61fb      	str	r3, [r7, #28]
 8005740:	e015      	b.n	800576e <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	697a      	ldr	r2, [r7, #20]
 8005748:	429a      	cmp	r2, r3
 800574a:	d20b      	bcs.n	8005764 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	1ad2      	subs	r2, r2, r3
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005758:	6878      	ldr	r0, [r7, #4]
 800575a:	f7ff ff9d 	bl	8005698 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800575e:	2300      	movs	r3, #0
 8005760:	61fb      	str	r3, [r7, #28]
 8005762:	e004      	b.n	800576e <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	2200      	movs	r2, #0
 8005768:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800576a:	2301      	movs	r3, #1
 800576c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800576e:	f000 fb4b 	bl	8005e08 <vPortExitCritical>

	return xReturn;
 8005772:	69fb      	ldr	r3, [r7, #28]
}
 8005774:	4618      	mov	r0, r3
 8005776:	3720      	adds	r7, #32
 8005778:	46bd      	mov	sp, r7
 800577a:	bd80      	pop	{r7, pc}
 800577c:	2000041c 	.word	0x2000041c
 8005780:	20000430 	.word	0x20000430

08005784 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005784:	b480      	push	{r7}
 8005786:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005788:	4b03      	ldr	r3, [pc, #12]	; (8005798 <vTaskMissedYield+0x14>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]
}
 800578e:	bf00      	nop
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr
 8005798:	2000042c 	.word	0x2000042c

0800579c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b082      	sub	sp, #8
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80057a4:	f000 f852 	bl	800584c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80057a8:	4b06      	ldr	r3, [pc, #24]	; (80057c4 <prvIdleTask+0x28>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	d9f9      	bls.n	80057a4 <prvIdleTask+0x8>
			{
				taskYIELD();
 80057b0:	4b05      	ldr	r3, [pc, #20]	; (80057c8 <prvIdleTask+0x2c>)
 80057b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80057b6:	601a      	str	r2, [r3, #0]
 80057b8:	f3bf 8f4f 	dsb	sy
 80057bc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80057c0:	e7f0      	b.n	80057a4 <prvIdleTask+0x8>
 80057c2:	bf00      	nop
 80057c4:	2000031c 	.word	0x2000031c
 80057c8:	e000ed04 	.word	0xe000ed04

080057cc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b082      	sub	sp, #8
 80057d0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
 80057d6:	e00c      	b.n	80057f2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	4613      	mov	r3, r2
 80057dc:	009b      	lsls	r3, r3, #2
 80057de:	4413      	add	r3, r2
 80057e0:	009b      	lsls	r3, r3, #2
 80057e2:	4a12      	ldr	r2, [pc, #72]	; (800582c <prvInitialiseTaskLists+0x60>)
 80057e4:	4413      	add	r3, r2
 80057e6:	4618      	mov	r0, r3
 80057e8:	f7fe fd16 	bl	8004218 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	3301      	adds	r3, #1
 80057f0:	607b      	str	r3, [r7, #4]
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b06      	cmp	r3, #6
 80057f6:	d9ef      	bls.n	80057d8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057f8:	480d      	ldr	r0, [pc, #52]	; (8005830 <prvInitialiseTaskLists+0x64>)
 80057fa:	f7fe fd0d 	bl	8004218 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057fe:	480d      	ldr	r0, [pc, #52]	; (8005834 <prvInitialiseTaskLists+0x68>)
 8005800:	f7fe fd0a 	bl	8004218 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005804:	480c      	ldr	r0, [pc, #48]	; (8005838 <prvInitialiseTaskLists+0x6c>)
 8005806:	f7fe fd07 	bl	8004218 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800580a:	480c      	ldr	r0, [pc, #48]	; (800583c <prvInitialiseTaskLists+0x70>)
 800580c:	f7fe fd04 	bl	8004218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005810:	480b      	ldr	r0, [pc, #44]	; (8005840 <prvInitialiseTaskLists+0x74>)
 8005812:	f7fe fd01 	bl	8004218 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005816:	4b0b      	ldr	r3, [pc, #44]	; (8005844 <prvInitialiseTaskLists+0x78>)
 8005818:	4a05      	ldr	r2, [pc, #20]	; (8005830 <prvInitialiseTaskLists+0x64>)
 800581a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800581c:	4b0a      	ldr	r3, [pc, #40]	; (8005848 <prvInitialiseTaskLists+0x7c>)
 800581e:	4a05      	ldr	r2, [pc, #20]	; (8005834 <prvInitialiseTaskLists+0x68>)
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3708      	adds	r7, #8
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}
 800582a:	bf00      	nop
 800582c:	2000031c 	.word	0x2000031c
 8005830:	200003a8 	.word	0x200003a8
 8005834:	200003bc 	.word	0x200003bc
 8005838:	200003d8 	.word	0x200003d8
 800583c:	200003ec 	.word	0x200003ec
 8005840:	20000404 	.word	0x20000404
 8005844:	200003d0 	.word	0x200003d0
 8005848:	200003d4 	.word	0x200003d4

0800584c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800584c:	b580      	push	{r7, lr}
 800584e:	b082      	sub	sp, #8
 8005850:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005852:	e019      	b.n	8005888 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005854:	f000 faaa 	bl	8005dac <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005858:	4b0f      	ldr	r3, [pc, #60]	; (8005898 <prvCheckTasksWaitingTermination+0x4c>)
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	68db      	ldr	r3, [r3, #12]
 800585e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	3304      	adds	r3, #4
 8005864:	4618      	mov	r0, r3
 8005866:	f7fe fd61 	bl	800432c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800586a:	4b0c      	ldr	r3, [pc, #48]	; (800589c <prvCheckTasksWaitingTermination+0x50>)
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	3b01      	subs	r3, #1
 8005870:	4a0a      	ldr	r2, [pc, #40]	; (800589c <prvCheckTasksWaitingTermination+0x50>)
 8005872:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005874:	4b0a      	ldr	r3, [pc, #40]	; (80058a0 <prvCheckTasksWaitingTermination+0x54>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	3b01      	subs	r3, #1
 800587a:	4a09      	ldr	r2, [pc, #36]	; (80058a0 <prvCheckTasksWaitingTermination+0x54>)
 800587c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800587e:	f000 fac3 	bl	8005e08 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f80e 	bl	80058a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005888:	4b05      	ldr	r3, [pc, #20]	; (80058a0 <prvCheckTasksWaitingTermination+0x54>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d1e1      	bne.n	8005854 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005890:	bf00      	nop
 8005892:	3708      	adds	r7, #8
 8005894:	46bd      	mov	sp, r7
 8005896:	bd80      	pop	{r7, pc}
 8005898:	200003ec 	.word	0x200003ec
 800589c:	20000418 	.word	0x20000418
 80058a0:	20000400 	.word	0x20000400

080058a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b084      	sub	sp, #16
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d108      	bne.n	80058c8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058ba:	4618      	mov	r0, r3
 80058bc:	f000 fc52 	bl	8006164 <vPortFree>
				vPortFree( pxTCB );
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fc4f 	bl	8006164 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80058c6:	e017      	b.n	80058f8 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d103      	bne.n	80058da <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 fc46 	bl	8006164 <vPortFree>
	}
 80058d8:	e00e      	b.n	80058f8 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058e0:	2b02      	cmp	r3, #2
 80058e2:	d009      	beq.n	80058f8 <prvDeleteTCB+0x54>
 80058e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e8:	f383 8811 	msr	BASEPRI, r3
 80058ec:	f3bf 8f6f 	isb	sy
 80058f0:	f3bf 8f4f 	dsb	sy
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	e7fe      	b.n	80058f6 <prvDeleteTCB+0x52>
	}
 80058f8:	bf00      	nop
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005906:	4b0f      	ldr	r3, [pc, #60]	; (8005944 <prvResetNextTaskUnblockTime+0x44>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d101      	bne.n	8005914 <prvResetNextTaskUnblockTime+0x14>
 8005910:	2301      	movs	r3, #1
 8005912:	e000      	b.n	8005916 <prvResetNextTaskUnblockTime+0x16>
 8005914:	2300      	movs	r3, #0
 8005916:	2b00      	cmp	r3, #0
 8005918:	d004      	beq.n	8005924 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800591a:	4b0b      	ldr	r3, [pc, #44]	; (8005948 <prvResetNextTaskUnblockTime+0x48>)
 800591c:	f04f 32ff 	mov.w	r2, #4294967295
 8005920:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005922:	e008      	b.n	8005936 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005924:	4b07      	ldr	r3, [pc, #28]	; (8005944 <prvResetNextTaskUnblockTime+0x44>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	68db      	ldr	r3, [r3, #12]
 800592a:	68db      	ldr	r3, [r3, #12]
 800592c:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4a05      	ldr	r2, [pc, #20]	; (8005948 <prvResetNextTaskUnblockTime+0x48>)
 8005934:	6013      	str	r3, [r2, #0]
}
 8005936:	bf00      	nop
 8005938:	370c      	adds	r7, #12
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	200003d0 	.word	0x200003d0
 8005948:	20000438 	.word	0x20000438

0800594c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <xTaskGetSchedulerState+0x34>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	2b00      	cmp	r3, #0
 8005958:	d102      	bne.n	8005960 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800595a:	2301      	movs	r3, #1
 800595c:	607b      	str	r3, [r7, #4]
 800595e:	e008      	b.n	8005972 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005960:	4b08      	ldr	r3, [pc, #32]	; (8005984 <xTaskGetSchedulerState+0x38>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d102      	bne.n	800596e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005968:	2302      	movs	r3, #2
 800596a:	607b      	str	r3, [r7, #4]
 800596c:	e001      	b.n	8005972 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800596e:	2300      	movs	r3, #0
 8005970:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005972:	687b      	ldr	r3, [r7, #4]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	370c      	adds	r7, #12
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	20000424 	.word	0x20000424
 8005984:	20000440 	.word	0x20000440

08005988 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005994:	2300      	movs	r3, #0
 8005996:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d06c      	beq.n	8005a78 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800599e:	4b39      	ldr	r3, [pc, #228]	; (8005a84 <xTaskPriorityDisinherit+0xfc>)
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	693a      	ldr	r2, [r7, #16]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d009      	beq.n	80059bc <xTaskPriorityDisinherit+0x34>
 80059a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	60fb      	str	r3, [r7, #12]
 80059ba:	e7fe      	b.n	80059ba <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d109      	bne.n	80059d8 <xTaskPriorityDisinherit+0x50>
 80059c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c8:	f383 8811 	msr	BASEPRI, r3
 80059cc:	f3bf 8f6f 	isb	sy
 80059d0:	f3bf 8f4f 	dsb	sy
 80059d4:	60bb      	str	r3, [r7, #8]
 80059d6:	e7fe      	b.n	80059d6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059dc:	1e5a      	subs	r2, r3, #1
 80059de:	693b      	ldr	r3, [r7, #16]
 80059e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d044      	beq.n	8005a78 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d140      	bne.n	8005a78 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80059f6:	693b      	ldr	r3, [r7, #16]
 80059f8:	3304      	adds	r3, #4
 80059fa:	4618      	mov	r0, r3
 80059fc:	f7fe fc96 	bl	800432c <uxListRemove>
 8005a00:	4603      	mov	r3, r0
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d115      	bne.n	8005a32 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8005a06:	693b      	ldr	r3, [r7, #16]
 8005a08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a0a:	491f      	ldr	r1, [pc, #124]	; (8005a88 <xTaskPriorityDisinherit+0x100>)
 8005a0c:	4613      	mov	r3, r2
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	4413      	add	r3, r2
 8005a12:	009b      	lsls	r3, r3, #2
 8005a14:	440b      	add	r3, r1
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d10a      	bne.n	8005a32 <xTaskPriorityDisinherit+0xaa>
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	2201      	movs	r2, #1
 8005a22:	fa02 f303 	lsl.w	r3, r2, r3
 8005a26:	43da      	mvns	r2, r3
 8005a28:	4b18      	ldr	r3, [pc, #96]	; (8005a8c <xTaskPriorityDisinherit+0x104>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	4013      	ands	r3, r2
 8005a2e:	4a17      	ldr	r2, [pc, #92]	; (8005a8c <xTaskPriorityDisinherit+0x104>)
 8005a30:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a32:	693b      	ldr	r3, [r7, #16]
 8005a34:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a3e:	f1c3 0207 	rsb	r2, r3, #7
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	409a      	lsls	r2, r3
 8005a4e:	4b0f      	ldr	r3, [pc, #60]	; (8005a8c <xTaskPriorityDisinherit+0x104>)
 8005a50:	681b      	ldr	r3, [r3, #0]
 8005a52:	4313      	orrs	r3, r2
 8005a54:	4a0d      	ldr	r2, [pc, #52]	; (8005a8c <xTaskPriorityDisinherit+0x104>)
 8005a56:	6013      	str	r3, [r2, #0]
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a5c:	4613      	mov	r3, r2
 8005a5e:	009b      	lsls	r3, r3, #2
 8005a60:	4413      	add	r3, r2
 8005a62:	009b      	lsls	r3, r3, #2
 8005a64:	4a08      	ldr	r2, [pc, #32]	; (8005a88 <xTaskPriorityDisinherit+0x100>)
 8005a66:	441a      	add	r2, r3
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	3304      	adds	r3, #4
 8005a6c:	4619      	mov	r1, r3
 8005a6e:	4610      	mov	r0, r2
 8005a70:	f7fe fbff 	bl	8004272 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005a74:	2301      	movs	r3, #1
 8005a76:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005a78:	697b      	ldr	r3, [r7, #20]
	}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3718      	adds	r7, #24
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000318 	.word	0x20000318
 8005a88:	2000031c 	.word	0x2000031c
 8005a8c:	20000420 	.word	0x20000420

08005a90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005a90:	b580      	push	{r7, lr}
 8005a92:	b084      	sub	sp, #16
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005a9a:	4b29      	ldr	r3, [pc, #164]	; (8005b40 <prvAddCurrentTaskToDelayedList+0xb0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005aa0:	4b28      	ldr	r3, [pc, #160]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	3304      	adds	r3, #4
 8005aa6:	4618      	mov	r0, r3
 8005aa8:	f7fe fc40 	bl	800432c <uxListRemove>
 8005aac:	4603      	mov	r3, r0
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d10b      	bne.n	8005aca <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8005ab2:	4b24      	ldr	r3, [pc, #144]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ab8:	2201      	movs	r2, #1
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43da      	mvns	r2, r3
 8005ac0:	4b21      	ldr	r3, [pc, #132]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4013      	ands	r3, r2
 8005ac6:	4a20      	ldr	r2, [pc, #128]	; (8005b48 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005ac8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ad0:	d10a      	bne.n	8005ae8 <prvAddCurrentTaskToDelayedList+0x58>
 8005ad2:	683b      	ldr	r3, [r7, #0]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d007      	beq.n	8005ae8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ad8:	4b1a      	ldr	r3, [pc, #104]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	3304      	adds	r3, #4
 8005ade:	4619      	mov	r1, r3
 8005ae0:	481a      	ldr	r0, [pc, #104]	; (8005b4c <prvAddCurrentTaskToDelayedList+0xbc>)
 8005ae2:	f7fe fbc6 	bl	8004272 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ae6:	e026      	b.n	8005b36 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4413      	add	r3, r2
 8005aee:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005af0:	4b14      	ldr	r3, [pc, #80]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	68ba      	ldr	r2, [r7, #8]
 8005af6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005af8:	68ba      	ldr	r2, [r7, #8]
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	429a      	cmp	r2, r3
 8005afe:	d209      	bcs.n	8005b14 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b00:	4b13      	ldr	r3, [pc, #76]	; (8005b50 <prvAddCurrentTaskToDelayedList+0xc0>)
 8005b02:	681a      	ldr	r2, [r3, #0]
 8005b04:	4b0f      	ldr	r3, [pc, #60]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	3304      	adds	r3, #4
 8005b0a:	4619      	mov	r1, r3
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	f7fe fbd4 	bl	80042ba <vListInsert>
}
 8005b12:	e010      	b.n	8005b36 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005b14:	4b0f      	ldr	r3, [pc, #60]	; (8005b54 <prvAddCurrentTaskToDelayedList+0xc4>)
 8005b16:	681a      	ldr	r2, [r3, #0]
 8005b18:	4b0a      	ldr	r3, [pc, #40]	; (8005b44 <prvAddCurrentTaskToDelayedList+0xb4>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	3304      	adds	r3, #4
 8005b1e:	4619      	mov	r1, r3
 8005b20:	4610      	mov	r0, r2
 8005b22:	f7fe fbca 	bl	80042ba <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005b26:	4b0c      	ldr	r3, [pc, #48]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d202      	bcs.n	8005b36 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005b30:	4a09      	ldr	r2, [pc, #36]	; (8005b58 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005b32:	68bb      	ldr	r3, [r7, #8]
 8005b34:	6013      	str	r3, [r2, #0]
}
 8005b36:	bf00      	nop
 8005b38:	3710      	adds	r7, #16
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
 8005b3e:	bf00      	nop
 8005b40:	2000041c 	.word	0x2000041c
 8005b44:	20000318 	.word	0x20000318
 8005b48:	20000420 	.word	0x20000420
 8005b4c:	20000404 	.word	0x20000404
 8005b50:	200003d4 	.word	0x200003d4
 8005b54:	200003d0 	.word	0x200003d0
 8005b58:	20000438 	.word	0x20000438

08005b5c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b085      	sub	sp, #20
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	60f8      	str	r0, [r7, #12]
 8005b64:	60b9      	str	r1, [r7, #8]
 8005b66:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	3b04      	subs	r3, #4
 8005b6c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005b74:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3b04      	subs	r3, #4
 8005b7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005b7c:	68bb      	ldr	r3, [r7, #8]
 8005b7e:	f023 0201 	bic.w	r2, r3, #1
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	3b04      	subs	r3, #4
 8005b8a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005b8c:	4a0c      	ldr	r2, [pc, #48]	; (8005bc0 <pxPortInitialiseStack+0x64>)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	3b14      	subs	r3, #20
 8005b96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005b98:	687a      	ldr	r2, [r7, #4]
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	3b04      	subs	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f06f 0202 	mvn.w	r2, #2
 8005baa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	3b20      	subs	r3, #32
 8005bb0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005bb2:	68fb      	ldr	r3, [r7, #12]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr
 8005bc0:	08005bc5 	.word	0x08005bc5

08005bc4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	b085      	sub	sp, #20
 8005bc8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005bce:	4b11      	ldr	r3, [pc, #68]	; (8005c14 <prvTaskExitError+0x50>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d009      	beq.n	8005bec <prvTaskExitError+0x28>
 8005bd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	60fb      	str	r3, [r7, #12]
 8005bea:	e7fe      	b.n	8005bea <prvTaskExitError+0x26>
 8005bec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf0:	f383 8811 	msr	BASEPRI, r3
 8005bf4:	f3bf 8f6f 	isb	sy
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005bfe:	bf00      	nop
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d0fc      	beq.n	8005c00 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c06:	bf00      	nop
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	2000003c 	.word	0x2000003c
	...

08005c20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c20:	4b07      	ldr	r3, [pc, #28]	; (8005c40 <pxCurrentTCBConst2>)
 8005c22:	6819      	ldr	r1, [r3, #0]
 8005c24:	6808      	ldr	r0, [r1, #0]
 8005c26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c2a:	f380 8809 	msr	PSP, r0
 8005c2e:	f3bf 8f6f 	isb	sy
 8005c32:	f04f 0000 	mov.w	r0, #0
 8005c36:	f380 8811 	msr	BASEPRI, r0
 8005c3a:	4770      	bx	lr
 8005c3c:	f3af 8000 	nop.w

08005c40 <pxCurrentTCBConst2>:
 8005c40:	20000318 	.word	0x20000318
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005c44:	bf00      	nop
 8005c46:	bf00      	nop

08005c48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005c48:	4808      	ldr	r0, [pc, #32]	; (8005c6c <prvPortStartFirstTask+0x24>)
 8005c4a:	6800      	ldr	r0, [r0, #0]
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	f380 8808 	msr	MSP, r0
 8005c52:	f04f 0000 	mov.w	r0, #0
 8005c56:	f380 8814 	msr	CONTROL, r0
 8005c5a:	b662      	cpsie	i
 8005c5c:	b661      	cpsie	f
 8005c5e:	f3bf 8f4f 	dsb	sy
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	df00      	svc	0
 8005c68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005c6a:	bf00      	nop
 8005c6c:	e000ed08 	.word	0xe000ed08

08005c70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b086      	sub	sp, #24
 8005c74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005c76:	4b44      	ldr	r3, [pc, #272]	; (8005d88 <xPortStartScheduler+0x118>)
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a44      	ldr	r2, [pc, #272]	; (8005d8c <xPortStartScheduler+0x11c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d109      	bne.n	8005c94 <xPortStartScheduler+0x24>
 8005c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c84:	f383 8811 	msr	BASEPRI, r3
 8005c88:	f3bf 8f6f 	isb	sy
 8005c8c:	f3bf 8f4f 	dsb	sy
 8005c90:	613b      	str	r3, [r7, #16]
 8005c92:	e7fe      	b.n	8005c92 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005c94:	4b3c      	ldr	r3, [pc, #240]	; (8005d88 <xPortStartScheduler+0x118>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a3d      	ldr	r2, [pc, #244]	; (8005d90 <xPortStartScheduler+0x120>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d109      	bne.n	8005cb2 <xPortStartScheduler+0x42>
 8005c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ca2:	f383 8811 	msr	BASEPRI, r3
 8005ca6:	f3bf 8f6f 	isb	sy
 8005caa:	f3bf 8f4f 	dsb	sy
 8005cae:	60fb      	str	r3, [r7, #12]
 8005cb0:	e7fe      	b.n	8005cb0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005cb2:	4b38      	ldr	r3, [pc, #224]	; (8005d94 <xPortStartScheduler+0x124>)
 8005cb4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	781b      	ldrb	r3, [r3, #0]
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005cbe:	697b      	ldr	r3, [r7, #20]
 8005cc0:	22ff      	movs	r2, #255	; 0xff
 8005cc2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	781b      	ldrb	r3, [r3, #0]
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005ccc:	78fb      	ldrb	r3, [r7, #3]
 8005cce:	b2db      	uxtb	r3, r3
 8005cd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b30      	ldr	r3, [pc, #192]	; (8005d98 <xPortStartScheduler+0x128>)
 8005cd8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005cda:	4b30      	ldr	r3, [pc, #192]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005cdc:	2207      	movs	r2, #7
 8005cde:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ce0:	e009      	b.n	8005cf6 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005ce2:	4b2e      	ldr	r3, [pc, #184]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	3b01      	subs	r3, #1
 8005ce8:	4a2c      	ldr	r2, [pc, #176]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005cea:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005cec:	78fb      	ldrb	r3, [r7, #3]
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	b2db      	uxtb	r3, r3
 8005cf4:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005cf6:	78fb      	ldrb	r3, [r7, #3]
 8005cf8:	b2db      	uxtb	r3, r3
 8005cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cfe:	2b80      	cmp	r3, #128	; 0x80
 8005d00:	d0ef      	beq.n	8005ce2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d02:	4b26      	ldr	r3, [pc, #152]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f1c3 0307 	rsb	r3, r3, #7
 8005d0a:	2b04      	cmp	r3, #4
 8005d0c:	d009      	beq.n	8005d22 <xPortStartScheduler+0xb2>
 8005d0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d12:	f383 8811 	msr	BASEPRI, r3
 8005d16:	f3bf 8f6f 	isb	sy
 8005d1a:	f3bf 8f4f 	dsb	sy
 8005d1e:	60bb      	str	r3, [r7, #8]
 8005d20:	e7fe      	b.n	8005d20 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d22:	4b1e      	ldr	r3, [pc, #120]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	021b      	lsls	r3, r3, #8
 8005d28:	4a1c      	ldr	r2, [pc, #112]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d2a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005d2c:	4b1b      	ldr	r3, [pc, #108]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005d34:	4a19      	ldr	r2, [pc, #100]	; (8005d9c <xPortStartScheduler+0x12c>)
 8005d36:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	697b      	ldr	r3, [r7, #20]
 8005d3e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005d40:	4b17      	ldr	r3, [pc, #92]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	4a16      	ldr	r2, [pc, #88]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d46:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005d4a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005d4c:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <xPortStartScheduler+0x130>)
 8005d52:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005d56:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005d58:	f000 f8d6 	bl	8005f08 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005d5c:	4b11      	ldr	r3, [pc, #68]	; (8005da4 <xPortStartScheduler+0x134>)
 8005d5e:	2200      	movs	r2, #0
 8005d60:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005d62:	f000 f8f5 	bl	8005f50 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005d66:	4b10      	ldr	r3, [pc, #64]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a0f      	ldr	r2, [pc, #60]	; (8005da8 <xPortStartScheduler+0x138>)
 8005d6c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005d70:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005d72:	f7ff ff69 	bl	8005c48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005d76:	f7ff fbaf 	bl	80054d8 <vTaskSwitchContext>
	prvTaskExitError();
 8005d7a:	f7ff ff23 	bl	8005bc4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3718      	adds	r7, #24
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}
 8005d88:	e000ed00 	.word	0xe000ed00
 8005d8c:	410fc271 	.word	0x410fc271
 8005d90:	410fc270 	.word	0x410fc270
 8005d94:	e000e400 	.word	0xe000e400
 8005d98:	20000444 	.word	0x20000444
 8005d9c:	20000448 	.word	0x20000448
 8005da0:	e000ed20 	.word	0xe000ed20
 8005da4:	2000003c 	.word	0x2000003c
 8005da8:	e000ef34 	.word	0xe000ef34

08005dac <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db6:	f383 8811 	msr	BASEPRI, r3
 8005dba:	f3bf 8f6f 	isb	sy
 8005dbe:	f3bf 8f4f 	dsb	sy
 8005dc2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005dc4:	4b0e      	ldr	r3, [pc, #56]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	3301      	adds	r3, #1
 8005dca:	4a0d      	ldr	r2, [pc, #52]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dcc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005dce:	4b0c      	ldr	r3, [pc, #48]	; (8005e00 <vPortEnterCritical+0x54>)
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	2b01      	cmp	r3, #1
 8005dd4:	d10e      	bne.n	8005df4 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005dd6:	4b0b      	ldr	r3, [pc, #44]	; (8005e04 <vPortEnterCritical+0x58>)
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	b2db      	uxtb	r3, r3
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d009      	beq.n	8005df4 <vPortEnterCritical+0x48>
 8005de0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	603b      	str	r3, [r7, #0]
 8005df2:	e7fe      	b.n	8005df2 <vPortEnterCritical+0x46>
	}
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr
 8005e00:	2000003c 	.word	0x2000003c
 8005e04:	e000ed04 	.word	0xe000ed04

08005e08 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b083      	sub	sp, #12
 8005e0c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e0e:	4b11      	ldr	r3, [pc, #68]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <vPortExitCritical+0x22>
 8005e16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e1a:	f383 8811 	msr	BASEPRI, r3
 8005e1e:	f3bf 8f6f 	isb	sy
 8005e22:	f3bf 8f4f 	dsb	sy
 8005e26:	607b      	str	r3, [r7, #4]
 8005e28:	e7fe      	b.n	8005e28 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8005e2a:	4b0a      	ldr	r3, [pc, #40]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	4a08      	ldr	r2, [pc, #32]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e32:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005e34:	4b07      	ldr	r3, [pc, #28]	; (8005e54 <vPortExitCritical+0x4c>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d104      	bne.n	8005e46 <vPortExitCritical+0x3e>
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005e40:	683b      	ldr	r3, [r7, #0]
 8005e42:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005e46:	bf00      	nop
 8005e48:	370c      	adds	r7, #12
 8005e4a:	46bd      	mov	sp, r7
 8005e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e50:	4770      	bx	lr
 8005e52:	bf00      	nop
 8005e54:	2000003c 	.word	0x2000003c
	...

08005e60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005e60:	f3ef 8009 	mrs	r0, PSP
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	4b15      	ldr	r3, [pc, #84]	; (8005ec0 <pxCurrentTCBConst>)
 8005e6a:	681a      	ldr	r2, [r3, #0]
 8005e6c:	f01e 0f10 	tst.w	lr, #16
 8005e70:	bf08      	it	eq
 8005e72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005e76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e7a:	6010      	str	r0, [r2, #0]
 8005e7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005e80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005e84:	f380 8811 	msr	BASEPRI, r0
 8005e88:	f3bf 8f4f 	dsb	sy
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f7ff fb22 	bl	80054d8 <vTaskSwitchContext>
 8005e94:	f04f 0000 	mov.w	r0, #0
 8005e98:	f380 8811 	msr	BASEPRI, r0
 8005e9c:	bc09      	pop	{r0, r3}
 8005e9e:	6819      	ldr	r1, [r3, #0]
 8005ea0:	6808      	ldr	r0, [r1, #0]
 8005ea2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ea6:	f01e 0f10 	tst.w	lr, #16
 8005eaa:	bf08      	it	eq
 8005eac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005eb0:	f380 8809 	msr	PSP, r0
 8005eb4:	f3bf 8f6f 	isb	sy
 8005eb8:	4770      	bx	lr
 8005eba:	bf00      	nop
 8005ebc:	f3af 8000 	nop.w

08005ec0 <pxCurrentTCBConst>:
 8005ec0:	20000318 	.word	0x20000318
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005ec4:	bf00      	nop
 8005ec6:	bf00      	nop

08005ec8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b082      	sub	sp, #8
 8005ecc:	af00      	add	r7, sp, #0
	__asm volatile
 8005ece:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed2:	f383 8811 	msr	BASEPRI, r3
 8005ed6:	f3bf 8f6f 	isb	sy
 8005eda:	f3bf 8f4f 	dsb	sy
 8005ede:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005ee0:	f7ff fa3e 	bl	8005360 <xTaskIncrementTick>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d003      	beq.n	8005ef2 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005eea:	4b06      	ldr	r3, [pc, #24]	; (8005f04 <SysTick_Handler+0x3c>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ef6:	683b      	ldr	r3, [r7, #0]
 8005ef8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 8005efc:	bf00      	nop
 8005efe:	3708      	adds	r7, #8
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	e000ed04 	.word	0xe000ed04

08005f08 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f08:	b480      	push	{r7}
 8005f0a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f0c:	4b0b      	ldr	r3, [pc, #44]	; (8005f3c <vPortSetupTimerInterrupt+0x34>)
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f12:	4b0b      	ldr	r3, [pc, #44]	; (8005f40 <vPortSetupTimerInterrupt+0x38>)
 8005f14:	2200      	movs	r2, #0
 8005f16:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f18:	4b0a      	ldr	r3, [pc, #40]	; (8005f44 <vPortSetupTimerInterrupt+0x3c>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4a0a      	ldr	r2, [pc, #40]	; (8005f48 <vPortSetupTimerInterrupt+0x40>)
 8005f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8005f22:	099b      	lsrs	r3, r3, #6
 8005f24:	4a09      	ldr	r2, [pc, #36]	; (8005f4c <vPortSetupTimerInterrupt+0x44>)
 8005f26:	3b01      	subs	r3, #1
 8005f28:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005f2a:	4b04      	ldr	r3, [pc, #16]	; (8005f3c <vPortSetupTimerInterrupt+0x34>)
 8005f2c:	2207      	movs	r2, #7
 8005f2e:	601a      	str	r2, [r3, #0]
}
 8005f30:	bf00      	nop
 8005f32:	46bd      	mov	sp, r7
 8005f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	e000e010 	.word	0xe000e010
 8005f40:	e000e018 	.word	0xe000e018
 8005f44:	20000034 	.word	0x20000034
 8005f48:	10624dd3 	.word	0x10624dd3
 8005f4c:	e000e014 	.word	0xe000e014

08005f50 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005f50:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005f60 <vPortEnableVFP+0x10>
 8005f54:	6801      	ldr	r1, [r0, #0]
 8005f56:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005f5a:	6001      	str	r1, [r0, #0]
 8005f5c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005f5e:	bf00      	nop
 8005f60:	e000ed88 	.word	0xe000ed88

08005f64 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005f64:	b480      	push	{r7}
 8005f66:	b085      	sub	sp, #20
 8005f68:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005f6a:	f3ef 8305 	mrs	r3, IPSR
 8005f6e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	2b0f      	cmp	r3, #15
 8005f74:	d913      	bls.n	8005f9e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005f76:	4a16      	ldr	r2, [pc, #88]	; (8005fd0 <vPortValidateInterruptPriority+0x6c>)
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	4413      	add	r3, r2
 8005f7c:	781b      	ldrb	r3, [r3, #0]
 8005f7e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005f80:	4b14      	ldr	r3, [pc, #80]	; (8005fd4 <vPortValidateInterruptPriority+0x70>)
 8005f82:	781b      	ldrb	r3, [r3, #0]
 8005f84:	7afa      	ldrb	r2, [r7, #11]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d209      	bcs.n	8005f9e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8005f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f8e:	f383 8811 	msr	BASEPRI, r3
 8005f92:	f3bf 8f6f 	isb	sy
 8005f96:	f3bf 8f4f 	dsb	sy
 8005f9a:	607b      	str	r3, [r7, #4]
 8005f9c:	e7fe      	b.n	8005f9c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005f9e:	4b0e      	ldr	r3, [pc, #56]	; (8005fd8 <vPortValidateInterruptPriority+0x74>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005fa6:	4b0d      	ldr	r3, [pc, #52]	; (8005fdc <vPortValidateInterruptPriority+0x78>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d909      	bls.n	8005fc2 <vPortValidateInterruptPriority+0x5e>
 8005fae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fb2:	f383 8811 	msr	BASEPRI, r3
 8005fb6:	f3bf 8f6f 	isb	sy
 8005fba:	f3bf 8f4f 	dsb	sy
 8005fbe:	603b      	str	r3, [r7, #0]
 8005fc0:	e7fe      	b.n	8005fc0 <vPortValidateInterruptPriority+0x5c>
	}
 8005fc2:	bf00      	nop
 8005fc4:	3714      	adds	r7, #20
 8005fc6:	46bd      	mov	sp, r7
 8005fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fcc:	4770      	bx	lr
 8005fce:	bf00      	nop
 8005fd0:	e000e3f0 	.word	0xe000e3f0
 8005fd4:	20000444 	.word	0x20000444
 8005fd8:	e000ed0c 	.word	0xe000ed0c
 8005fdc:	20000448 	.word	0x20000448

08005fe0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005fec:	f7ff f90e 	bl	800520c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ff0:	4b57      	ldr	r3, [pc, #348]	; (8006150 <pvPortMalloc+0x170>)
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d101      	bne.n	8005ffc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ff8:	f000 f90c 	bl	8006214 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ffc:	4b55      	ldr	r3, [pc, #340]	; (8006154 <pvPortMalloc+0x174>)
 8005ffe:	681a      	ldr	r2, [r3, #0]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4013      	ands	r3, r2
 8006004:	2b00      	cmp	r3, #0
 8006006:	f040 808c 	bne.w	8006122 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d01c      	beq.n	800604a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8006010:	2208      	movs	r2, #8
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	4413      	add	r3, r2
 8006016:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f003 0307 	and.w	r3, r3, #7
 800601e:	2b00      	cmp	r3, #0
 8006020:	d013      	beq.n	800604a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f023 0307 	bic.w	r3, r3, #7
 8006028:	3308      	adds	r3, #8
 800602a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	f003 0307 	and.w	r3, r3, #7
 8006032:	2b00      	cmp	r3, #0
 8006034:	d009      	beq.n	800604a <pvPortMalloc+0x6a>
 8006036:	f04f 0350 	mov.w	r3, #80	; 0x50
 800603a:	f383 8811 	msr	BASEPRI, r3
 800603e:	f3bf 8f6f 	isb	sy
 8006042:	f3bf 8f4f 	dsb	sy
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	e7fe      	b.n	8006048 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d068      	beq.n	8006122 <pvPortMalloc+0x142>
 8006050:	4b41      	ldr	r3, [pc, #260]	; (8006158 <pvPortMalloc+0x178>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	687a      	ldr	r2, [r7, #4]
 8006056:	429a      	cmp	r2, r3
 8006058:	d863      	bhi.n	8006122 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800605a:	4b40      	ldr	r3, [pc, #256]	; (800615c <pvPortMalloc+0x17c>)
 800605c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800605e:	4b3f      	ldr	r3, [pc, #252]	; (800615c <pvPortMalloc+0x17c>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006064:	e004      	b.n	8006070 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8006066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800606a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	687a      	ldr	r2, [r7, #4]
 8006076:	429a      	cmp	r2, r3
 8006078:	d903      	bls.n	8006082 <pvPortMalloc+0xa2>
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d1f1      	bne.n	8006066 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006082:	4b33      	ldr	r3, [pc, #204]	; (8006150 <pvPortMalloc+0x170>)
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	429a      	cmp	r2, r3
 800608a:	d04a      	beq.n	8006122 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800608c:	6a3b      	ldr	r3, [r7, #32]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	2208      	movs	r2, #8
 8006092:	4413      	add	r3, r2
 8006094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006098:	681a      	ldr	r2, [r3, #0]
 800609a:	6a3b      	ldr	r3, [r7, #32]
 800609c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	685a      	ldr	r2, [r3, #4]
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	1ad2      	subs	r2, r2, r3
 80060a6:	2308      	movs	r3, #8
 80060a8:	005b      	lsls	r3, r3, #1
 80060aa:	429a      	cmp	r2, r3
 80060ac:	d91e      	bls.n	80060ec <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4413      	add	r3, r2
 80060b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b6:	69bb      	ldr	r3, [r7, #24]
 80060b8:	f003 0307 	and.w	r3, r3, #7
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d009      	beq.n	80060d4 <pvPortMalloc+0xf4>
 80060c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c4:	f383 8811 	msr	BASEPRI, r3
 80060c8:	f3bf 8f6f 	isb	sy
 80060cc:	f3bf 8f4f 	dsb	sy
 80060d0:	613b      	str	r3, [r7, #16]
 80060d2:	e7fe      	b.n	80060d2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	1ad2      	subs	r2, r2, r3
 80060dc:	69bb      	ldr	r3, [r7, #24]
 80060de:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060e2:	687a      	ldr	r2, [r7, #4]
 80060e4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060e6:	69b8      	ldr	r0, [r7, #24]
 80060e8:	f000 f8f6 	bl	80062d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060ec:	4b1a      	ldr	r3, [pc, #104]	; (8006158 <pvPortMalloc+0x178>)
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	1ad3      	subs	r3, r2, r3
 80060f6:	4a18      	ldr	r2, [pc, #96]	; (8006158 <pvPortMalloc+0x178>)
 80060f8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80060fa:	4b17      	ldr	r3, [pc, #92]	; (8006158 <pvPortMalloc+0x178>)
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	4b18      	ldr	r3, [pc, #96]	; (8006160 <pvPortMalloc+0x180>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	429a      	cmp	r2, r3
 8006104:	d203      	bcs.n	800610e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006106:	4b14      	ldr	r3, [pc, #80]	; (8006158 <pvPortMalloc+0x178>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a15      	ldr	r2, [pc, #84]	; (8006160 <pvPortMalloc+0x180>)
 800610c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800610e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006110:	685a      	ldr	r2, [r3, #4]
 8006112:	4b10      	ldr	r3, [pc, #64]	; (8006154 <pvPortMalloc+0x174>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	431a      	orrs	r2, r3
 8006118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800611c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800611e:	2200      	movs	r2, #0
 8006120:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006122:	f7ff f881 	bl	8005228 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006126:	69fb      	ldr	r3, [r7, #28]
 8006128:	f003 0307 	and.w	r3, r3, #7
 800612c:	2b00      	cmp	r3, #0
 800612e:	d009      	beq.n	8006144 <pvPortMalloc+0x164>
 8006130:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006134:	f383 8811 	msr	BASEPRI, r3
 8006138:	f3bf 8f6f 	isb	sy
 800613c:	f3bf 8f4f 	dsb	sy
 8006140:	60fb      	str	r3, [r7, #12]
 8006142:	e7fe      	b.n	8006142 <pvPortMalloc+0x162>
	return pvReturn;
 8006144:	69fb      	ldr	r3, [r7, #28]
}
 8006146:	4618      	mov	r0, r3
 8006148:	3728      	adds	r7, #40	; 0x28
 800614a:	46bd      	mov	sp, r7
 800614c:	bd80      	pop	{r7, pc}
 800614e:	bf00      	nop
 8006150:	20004054 	.word	0x20004054
 8006154:	20004060 	.word	0x20004060
 8006158:	20004058 	.word	0x20004058
 800615c:	2000404c 	.word	0x2000404c
 8006160:	2000405c 	.word	0x2000405c

08006164 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b086      	sub	sp, #24
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d046      	beq.n	8006204 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006176:	2308      	movs	r3, #8
 8006178:	425b      	negs	r3, r3
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	4b20      	ldr	r3, [pc, #128]	; (800620c <vPortFree+0xa8>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4013      	ands	r3, r2
 800618e:	2b00      	cmp	r3, #0
 8006190:	d109      	bne.n	80061a6 <vPortFree+0x42>
 8006192:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006196:	f383 8811 	msr	BASEPRI, r3
 800619a:	f3bf 8f6f 	isb	sy
 800619e:	f3bf 8f4f 	dsb	sy
 80061a2:	60fb      	str	r3, [r7, #12]
 80061a4:	e7fe      	b.n	80061a4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80061a6:	693b      	ldr	r3, [r7, #16]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d009      	beq.n	80061c2 <vPortFree+0x5e>
 80061ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	e7fe      	b.n	80061c0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80061c2:	693b      	ldr	r3, [r7, #16]
 80061c4:	685a      	ldr	r2, [r3, #4]
 80061c6:	4b11      	ldr	r3, [pc, #68]	; (800620c <vPortFree+0xa8>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	4013      	ands	r3, r2
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d019      	beq.n	8006204 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061d0:	693b      	ldr	r3, [r7, #16]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d115      	bne.n	8006204 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	685a      	ldr	r2, [r3, #4]
 80061dc:	4b0b      	ldr	r3, [pc, #44]	; (800620c <vPortFree+0xa8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	43db      	mvns	r3, r3
 80061e2:	401a      	ands	r2, r3
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061e8:	f7ff f810 	bl	800520c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	685a      	ldr	r2, [r3, #4]
 80061f0:	4b07      	ldr	r3, [pc, #28]	; (8006210 <vPortFree+0xac>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4413      	add	r3, r2
 80061f6:	4a06      	ldr	r2, [pc, #24]	; (8006210 <vPortFree+0xac>)
 80061f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061fa:	6938      	ldr	r0, [r7, #16]
 80061fc:	f000 f86c 	bl	80062d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8006200:	f7ff f812 	bl	8005228 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006204:	bf00      	nop
 8006206:	3718      	adds	r7, #24
 8006208:	46bd      	mov	sp, r7
 800620a:	bd80      	pop	{r7, pc}
 800620c:	20004060 	.word	0x20004060
 8006210:	20004058 	.word	0x20004058

08006214 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006214:	b480      	push	{r7}
 8006216:	b085      	sub	sp, #20
 8006218:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800621a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800621e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006220:	4b27      	ldr	r3, [pc, #156]	; (80062c0 <prvHeapInit+0xac>)
 8006222:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	2b00      	cmp	r3, #0
 800622c:	d00c      	beq.n	8006248 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	3307      	adds	r3, #7
 8006232:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	f023 0307 	bic.w	r3, r3, #7
 800623a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	4a1f      	ldr	r2, [pc, #124]	; (80062c0 <prvHeapInit+0xac>)
 8006244:	4413      	add	r3, r2
 8006246:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800624c:	4a1d      	ldr	r2, [pc, #116]	; (80062c4 <prvHeapInit+0xb0>)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006252:	4b1c      	ldr	r3, [pc, #112]	; (80062c4 <prvHeapInit+0xb0>)
 8006254:	2200      	movs	r2, #0
 8006256:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	68ba      	ldr	r2, [r7, #8]
 800625c:	4413      	add	r3, r2
 800625e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006260:	2208      	movs	r2, #8
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	1a9b      	subs	r3, r3, r2
 8006266:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0307 	bic.w	r3, r3, #7
 800626e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	4a15      	ldr	r2, [pc, #84]	; (80062c8 <prvHeapInit+0xb4>)
 8006274:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006276:	4b14      	ldr	r3, [pc, #80]	; (80062c8 <prvHeapInit+0xb4>)
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	2200      	movs	r2, #0
 800627c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800627e:	4b12      	ldr	r3, [pc, #72]	; (80062c8 <prvHeapInit+0xb4>)
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	1ad2      	subs	r2, r2, r3
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006294:	4b0c      	ldr	r3, [pc, #48]	; (80062c8 <prvHeapInit+0xb4>)
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	4a0a      	ldr	r2, [pc, #40]	; (80062cc <prvHeapInit+0xb8>)
 80062a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	4a09      	ldr	r2, [pc, #36]	; (80062d0 <prvHeapInit+0xbc>)
 80062aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80062ac:	4b09      	ldr	r3, [pc, #36]	; (80062d4 <prvHeapInit+0xc0>)
 80062ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80062b2:	601a      	str	r2, [r3, #0]
}
 80062b4:	bf00      	nop
 80062b6:	3714      	adds	r7, #20
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr
 80062c0:	2000044c 	.word	0x2000044c
 80062c4:	2000404c 	.word	0x2000404c
 80062c8:	20004054 	.word	0x20004054
 80062cc:	2000405c 	.word	0x2000405c
 80062d0:	20004058 	.word	0x20004058
 80062d4:	20004060 	.word	0x20004060

080062d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062d8:	b480      	push	{r7}
 80062da:	b085      	sub	sp, #20
 80062dc:	af00      	add	r7, sp, #0
 80062de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062e0:	4b28      	ldr	r3, [pc, #160]	; (8006384 <prvInsertBlockIntoFreeList+0xac>)
 80062e2:	60fb      	str	r3, [r7, #12]
 80062e4:	e002      	b.n	80062ec <prvInsertBlockIntoFreeList+0x14>
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	60fb      	str	r3, [r7, #12]
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d8f7      	bhi.n	80062e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	685b      	ldr	r3, [r3, #4]
 80062fe:	68ba      	ldr	r2, [r7, #8]
 8006300:	4413      	add	r3, r2
 8006302:	687a      	ldr	r2, [r7, #4]
 8006304:	429a      	cmp	r2, r3
 8006306:	d108      	bne.n	800631a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	685a      	ldr	r2, [r3, #4]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	441a      	add	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	441a      	add	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d118      	bne.n	8006360 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	4b15      	ldr	r3, [pc, #84]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	429a      	cmp	r2, r3
 8006338:	d00d      	beq.n	8006356 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	685a      	ldr	r2, [r3, #4]
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	685b      	ldr	r3, [r3, #4]
 8006344:	441a      	add	r2, r3
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
 8006354:	e008      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006356:	4b0c      	ldr	r3, [pc, #48]	; (8006388 <prvInsertBlockIntoFreeList+0xb0>)
 8006358:	681a      	ldr	r2, [r3, #0]
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	601a      	str	r2, [r3, #0]
 800635e:	e003      	b.n	8006368 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	681a      	ldr	r2, [r3, #0]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006368:	68fa      	ldr	r2, [r7, #12]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	429a      	cmp	r2, r3
 800636e:	d002      	beq.n	8006376 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	687a      	ldr	r2, [r7, #4]
 8006374:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006376:	bf00      	nop
 8006378:	3714      	adds	r7, #20
 800637a:	46bd      	mov	sp, r7
 800637c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006380:	4770      	bx	lr
 8006382:	bf00      	nop
 8006384:	2000404c 	.word	0x2000404c
 8006388:	20004054 	.word	0x20004054

0800638c <TM_DELAY_Init>:
} TM_DELAY_Timers_t;

/* Custom timers structure */
static TM_DELAY_Timers_t CustomTimers = {0};

uint32_t TM_DELAY_Init(void) {
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
#if !defined(STM32F0xx)
	uint32_t c;
	
    /* Enable TRC */
    CoreDebug->DEMCR &= ~0x01000000;
 8006392:	4b15      	ldr	r3, [pc, #84]	; (80063e8 <TM_DELAY_Init+0x5c>)
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	4a14      	ldr	r2, [pc, #80]	; (80063e8 <TM_DELAY_Init+0x5c>)
 8006398:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800639c:	60d3      	str	r3, [r2, #12]
    CoreDebug->DEMCR |=  0x01000000;
 800639e:	4b12      	ldr	r3, [pc, #72]	; (80063e8 <TM_DELAY_Init+0x5c>)
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	4a11      	ldr	r2, [pc, #68]	; (80063e8 <TM_DELAY_Init+0x5c>)
 80063a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80063a8:	60d3      	str	r3, [r2, #12]
	
    /* Enable counter */
    DWT->CTRL &= ~0x00000001;
 80063aa:	4b10      	ldr	r3, [pc, #64]	; (80063ec <TM_DELAY_Init+0x60>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4a0f      	ldr	r2, [pc, #60]	; (80063ec <TM_DELAY_Init+0x60>)
 80063b0:	f023 0301 	bic.w	r3, r3, #1
 80063b4:	6013      	str	r3, [r2, #0]
    DWT->CTRL |=  0x00000001;
 80063b6:	4b0d      	ldr	r3, [pc, #52]	; (80063ec <TM_DELAY_Init+0x60>)
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	4a0c      	ldr	r2, [pc, #48]	; (80063ec <TM_DELAY_Init+0x60>)
 80063bc:	f043 0301 	orr.w	r3, r3, #1
 80063c0:	6013      	str	r3, [r2, #0]
	
    /* Reset counter */
    DWT->CYCCNT = 0;
 80063c2:	4b0a      	ldr	r3, [pc, #40]	; (80063ec <TM_DELAY_Init+0x60>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	605a      	str	r2, [r3, #4]
	
	/* Check if DWT has started */
	c = DWT->CYCCNT;
 80063c8:	4b08      	ldr	r3, [pc, #32]	; (80063ec <TM_DELAY_Init+0x60>)
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	607b      	str	r3, [r7, #4]
	
	/* 2 dummys */
	__ASM volatile ("NOP");
 80063ce:	bf00      	nop
	__ASM volatile ("NOP");
 80063d0:	bf00      	nop
	
	/* Return difference, if result is zero, DWT has not started */
	return (DWT->CYCCNT - c);
 80063d2:	4b06      	ldr	r3, [pc, #24]	; (80063ec <TM_DELAY_Init+0x60>)
 80063d4:	685a      	ldr	r2, [r3, #4]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	1ad3      	subs	r3, r2, r3
#else
	/* Return OK */
	return 1;
#endif
}
 80063da:	4618      	mov	r0, r3
 80063dc:	370c      	adds	r7, #12
 80063de:	46bd      	mov	sp, r7
 80063e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e4:	4770      	bx	lr
 80063e6:	bf00      	nop
 80063e8:	e000edf0 	.word	0xe000edf0
 80063ec:	e0001000 	.word	0xe0001000

080063f0 <TM_DELAY_1msHandler>:
	/* Return pointer */
	return Timer;
}

/* 1ms function called when systick makes interrupt */
__weak void TM_DELAY_1msHandler(void) {
 80063f0:	b480      	push	{r7}
 80063f2:	af00      	add	r7, sp, #0
	/* NOTE: This function Should not be modified, when the callback is needed,
           the TM_DELAY_1msHandler could be implemented in the user file
	*/
}
 80063f4:	bf00      	nop
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
	...

08006400 <HAL_IncTick>:
/***************************************************/
/*       Custom HAL function implementations       */
/***************************************************/

/* Called from Systick handler */
void HAL_IncTick(void) {
 8006400:	b580      	push	{r7, lr}
 8006402:	b082      	sub	sp, #8
 8006404:	af00      	add	r7, sp, #0
	uint8_t i;
	
	/* Increase system time */
	TM_Time++;
 8006406:	4b3e      	ldr	r3, [pc, #248]	; (8006500 <HAL_IncTick+0x100>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	3301      	adds	r3, #1
 800640c:	4a3c      	ldr	r2, [pc, #240]	; (8006500 <HAL_IncTick+0x100>)
 800640e:	6013      	str	r3, [r2, #0]
	
	/* Decrease other system time */
	if (TM_Time2) {
 8006410:	4b3c      	ldr	r3, [pc, #240]	; (8006504 <HAL_IncTick+0x104>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d004      	beq.n	8006422 <HAL_IncTick+0x22>
		TM_Time2--;
 8006418:	4b3a      	ldr	r3, [pc, #232]	; (8006504 <HAL_IncTick+0x104>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	3b01      	subs	r3, #1
 800641e:	4a39      	ldr	r2, [pc, #228]	; (8006504 <HAL_IncTick+0x104>)
 8006420:	6013      	str	r3, [r2, #0]
	}
	
	/* Check for timers */
	/* Check custom timers */
	for (i = 0; i < CustomTimers.Count; i++) {
 8006422:	2300      	movs	r3, #0
 8006424:	71fb      	strb	r3, [r7, #7]
 8006426:	e05f      	b.n	80064e8 <HAL_IncTick+0xe8>
		/* Check if timer is enabled */
		if (
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006428:	79fb      	ldrb	r3, [r7, #7]
 800642a:	4a37      	ldr	r2, [pc, #220]	; (8006508 <HAL_IncTick+0x108>)
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	685b      	ldr	r3, [r3, #4]
		if (
 8006432:	2b00      	cmp	r3, #0
 8006434:	d055      	beq.n	80064e2 <HAL_IncTick+0xe2>
			CustomTimers.Timers[i]->Flags.F.CNTEN /*!< Timer is enabled */
 8006436:	79fb      	ldrb	r3, [r7, #7]
 8006438:	4a33      	ldr	r2, [pc, #204]	; (8006508 <HAL_IncTick+0x108>)
 800643a:	009b      	lsls	r3, r3, #2
 800643c:	4413      	add	r3, r2
 800643e:	685b      	ldr	r3, [r3, #4]
			CustomTimers.Timers[i] &&             /*!< Pointer exists */
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	b2db      	uxtb	r3, r3
 8006448:	2b00      	cmp	r3, #0
 800644a:	d04a      	beq.n	80064e2 <HAL_IncTick+0xe2>
		) {
			/* Decrease counter if needed */
			if (CustomTimers.Timers[i]->CNT) {
 800644c:	79fb      	ldrb	r3, [r7, #7]
 800644e:	4a2e      	ldr	r2, [pc, #184]	; (8006508 <HAL_IncTick+0x108>)
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	689b      	ldr	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d007      	beq.n	800646c <HAL_IncTick+0x6c>
				CustomTimers.Timers[i]->CNT--;
 800645c:	79fb      	ldrb	r3, [r7, #7]
 800645e:	4a2a      	ldr	r2, [pc, #168]	; (8006508 <HAL_IncTick+0x108>)
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	4413      	add	r3, r2
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	3a01      	subs	r2, #1
 800646a:	609a      	str	r2, [r3, #8]
			}

			/* Check if count is zero */
			if (CustomTimers.Timers[i]->CNT == 0) {
 800646c:	79fb      	ldrb	r3, [r7, #7]
 800646e:	4a26      	ldr	r2, [pc, #152]	; (8006508 <HAL_IncTick+0x108>)
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	4413      	add	r3, r2
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	689b      	ldr	r3, [r3, #8]
 8006478:	2b00      	cmp	r3, #0
 800647a:	d132      	bne.n	80064e2 <HAL_IncTick+0xe2>
				/* Call user callback function */
				CustomTimers.Timers[i]->Callback(CustomTimers.Timers[i], CustomTimers.Timers[i]->UserParameters);
 800647c:	79fb      	ldrb	r3, [r7, #7]
 800647e:	4a22      	ldr	r2, [pc, #136]	; (8006508 <HAL_IncTick+0x108>)
 8006480:	009b      	lsls	r3, r3, #2
 8006482:	4413      	add	r3, r2
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68da      	ldr	r2, [r3, #12]
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	491f      	ldr	r1, [pc, #124]	; (8006508 <HAL_IncTick+0x108>)
 800648c:	009b      	lsls	r3, r3, #2
 800648e:	440b      	add	r3, r1
 8006490:	6858      	ldr	r0, [r3, #4]
 8006492:	79fb      	ldrb	r3, [r7, #7]
 8006494:	491c      	ldr	r1, [pc, #112]	; (8006508 <HAL_IncTick+0x108>)
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	691b      	ldr	r3, [r3, #16]
 800649e:	4619      	mov	r1, r3
 80064a0:	4790      	blx	r2

				/* Set new counter value */
				CustomTimers.Timers[i]->CNT = CustomTimers.Timers[i]->ARR;
 80064a2:	79fb      	ldrb	r3, [r7, #7]
 80064a4:	4a18      	ldr	r2, [pc, #96]	; (8006508 <HAL_IncTick+0x108>)
 80064a6:	009b      	lsls	r3, r3, #2
 80064a8:	4413      	add	r3, r2
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	79fb      	ldrb	r3, [r7, #7]
 80064ae:	4916      	ldr	r1, [pc, #88]	; (8006508 <HAL_IncTick+0x108>)
 80064b0:	009b      	lsls	r3, r3, #2
 80064b2:	440b      	add	r3, r1
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	6852      	ldr	r2, [r2, #4]
 80064b8:	609a      	str	r2, [r3, #8]

				/* Disable timer if auto reload feature is not used */
				if (!CustomTimers.Timers[i]->Flags.F.AREN) {
 80064ba:	79fb      	ldrb	r3, [r7, #7]
 80064bc:	4a12      	ldr	r2, [pc, #72]	; (8006508 <HAL_IncTick+0x108>)
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4413      	add	r3, r2
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	781b      	ldrb	r3, [r3, #0]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d108      	bne.n	80064e2 <HAL_IncTick+0xe2>
					/* Disable counter */
					CustomTimers.Timers[i]->Flags.F.CNTEN = 0;
 80064d0:	79fb      	ldrb	r3, [r7, #7]
 80064d2:	4a0d      	ldr	r2, [pc, #52]	; (8006508 <HAL_IncTick+0x108>)
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	685a      	ldr	r2, [r3, #4]
 80064da:	7813      	ldrb	r3, [r2, #0]
 80064dc:	f36f 0341 	bfc	r3, #1, #1
 80064e0:	7013      	strb	r3, [r2, #0]
	for (i = 0; i < CustomTimers.Count; i++) {
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	3301      	adds	r3, #1
 80064e6:	71fb      	strb	r3, [r7, #7]
 80064e8:	4b07      	ldr	r3, [pc, #28]	; (8006508 <HAL_IncTick+0x108>)
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	79fa      	ldrb	r2, [r7, #7]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d39a      	bcc.n	8006428 <HAL_IncTick+0x28>
			}
		}
	}
	
	/* Call 1ms interrupt handler function */
	TM_DELAY_1msHandler();
 80064f2:	f7ff ff7d 	bl	80063f0 <TM_DELAY_1msHandler>
}
 80064f6:	bf00      	nop
 80064f8:	3708      	adds	r7, #8
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20004068 	.word	0x20004068
 8006504:	20004064 	.word	0x20004064
 8006508:	2000406c 	.word	0x2000406c

0800650c <HAL_Delay>:

void HAL_Delay(uint32_t Delay) {
 800650c:	b580      	push	{r7, lr}
 800650e:	b084      	sub	sp, #16
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8006514:	f3ef 8305 	mrs	r3, IPSR
 8006518:	60bb      	str	r3, [r7, #8]
  return(result);
 800651a:	68bb      	ldr	r3, [r7, #8]
	/* Delay for amount of milliseconds */
	/* Check if we are called from ISR */
	if (__get_IPSR() == 0) {
 800651c:	2b00      	cmp	r3, #0
 800651e:	d115      	bne.n	800654c <HAL_Delay+0x40>
		/* Called from thread mode */
		uint32_t tickstart = HAL_GetTick();
 8006520:	f000 f81e 	bl	8006560 <HAL_GetTick>
 8006524:	60f8      	str	r0, [r7, #12]
		
		/* Count interrupts */
		while ((HAL_GetTick() - tickstart) < Delay) {
 8006526:	bf00      	nop
 8006528:	f000 f81a 	bl	8006560 <HAL_GetTick>
 800652c:	4602      	mov	r2, r0
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	1ad3      	subs	r3, r2, r3
 8006532:	687a      	ldr	r2, [r7, #4]
 8006534:	429a      	cmp	r2, r3
 8006536:	d8f7      	bhi.n	8006528 <HAL_Delay+0x1c>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
				Delay--;
			}
		}
	}
}
 8006538:	e00b      	b.n	8006552 <HAL_Delay+0x46>
			if (SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) {
 800653a:	4b08      	ldr	r3, [pc, #32]	; (800655c <HAL_Delay+0x50>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006542:	2b00      	cmp	r3, #0
 8006544:	d002      	beq.n	800654c <HAL_Delay+0x40>
				Delay--;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	3b01      	subs	r3, #1
 800654a:	607b      	str	r3, [r7, #4]
		while (Delay) {
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d1f3      	bne.n	800653a <HAL_Delay+0x2e>
}
 8006552:	bf00      	nop
 8006554:	3710      	adds	r7, #16
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	e000e010 	.word	0xe000e010

08006560 <HAL_GetTick>:

uint32_t HAL_GetTick(void) {
 8006560:	b480      	push	{r7}
 8006562:	af00      	add	r7, sp, #0
	/* Return current time in milliseconds */
	return TM_Time;
 8006564:	4b03      	ldr	r3, [pc, #12]	; (8006574 <HAL_GetTick+0x14>)
 8006566:	681b      	ldr	r3, [r3, #0]
}
 8006568:	4618      	mov	r0, r3
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	20004068 	.word	0x20004068

08006578 <TM_GPIO_Init>:
/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_DisableClock(GPIO_TypeDef* GPIOx);
void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed);

void TM_GPIO_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {	
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af02      	add	r7, sp, #8
 800657e:	6078      	str	r0, [r7, #4]
 8006580:	4608      	mov	r0, r1
 8006582:	4611      	mov	r1, r2
 8006584:	461a      	mov	r2, r3
 8006586:	4603      	mov	r3, r0
 8006588:	807b      	strh	r3, [r7, #2]
 800658a:	460b      	mov	r3, r1
 800658c:	707b      	strb	r3, [r7, #1]
 800658e:	4613      	mov	r3, r2
 8006590:	703b      	strb	r3, [r7, #0]
	/* Check input */
	if (GPIO_Pin == 0x00) {
 8006592:	887b      	ldrh	r3, [r7, #2]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d00e      	beq.n	80065b6 <TM_GPIO_Init+0x3e>
		return;
	}
	
	/* Enable clock for GPIO */
	TM_GPIO_INT_EnableClock(GPIOx);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f821 	bl	80065e0 <TM_GPIO_INT_EnableClock>
	
	/* Do initialization */
	TM_GPIO_INT_Init(GPIOx, GPIO_Pin, GPIO_Mode, GPIO_OType, GPIO_PuPd, GPIO_Speed);
 800659e:	7838      	ldrb	r0, [r7, #0]
 80065a0:	787a      	ldrb	r2, [r7, #1]
 80065a2:	8879      	ldrh	r1, [r7, #2]
 80065a4:	7d3b      	ldrb	r3, [r7, #20]
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	7c3b      	ldrb	r3, [r7, #16]
 80065aa:	9300      	str	r3, [sp, #0]
 80065ac:	4603      	mov	r3, r0
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f82e 	bl	8006610 <TM_GPIO_INT_Init>
 80065b4:	e000      	b.n	80065b8 <TM_GPIO_Init+0x40>
		return;
 80065b6:	bf00      	nop
}
 80065b8:	3708      	adds	r7, #8
 80065ba:	46bd      	mov	sp, r7
 80065bc:	bd80      	pop	{r7, pc}

080065be <TM_GPIO_GetPortSource>:
	
	/* Return source */
	return pinsource;
}

uint16_t TM_GPIO_GetPortSource(GPIO_TypeDef* GPIOx) {
 80065be:	b480      	push	{r7}
 80065c0:	b083      	sub	sp, #12
 80065c2:	af00      	add	r7, sp, #0
 80065c4:	6078      	str	r0, [r7, #4]
	/* Get port source number */
	/* Offset from GPIOA                       Difference between 2 GPIO addresses */
	return ((uint32_t)GPIOx - (GPIOA_BASE)) / ((GPIOB_BASE) - (GPIOA_BASE));
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f103 433f 	add.w	r3, r3, #3204448256	; 0xbf000000
 80065cc:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80065d0:	0a9b      	lsrs	r3, r3, #10
 80065d2:	b29b      	uxth	r3, r3
}
 80065d4:	4618      	mov	r0, r3
 80065d6:	370c      	adds	r7, #12
 80065d8:	46bd      	mov	sp, r7
 80065da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065de:	4770      	bx	lr

080065e0 <TM_GPIO_INT_EnableClock>:

/* Private functions */
void TM_GPIO_INT_EnableClock(GPIO_TypeDef* GPIOx) {
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b082      	sub	sp, #8
 80065e4:	af00      	add	r7, sp, #0
 80065e6:	6078      	str	r0, [r7, #4]
	/* Set bit according to the 1 << portsourcenumber */
#if defined(STM32F0xx)
	RCC->AHBENR |= (1 << (TM_GPIO_GetPortSource(GPIOx) + 17));
#else
	RCC->AHB1ENR |= (1 << TM_GPIO_GetPortSource(GPIOx));
 80065e8:	6878      	ldr	r0, [r7, #4]
 80065ea:	f7ff ffe8 	bl	80065be <TM_GPIO_GetPortSource>
 80065ee:	4603      	mov	r3, r0
 80065f0:	461a      	mov	r2, r3
 80065f2:	2301      	movs	r3, #1
 80065f4:	fa03 f202 	lsl.w	r2, r3, r2
 80065f8:	4b04      	ldr	r3, [pc, #16]	; (800660c <TM_GPIO_INT_EnableClock+0x2c>)
 80065fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065fc:	4611      	mov	r1, r2
 80065fe:	4a03      	ldr	r2, [pc, #12]	; (800660c <TM_GPIO_INT_EnableClock+0x2c>)
 8006600:	430b      	orrs	r3, r1
 8006602:	6313      	str	r3, [r2, #48]	; 0x30
#endif
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800

08006610 <TM_GPIO_INT_Init>:
#else
	RCC->AHB1ENR &= ~(1 << TM_GPIO_GetPortSource(GPIOx));
#endif
}

void TM_GPIO_INT_Init(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, TM_GPIO_Mode_t GPIO_Mode, TM_GPIO_OType_t GPIO_OType, TM_GPIO_PuPd_t GPIO_PuPd, TM_GPIO_Speed_t GPIO_Speed) {
 8006610:	b580      	push	{r7, lr}
 8006612:	b084      	sub	sp, #16
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
 8006618:	4608      	mov	r0, r1
 800661a:	4611      	mov	r1, r2
 800661c:	461a      	mov	r2, r3
 800661e:	4603      	mov	r3, r0
 8006620:	807b      	strh	r3, [r7, #2]
 8006622:	460b      	mov	r3, r1
 8006624:	707b      	strb	r3, [r7, #1]
 8006626:	4613      	mov	r3, r2
 8006628:	703b      	strb	r3, [r7, #0]
	uint8_t pinpos;
	uint8_t ptr = TM_GPIO_GetPortSource(GPIOx);
 800662a:	6878      	ldr	r0, [r7, #4]
 800662c:	f7ff ffc7 	bl	80065be <TM_GPIO_GetPortSource>
 8006630:	4603      	mov	r3, r0
 8006632:	73bb      	strb	r3, [r7, #14]
		GPIO_Speed = TM_GPIO_Speed_High;
	}
#endif
	
	/* Go through all pins */
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006634:	2300      	movs	r3, #0
 8006636:	73fb      	strb	r3, [r7, #15]
 8006638:	e067      	b.n	800670a <TM_GPIO_INT_Init+0xfa>
		/* Check if pin available */
		if ((GPIO_Pin & (1 << pinpos)) == 0) {
 800663a:	887a      	ldrh	r2, [r7, #2]
 800663c:	7bfb      	ldrb	r3, [r7, #15]
 800663e:	fa42 f303 	asr.w	r3, r2, r3
 8006642:	f003 0301 	and.w	r3, r3, #1
 8006646:	2b00      	cmp	r3, #0
 8006648:	d05b      	beq.n	8006702 <TM_GPIO_INT_Init+0xf2>
			continue;
		}
		
		/* Pin is used */
		GPIO_UsedPins[ptr] |= 1 << pinpos;
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	4a32      	ldr	r2, [pc, #200]	; (8006718 <TM_GPIO_INT_Init+0x108>)
 800664e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006652:	b21a      	sxth	r2, r3
 8006654:	7bfb      	ldrb	r3, [r7, #15]
 8006656:	2101      	movs	r1, #1
 8006658:	fa01 f303 	lsl.w	r3, r1, r3
 800665c:	b21b      	sxth	r3, r3
 800665e:	4313      	orrs	r3, r2
 8006660:	b21a      	sxth	r2, r3
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	b291      	uxth	r1, r2
 8006666:	4a2c      	ldr	r2, [pc, #176]	; (8006718 <TM_GPIO_INT_Init+0x108>)
 8006668:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		
		/* Set GPIO PUPD register */
		GPIOx->PUPDR = (GPIOx->PUPDR & ~(0x03 << (2 * pinpos))) | ((uint32_t)(GPIO_PuPd << (2 * pinpos)));
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	7bfa      	ldrb	r2, [r7, #15]
 8006672:	0052      	lsls	r2, r2, #1
 8006674:	2103      	movs	r1, #3
 8006676:	fa01 f202 	lsl.w	r2, r1, r2
 800667a:	43d2      	mvns	r2, r2
 800667c:	4013      	ands	r3, r2
 800667e:	7e39      	ldrb	r1, [r7, #24]
 8006680:	7bfa      	ldrb	r2, [r7, #15]
 8006682:	0052      	lsls	r2, r2, #1
 8006684:	fa01 f202 	lsl.w	r2, r1, r2
 8006688:	431a      	orrs	r2, r3
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	60da      	str	r2, [r3, #12]
		
		/* Set GPIO MODE register */
		GPIOx->MODER = (GPIOx->MODER & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Mode << (2 * pinpos)));
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681a      	ldr	r2, [r3, #0]
 8006692:	7bfb      	ldrb	r3, [r7, #15]
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	2103      	movs	r1, #3
 8006698:	fa01 f303 	lsl.w	r3, r1, r3
 800669c:	43db      	mvns	r3, r3
 800669e:	4013      	ands	r3, r2
 80066a0:	7879      	ldrb	r1, [r7, #1]
 80066a2:	7bfa      	ldrb	r2, [r7, #15]
 80066a4:	0052      	lsls	r2, r2, #1
 80066a6:	fa01 f202 	lsl.w	r2, r1, r2
 80066aa:	431a      	orrs	r2, r3
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	601a      	str	r2, [r3, #0]
		
		/* Set only if output or alternate functions */
		if (GPIO_Mode == TM_GPIO_Mode_OUT || GPIO_Mode == TM_GPIO_Mode_AF) {		
 80066b0:	787b      	ldrb	r3, [r7, #1]
 80066b2:	2b01      	cmp	r3, #1
 80066b4:	d002      	beq.n	80066bc <TM_GPIO_INT_Init+0xac>
 80066b6:	787b      	ldrb	r3, [r7, #1]
 80066b8:	2b02      	cmp	r3, #2
 80066ba:	d123      	bne.n	8006704 <TM_GPIO_INT_Init+0xf4>
			/* Set GPIO OTYPE register */
			GPIOx->OTYPER = (GPIOx->OTYPER & ~(uint16_t)(0x01 << pinpos)) | ((uint16_t)(GPIO_OType << pinpos));
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	685b      	ldr	r3, [r3, #4]
 80066c0:	7bfa      	ldrb	r2, [r7, #15]
 80066c2:	2101      	movs	r1, #1
 80066c4:	fa01 f202 	lsl.w	r2, r1, r2
 80066c8:	b292      	uxth	r2, r2
 80066ca:	43d2      	mvns	r2, r2
 80066cc:	4013      	ands	r3, r2
 80066ce:	7839      	ldrb	r1, [r7, #0]
 80066d0:	7bfa      	ldrb	r2, [r7, #15]
 80066d2:	fa01 f202 	lsl.w	r2, r1, r2
 80066d6:	b292      	uxth	r2, r2
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	605a      	str	r2, [r3, #4]
			
			/* Set GPIO OSPEED register */
			GPIOx->OSPEEDR = (GPIOx->OSPEEDR & ~((uint32_t)(0x03 << (2 * pinpos)))) | ((uint32_t)(GPIO_Speed << (2 * pinpos)));
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	689a      	ldr	r2, [r3, #8]
 80066e2:	7bfb      	ldrb	r3, [r7, #15]
 80066e4:	005b      	lsls	r3, r3, #1
 80066e6:	2103      	movs	r1, #3
 80066e8:	fa01 f303 	lsl.w	r3, r1, r3
 80066ec:	43db      	mvns	r3, r3
 80066ee:	4013      	ands	r3, r2
 80066f0:	7f39      	ldrb	r1, [r7, #28]
 80066f2:	7bfa      	ldrb	r2, [r7, #15]
 80066f4:	0052      	lsls	r2, r2, #1
 80066f6:	fa01 f202 	lsl.w	r2, r1, r2
 80066fa:	431a      	orrs	r2, r3
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	609a      	str	r2, [r3, #8]
 8006700:	e000      	b.n	8006704 <TM_GPIO_INT_Init+0xf4>
			continue;
 8006702:	bf00      	nop
	for (pinpos = 0; pinpos < 0x10; pinpos++) {
 8006704:	7bfb      	ldrb	r3, [r7, #15]
 8006706:	3301      	adds	r3, #1
 8006708:	73fb      	strb	r3, [r7, #15]
 800670a:	7bfb      	ldrb	r3, [r7, #15]
 800670c:	2b0f      	cmp	r3, #15
 800670e:	d994      	bls.n	800663a <TM_GPIO_INT_Init+0x2a>
		}
	}
}
 8006710:	bf00      	nop
 8006712:	3710      	adds	r7, #16
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	20004084 	.word	0x20004084

0800671c <Delay>:
/**
 * @brief  Delays for amount of micro seconds
 * @param  micros: Number of microseconds for delay
 * @retval None
 */
__STATIC_INLINE void Delay(__IO uint32_t micros) {
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
#if !defined(STM32F0xx)
	uint32_t start = DWT->CYCCNT;
 8006724:	4b0c      	ldr	r3, [pc, #48]	; (8006758 <Delay+0x3c>)
 8006726:	685b      	ldr	r3, [r3, #4]
 8006728:	60fb      	str	r3, [r7, #12]
	
	/* Go to number of cycles for system */
	micros *= (HAL_RCC_GetHCLKFreq() / 1000000);
 800672a:	f7fb fe7d 	bl	8002428 <HAL_RCC_GetHCLKFreq>
 800672e:	4602      	mov	r2, r0
 8006730:	4b0a      	ldr	r3, [pc, #40]	; (800675c <Delay+0x40>)
 8006732:	fba3 2302 	umull	r2, r3, r3, r2
 8006736:	0c9b      	lsrs	r3, r3, #18
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	fb02 f303 	mul.w	r3, r2, r3
 800673e:	607b      	str	r3, [r7, #4]
	
	/* Delay till end */
	while ((DWT->CYCCNT - start) < micros);
 8006740:	bf00      	nop
 8006742:	4b05      	ldr	r3, [pc, #20]	; (8006758 <Delay+0x3c>)
 8006744:	685a      	ldr	r2, [r3, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	1ad2      	subs	r2, r2, r3
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	429a      	cmp	r2, r3
 800674e:	d3f8      	bcc.n	8006742 <Delay+0x26>
	micros *= (SystemCoreClock / 1000000) / 5;
	
	/* Wait till done */
	while (micros--);
#endif
}
 8006750:	bf00      	nop
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	e0001000 	.word	0xe0001000
 800675c:	431bde83 	.word	0x431bde83

08006760 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 8006760:	b580      	push	{r7, lr}
 8006762:	b082      	sub	sp, #8
 8006764:	af00      	add	r7, sp, #0
 8006766:	4603      	mov	r3, r0
 8006768:	460a      	mov	r2, r1
 800676a:	71fb      	strb	r3, [r7, #7]
 800676c:	4613      	mov	r3, r2
 800676e:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	TM_DELAY_Init();
 8006770:	f7ff fe0c 	bl	800638c <TM_DELAY_Init>
	
	/* Init pinout */
	TM_HD44780_InitPins();
 8006774:	f000 f996 	bl	8006aa4 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 8006778:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 800677c:	f7ff ffce 	bl	800671c <Delay>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 8006780:	4a2a      	ldr	r2, [pc, #168]	; (800682c <TM_HD44780_Init+0xcc>)
 8006782:	79bb      	ldrb	r3, [r7, #6]
 8006784:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 8006786:	4a29      	ldr	r2, [pc, #164]	; (800682c <TM_HD44780_Init+0xcc>)
 8006788:	79fb      	ldrb	r3, [r7, #7]
 800678a:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 800678c:	4b27      	ldr	r3, [pc, #156]	; (800682c <TM_HD44780_Init+0xcc>)
 800678e:	2200      	movs	r2, #0
 8006790:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 8006792:	4b26      	ldr	r3, [pc, #152]	; (800682c <TM_HD44780_Init+0xcc>)
 8006794:	2200      	movs	r2, #0
 8006796:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 8006798:	4b24      	ldr	r3, [pc, #144]	; (800682c <TM_HD44780_Init+0xcc>)
 800679a:	2200      	movs	r2, #0
 800679c:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 800679e:	79bb      	ldrb	r3, [r7, #6]
 80067a0:	2b01      	cmp	r3, #1
 80067a2:	d906      	bls.n	80067b2 <TM_HD44780_Init+0x52>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 80067a4:	4b21      	ldr	r3, [pc, #132]	; (800682c <TM_HD44780_Init+0xcc>)
 80067a6:	785b      	ldrb	r3, [r3, #1]
 80067a8:	f043 0308 	orr.w	r3, r3, #8
 80067ac:	b2da      	uxtb	r2, r3
 80067ae:	4b1f      	ldr	r3, [pc, #124]	; (800682c <TM_HD44780_Init+0xcc>)
 80067b0:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 80067b2:	2003      	movs	r0, #3
 80067b4:	f000 f8f2 	bl	800699c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80067b8:	f241 1094 	movw	r0, #4500	; 0x1194
 80067bc:	f7ff ffae 	bl	800671c <Delay>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 80067c0:	2003      	movs	r0, #3
 80067c2:	f000 f8eb 	bl	800699c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 80067c6:	f241 1094 	movw	r0, #4500	; 0x1194
 80067ca:	f7ff ffa7 	bl	800671c <Delay>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 80067ce:	2003      	movs	r0, #3
 80067d0:	f000 f8e4 	bl	800699c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);	
 80067d4:	f241 1094 	movw	r0, #4500	; 0x1194
 80067d8:	f7ff ffa0 	bl	800671c <Delay>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 80067dc:	2002      	movs	r0, #2
 80067de:	f000 f8dd 	bl	800699c <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 80067e2:	2064      	movs	r0, #100	; 0x64
 80067e4:	f7ff ff9a 	bl	800671c <Delay>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 80067e8:	4b10      	ldr	r3, [pc, #64]	; (800682c <TM_HD44780_Init+0xcc>)
 80067ea:	785b      	ldrb	r3, [r3, #1]
 80067ec:	f043 0320 	orr.w	r3, r3, #32
 80067f0:	b2db      	uxtb	r3, r3
 80067f2:	4618      	mov	r0, r3
 80067f4:	f000 f89a 	bl	800692c <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 80067f8:	4b0c      	ldr	r3, [pc, #48]	; (800682c <TM_HD44780_Init+0xcc>)
 80067fa:	2204      	movs	r2, #4
 80067fc:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 80067fe:	f000 f87f 	bl	8006900 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 8006802:	f000 f815 	bl	8006830 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 8006806:	4b09      	ldr	r3, [pc, #36]	; (800682c <TM_HD44780_Init+0xcc>)
 8006808:	2202      	movs	r2, #2
 800680a:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800680c:	4b07      	ldr	r3, [pc, #28]	; (800682c <TM_HD44780_Init+0xcc>)
 800680e:	789b      	ldrb	r3, [r3, #2]
 8006810:	f043 0304 	orr.w	r3, r3, #4
 8006814:	b2db      	uxtb	r3, r3
 8006816:	4618      	mov	r0, r3
 8006818:	f000 f888 	bl	800692c <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 800681c:	f241 1094 	movw	r0, #4500	; 0x1194
 8006820:	f7ff ff7c 	bl	800671c <Delay>
}
 8006824:	bf00      	nop
 8006826:	3708      	adds	r7, #8
 8006828:	46bd      	mov	sp, r7
 800682a:	bd80      	pop	{r7, pc}
 800682c:	200040a0 	.word	0x200040a0

08006830 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 8006830:	b580      	push	{r7, lr}
 8006832:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 8006834:	2001      	movs	r0, #1
 8006836:	f000 f879 	bl	800692c <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 800683a:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800683e:	f7ff ff6d 	bl	800671c <Delay>
}
 8006842:	bf00      	nop
 8006844:	bd80      	pop	{r7, pc}
	...

08006848 <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	4603      	mov	r3, r0
 8006850:	603a      	str	r2, [r7, #0]
 8006852:	71fb      	strb	r3, [r7, #7]
 8006854:	460b      	mov	r3, r1
 8006856:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 8006858:	79ba      	ldrb	r2, [r7, #6]
 800685a:	79fb      	ldrb	r3, [r7, #7]
 800685c:	4611      	mov	r1, r2
 800685e:	4618      	mov	r0, r3
 8006860:	f000 f8ee 	bl	8006a40 <TM_HD44780_CursorSet>
	while (*str) {
 8006864:	e042      	b.n	80068ec <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 8006866:	4b25      	ldr	r3, [pc, #148]	; (80068fc <TM_HD44780_Puts+0xb4>)
 8006868:	795a      	ldrb	r2, [r3, #5]
 800686a:	4b24      	ldr	r3, [pc, #144]	; (80068fc <TM_HD44780_Puts+0xb4>)
 800686c:	791b      	ldrb	r3, [r3, #4]
 800686e:	429a      	cmp	r2, r3
 8006870:	d310      	bcc.n	8006894 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 8006872:	4b22      	ldr	r3, [pc, #136]	; (80068fc <TM_HD44780_Puts+0xb4>)
 8006874:	2200      	movs	r2, #0
 8006876:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 8006878:	4b20      	ldr	r3, [pc, #128]	; (80068fc <TM_HD44780_Puts+0xb4>)
 800687a:	799b      	ldrb	r3, [r3, #6]
 800687c:	3301      	adds	r3, #1
 800687e:	b2da      	uxtb	r2, r3
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <TM_HD44780_Puts+0xb4>)
 8006882:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 8006884:	4b1d      	ldr	r3, [pc, #116]	; (80068fc <TM_HD44780_Puts+0xb4>)
 8006886:	795a      	ldrb	r2, [r3, #5]
 8006888:	4b1c      	ldr	r3, [pc, #112]	; (80068fc <TM_HD44780_Puts+0xb4>)
 800688a:	799b      	ldrb	r3, [r3, #6]
 800688c:	4619      	mov	r1, r3
 800688e:	4610      	mov	r0, r2
 8006890:	f000 f8d6 	bl	8006a40 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	2b0a      	cmp	r3, #10
 800689a:	d10e      	bne.n	80068ba <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 800689c:	4b17      	ldr	r3, [pc, #92]	; (80068fc <TM_HD44780_Puts+0xb4>)
 800689e:	799b      	ldrb	r3, [r3, #6]
 80068a0:	3301      	adds	r3, #1
 80068a2:	b2da      	uxtb	r2, r3
 80068a4:	4b15      	ldr	r3, [pc, #84]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068a6:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 80068a8:	4b14      	ldr	r3, [pc, #80]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068aa:	795a      	ldrb	r2, [r3, #5]
 80068ac:	4b13      	ldr	r3, [pc, #76]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068ae:	799b      	ldrb	r3, [r3, #6]
 80068b0:	4619      	mov	r1, r3
 80068b2:	4610      	mov	r0, r2
 80068b4:	f000 f8c4 	bl	8006a40 <TM_HD44780_CursorSet>
 80068b8:	e015      	b.n	80068e6 <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	2b0d      	cmp	r3, #13
 80068c0:	d106      	bne.n	80068d0 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 80068c2:	4b0e      	ldr	r3, [pc, #56]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068c4:	799b      	ldrb	r3, [r3, #6]
 80068c6:	4619      	mov	r1, r3
 80068c8:	2000      	movs	r0, #0
 80068ca:	f000 f8b9 	bl	8006a40 <TM_HD44780_CursorSet>
 80068ce:	e00a      	b.n	80068e6 <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 80068d0:	683b      	ldr	r3, [r7, #0]
 80068d2:	781b      	ldrb	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	f000 f845 	bl	8006964 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 80068da:	4b08      	ldr	r3, [pc, #32]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068dc:	795b      	ldrb	r3, [r3, #5]
 80068de:	3301      	adds	r3, #1
 80068e0:	b2da      	uxtb	r2, r3
 80068e2:	4b06      	ldr	r3, [pc, #24]	; (80068fc <TM_HD44780_Puts+0xb4>)
 80068e4:	715a      	strb	r2, [r3, #5]
		}
		str++;
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	3301      	adds	r3, #1
 80068ea:	603b      	str	r3, [r7, #0]
	while (*str) {
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	781b      	ldrb	r3, [r3, #0]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	d1b8      	bne.n	8006866 <TM_HD44780_Puts+0x1e>
	}
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	200040a0 	.word	0x200040a0

08006900 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 8006900:	b580      	push	{r7, lr}
 8006902:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 8006904:	4b08      	ldr	r3, [pc, #32]	; (8006928 <TM_HD44780_DisplayOn+0x28>)
 8006906:	781b      	ldrb	r3, [r3, #0]
 8006908:	f043 0304 	orr.w	r3, r3, #4
 800690c:	b2da      	uxtb	r2, r3
 800690e:	4b06      	ldr	r3, [pc, #24]	; (8006928 <TM_HD44780_DisplayOn+0x28>)
 8006910:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 8006912:	4b05      	ldr	r3, [pc, #20]	; (8006928 <TM_HD44780_DisplayOn+0x28>)
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	f043 0308 	orr.w	r3, r3, #8
 800691a:	b2db      	uxtb	r3, r3
 800691c:	4618      	mov	r0, r3
 800691e:	f000 f805 	bl	800692c <TM_HD44780_Cmd>
}
 8006922:	bf00      	nop
 8006924:	bd80      	pop	{r7, pc}
 8006926:	bf00      	nop
 8006928:	200040a0 	.word	0x200040a0

0800692c <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 800692c:	b580      	push	{r7, lr}
 800692e:	b082      	sub	sp, #8
 8006930:	af00      	add	r7, sp, #0
 8006932:	4603      	mov	r3, r0
 8006934:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 8006936:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <TM_HD44780_Cmd+0x34>)
 8006938:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800693c:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 800693e:	79fb      	ldrb	r3, [r7, #7]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	b2db      	uxtb	r3, r3
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f829 	bl	800699c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800694a:	79fb      	ldrb	r3, [r7, #7]
 800694c:	f003 030f 	and.w	r3, r3, #15
 8006950:	b2db      	uxtb	r3, r3
 8006952:	4618      	mov	r0, r3
 8006954:	f000 f822 	bl	800699c <TM_HD44780_Cmd4bit>
}
 8006958:	bf00      	nop
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	40020000 	.word	0x40020000

08006964 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 8006964:	b580      	push	{r7, lr}
 8006966:	b082      	sub	sp, #8
 8006968:	af00      	add	r7, sp, #0
 800696a:	4603      	mov	r3, r0
 800696c:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 800696e:	4b0a      	ldr	r3, [pc, #40]	; (8006998 <TM_HD44780_Data+0x34>)
 8006970:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006974:	619a      	str	r2, [r3, #24]
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	091b      	lsrs	r3, r3, #4
 800697a:	b2db      	uxtb	r3, r3
 800697c:	4618      	mov	r0, r3
 800697e:	f000 f80d 	bl	800699c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 8006982:	79fb      	ldrb	r3, [r7, #7]
 8006984:	f003 030f 	and.w	r3, r3, #15
 8006988:	b2db      	uxtb	r3, r3
 800698a:	4618      	mov	r0, r3
 800698c:	f000 f806 	bl	800699c <TM_HD44780_Cmd4bit>
}
 8006990:	bf00      	nop
 8006992:	3708      	adds	r7, #8
 8006994:	46bd      	mov	sp, r7
 8006996:	bd80      	pop	{r7, pc}
 8006998:	40020000 	.word	0x40020000

0800699c <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	4603      	mov	r3, r0
 80069a4:	71fb      	strb	r3, [r7, #7]
	/* Set output port */
	TM_GPIO_SetPinValue(HD44780_D7_PORT, HD44780_D7_PIN, (cmd & 0x08));
 80069a6:	79fb      	ldrb	r3, [r7, #7]
 80069a8:	f003 0308 	and.w	r3, r3, #8
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d004      	beq.n	80069ba <TM_HD44780_Cmd4bit+0x1e>
 80069b0:	4b20      	ldr	r3, [pc, #128]	; (8006a34 <TM_HD44780_Cmd4bit+0x98>)
 80069b2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80069b6:	619a      	str	r2, [r3, #24]
 80069b8:	e003      	b.n	80069c2 <TM_HD44780_Cmd4bit+0x26>
 80069ba:	4b1e      	ldr	r3, [pc, #120]	; (8006a34 <TM_HD44780_Cmd4bit+0x98>)
 80069bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80069c0:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D6_PORT, HD44780_D6_PIN, (cmd & 0x04));
 80069c2:	79fb      	ldrb	r3, [r7, #7]
 80069c4:	f003 0304 	and.w	r3, r3, #4
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d004      	beq.n	80069d6 <TM_HD44780_Cmd4bit+0x3a>
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 80069ce:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80069d2:	619a      	str	r2, [r3, #24]
 80069d4:	e003      	b.n	80069de <TM_HD44780_Cmd4bit+0x42>
 80069d6:	4b18      	ldr	r3, [pc, #96]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 80069d8:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80069dc:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D5_PORT, HD44780_D5_PIN, (cmd & 0x02));
 80069de:	79fb      	ldrb	r3, [r7, #7]
 80069e0:	f003 0302 	and.w	r3, r3, #2
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d003      	beq.n	80069f0 <TM_HD44780_Cmd4bit+0x54>
 80069e8:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 80069ea:	2210      	movs	r2, #16
 80069ec:	619a      	str	r2, [r3, #24]
 80069ee:	e003      	b.n	80069f8 <TM_HD44780_Cmd4bit+0x5c>
 80069f0:	4b11      	ldr	r3, [pc, #68]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 80069f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80069f6:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinValue(HD44780_D4_PORT, HD44780_D4_PIN, (cmd & 0x01));
 80069f8:	79fb      	ldrb	r3, [r7, #7]
 80069fa:	f003 0301 	and.w	r3, r3, #1
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d003      	beq.n	8006a0a <TM_HD44780_Cmd4bit+0x6e>
 8006a02:	4b0d      	ldr	r3, [pc, #52]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 8006a04:	2220      	movs	r2, #32
 8006a06:	619a      	str	r2, [r3, #24]
 8006a08:	e003      	b.n	8006a12 <TM_HD44780_Cmd4bit+0x76>
 8006a0a:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <TM_HD44780_Cmd4bit+0x9c>)
 8006a0c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006a10:	619a      	str	r2, [r3, #24]
	HD44780_E_BLINK;
 8006a12:	4b0a      	ldr	r3, [pc, #40]	; (8006a3c <TM_HD44780_Cmd4bit+0xa0>)
 8006a14:	2280      	movs	r2, #128	; 0x80
 8006a16:	619a      	str	r2, [r3, #24]
 8006a18:	2014      	movs	r0, #20
 8006a1a:	f7ff fe7f 	bl	800671c <Delay>
 8006a1e:	4b07      	ldr	r3, [pc, #28]	; (8006a3c <TM_HD44780_Cmd4bit+0xa0>)
 8006a20:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006a24:	619a      	str	r2, [r3, #24]
 8006a26:	2014      	movs	r0, #20
 8006a28:	f7ff fe78 	bl	800671c <Delay>
}
 8006a2c:	bf00      	nop
 8006a2e:	3708      	adds	r7, #8
 8006a30:	46bd      	mov	sp, r7
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	40020000 	.word	0x40020000
 8006a38:	40020400 	.word	0x40020400
 8006a3c:	40020800 	.word	0x40020800

08006a40 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b084      	sub	sp, #16
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	4603      	mov	r3, r0
 8006a48:	460a      	mov	r2, r1
 8006a4a:	71fb      	strb	r3, [r7, #7]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 8006a50:	4b12      	ldr	r3, [pc, #72]	; (8006a9c <TM_HD44780_CursorSet+0x5c>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 8006a56:	4b12      	ldr	r3, [pc, #72]	; (8006aa0 <TM_HD44780_CursorSet+0x60>)
 8006a58:	78db      	ldrb	r3, [r3, #3]
 8006a5a:	79ba      	ldrb	r2, [r7, #6]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d301      	bcc.n	8006a64 <TM_HD44780_CursorSet+0x24>
		row = 0;
 8006a60:	2300      	movs	r3, #0
 8006a62:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 8006a64:	4a0e      	ldr	r2, [pc, #56]	; (8006aa0 <TM_HD44780_CursorSet+0x60>)
 8006a66:	79fb      	ldrb	r3, [r7, #7]
 8006a68:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 8006a6a:	4a0d      	ldr	r2, [pc, #52]	; (8006aa0 <TM_HD44780_CursorSet+0x60>)
 8006a6c:	79bb      	ldrb	r3, [r7, #6]
 8006a6e:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 8006a70:	79bb      	ldrb	r3, [r7, #6]
 8006a72:	f107 0210 	add.w	r2, r7, #16
 8006a76:	4413      	add	r3, r2
 8006a78:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 8006a7c:	79fb      	ldrb	r3, [r7, #7]
 8006a7e:	4413      	add	r3, r2
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	b25b      	sxtb	r3, r3
 8006a84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006a88:	b25b      	sxtb	r3, r3
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	f7ff ff4d 	bl	800692c <TM_HD44780_Cmd>
}
 8006a92:	bf00      	nop
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
 8006a9a:	bf00      	nop
 8006a9c:	08007b14 	.word	0x08007b14
 8006aa0:	200040a0 	.word	0x200040a0

08006aa4 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b082      	sub	sp, #8
 8006aa8:	af02      	add	r7, sp, #8
	/* Init all pins */
	TM_GPIO_Init(HD44780_RS_PORT, HD44780_RS_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006aaa:	2300      	movs	r3, #0
 8006aac:	9301      	str	r3, [sp, #4]
 8006aae:	2300      	movs	r3, #0
 8006ab0:	9300      	str	r3, [sp, #0]
 8006ab2:	2300      	movs	r3, #0
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006aba:	4829      	ldr	r0, [pc, #164]	; (8006b60 <TM_HD44780_InitPins+0xbc>)
 8006abc:	f7ff fd5c 	bl	8006578 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_E_PORT, HD44780_E_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	9301      	str	r3, [sp, #4]
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	9300      	str	r3, [sp, #0]
 8006ac8:	2300      	movs	r3, #0
 8006aca:	2201      	movs	r2, #1
 8006acc:	2180      	movs	r1, #128	; 0x80
 8006ace:	4825      	ldr	r0, [pc, #148]	; (8006b64 <TM_HD44780_InitPins+0xc0>)
 8006ad0:	f7ff fd52 	bl	8006578 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D4_PORT, HD44780_D4_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	9301      	str	r3, [sp, #4]
 8006ad8:	2300      	movs	r3, #0
 8006ada:	9300      	str	r3, [sp, #0]
 8006adc:	2300      	movs	r3, #0
 8006ade:	2201      	movs	r2, #1
 8006ae0:	2120      	movs	r1, #32
 8006ae2:	4821      	ldr	r0, [pc, #132]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006ae4:	f7ff fd48 	bl	8006578 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D5_PORT, HD44780_D5_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006ae8:	2300      	movs	r3, #0
 8006aea:	9301      	str	r3, [sp, #4]
 8006aec:	2300      	movs	r3, #0
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	2300      	movs	r3, #0
 8006af2:	2201      	movs	r2, #1
 8006af4:	2110      	movs	r1, #16
 8006af6:	481c      	ldr	r0, [pc, #112]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006af8:	f7ff fd3e 	bl	8006578 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D6_PORT, HD44780_D6_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006afc:	2300      	movs	r3, #0
 8006afe:	9301      	str	r3, [sp, #4]
 8006b00:	2300      	movs	r3, #0
 8006b02:	9300      	str	r3, [sp, #0]
 8006b04:	2300      	movs	r3, #0
 8006b06:	2201      	movs	r2, #1
 8006b08:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006b0c:	4816      	ldr	r0, [pc, #88]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006b0e:	f7ff fd33 	bl	8006578 <TM_GPIO_Init>
	TM_GPIO_Init(HD44780_D7_PORT, HD44780_D7_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_NOPULL, TM_GPIO_Speed_Low);
 8006b12:	2300      	movs	r3, #0
 8006b14:	9301      	str	r3, [sp, #4]
 8006b16:	2300      	movs	r3, #0
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	2201      	movs	r2, #1
 8006b1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8006b22:	480f      	ldr	r0, [pc, #60]	; (8006b60 <TM_HD44780_InitPins+0xbc>)
 8006b24:	f7ff fd28 	bl	8006578 <TM_GPIO_Init>
	
	/* Set pins low */
	TM_GPIO_SetPinLow(HD44780_RS_PORT, HD44780_RS_PIN);
 8006b28:	4b0d      	ldr	r3, [pc, #52]	; (8006b60 <TM_HD44780_InitPins+0xbc>)
 8006b2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006b2e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_E_PORT, HD44780_E_PIN);
 8006b30:	4b0c      	ldr	r3, [pc, #48]	; (8006b64 <TM_HD44780_InitPins+0xc0>)
 8006b32:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8006b36:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D4_PORT, HD44780_D4_PIN);
 8006b38:	4b0b      	ldr	r3, [pc, #44]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006b3a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8006b3e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D5_PORT, HD44780_D5_PIN);
 8006b40:	4b09      	ldr	r3, [pc, #36]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006b42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006b46:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D6_PORT, HD44780_D6_PIN);
 8006b48:	4b07      	ldr	r3, [pc, #28]	; (8006b68 <TM_HD44780_InitPins+0xc4>)
 8006b4a:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006b4e:	619a      	str	r2, [r3, #24]
	TM_GPIO_SetPinLow(HD44780_D7_PORT, HD44780_D7_PIN);
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <TM_HD44780_InitPins+0xbc>)
 8006b52:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006b56:	619a      	str	r2, [r3, #24]
}
 8006b58:	bf00      	nop
 8006b5a:	46bd      	mov	sp, r7
 8006b5c:	bd80      	pop	{r7, pc}
 8006b5e:	bf00      	nop
 8006b60:	40020000 	.word	0x40020000
 8006b64:	40020800 	.word	0x40020800
 8006b68:	40020400 	.word	0x40020400

08006b6c <__errno>:
 8006b6c:	4b01      	ldr	r3, [pc, #4]	; (8006b74 <__errno+0x8>)
 8006b6e:	6818      	ldr	r0, [r3, #0]
 8006b70:	4770      	bx	lr
 8006b72:	bf00      	nop
 8006b74:	20000040 	.word	0x20000040

08006b78 <__libc_init_array>:
 8006b78:	b570      	push	{r4, r5, r6, lr}
 8006b7a:	4e0d      	ldr	r6, [pc, #52]	; (8006bb0 <__libc_init_array+0x38>)
 8006b7c:	4c0d      	ldr	r4, [pc, #52]	; (8006bb4 <__libc_init_array+0x3c>)
 8006b7e:	1ba4      	subs	r4, r4, r6
 8006b80:	10a4      	asrs	r4, r4, #2
 8006b82:	2500      	movs	r5, #0
 8006b84:	42a5      	cmp	r5, r4
 8006b86:	d109      	bne.n	8006b9c <__libc_init_array+0x24>
 8006b88:	4e0b      	ldr	r6, [pc, #44]	; (8006bb8 <__libc_init_array+0x40>)
 8006b8a:	4c0c      	ldr	r4, [pc, #48]	; (8006bbc <__libc_init_array+0x44>)
 8006b8c:	f000 ff10 	bl	80079b0 <_init>
 8006b90:	1ba4      	subs	r4, r4, r6
 8006b92:	10a4      	asrs	r4, r4, #2
 8006b94:	2500      	movs	r5, #0
 8006b96:	42a5      	cmp	r5, r4
 8006b98:	d105      	bne.n	8006ba6 <__libc_init_array+0x2e>
 8006b9a:	bd70      	pop	{r4, r5, r6, pc}
 8006b9c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006ba0:	4798      	blx	r3
 8006ba2:	3501      	adds	r5, #1
 8006ba4:	e7ee      	b.n	8006b84 <__libc_init_array+0xc>
 8006ba6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006baa:	4798      	blx	r3
 8006bac:	3501      	adds	r5, #1
 8006bae:	e7f2      	b.n	8006b96 <__libc_init_array+0x1e>
 8006bb0:	08007bd0 	.word	0x08007bd0
 8006bb4:	08007bd0 	.word	0x08007bd0
 8006bb8:	08007bd0 	.word	0x08007bd0
 8006bbc:	08007bd4 	.word	0x08007bd4

08006bc0 <memcpy>:
 8006bc0:	b510      	push	{r4, lr}
 8006bc2:	1e43      	subs	r3, r0, #1
 8006bc4:	440a      	add	r2, r1
 8006bc6:	4291      	cmp	r1, r2
 8006bc8:	d100      	bne.n	8006bcc <memcpy+0xc>
 8006bca:	bd10      	pop	{r4, pc}
 8006bcc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006bd0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006bd4:	e7f7      	b.n	8006bc6 <memcpy+0x6>

08006bd6 <memset>:
 8006bd6:	4402      	add	r2, r0
 8006bd8:	4603      	mov	r3, r0
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d100      	bne.n	8006be0 <memset+0xa>
 8006bde:	4770      	bx	lr
 8006be0:	f803 1b01 	strb.w	r1, [r3], #1
 8006be4:	e7f9      	b.n	8006bda <memset+0x4>
	...

08006be8 <_free_r>:
 8006be8:	b538      	push	{r3, r4, r5, lr}
 8006bea:	4605      	mov	r5, r0
 8006bec:	2900      	cmp	r1, #0
 8006bee:	d045      	beq.n	8006c7c <_free_r+0x94>
 8006bf0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006bf4:	1f0c      	subs	r4, r1, #4
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bfb8      	it	lt
 8006bfa:	18e4      	addlt	r4, r4, r3
 8006bfc:	f000 f98e 	bl	8006f1c <__malloc_lock>
 8006c00:	4a1f      	ldr	r2, [pc, #124]	; (8006c80 <_free_r+0x98>)
 8006c02:	6813      	ldr	r3, [r2, #0]
 8006c04:	4610      	mov	r0, r2
 8006c06:	b933      	cbnz	r3, 8006c16 <_free_r+0x2e>
 8006c08:	6063      	str	r3, [r4, #4]
 8006c0a:	6014      	str	r4, [r2, #0]
 8006c0c:	4628      	mov	r0, r5
 8006c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c12:	f000 b984 	b.w	8006f1e <__malloc_unlock>
 8006c16:	42a3      	cmp	r3, r4
 8006c18:	d90c      	bls.n	8006c34 <_free_r+0x4c>
 8006c1a:	6821      	ldr	r1, [r4, #0]
 8006c1c:	1862      	adds	r2, r4, r1
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	bf04      	itt	eq
 8006c22:	681a      	ldreq	r2, [r3, #0]
 8006c24:	685b      	ldreq	r3, [r3, #4]
 8006c26:	6063      	str	r3, [r4, #4]
 8006c28:	bf04      	itt	eq
 8006c2a:	1852      	addeq	r2, r2, r1
 8006c2c:	6022      	streq	r2, [r4, #0]
 8006c2e:	6004      	str	r4, [r0, #0]
 8006c30:	e7ec      	b.n	8006c0c <_free_r+0x24>
 8006c32:	4613      	mov	r3, r2
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	b10a      	cbz	r2, 8006c3c <_free_r+0x54>
 8006c38:	42a2      	cmp	r2, r4
 8006c3a:	d9fa      	bls.n	8006c32 <_free_r+0x4a>
 8006c3c:	6819      	ldr	r1, [r3, #0]
 8006c3e:	1858      	adds	r0, r3, r1
 8006c40:	42a0      	cmp	r0, r4
 8006c42:	d10b      	bne.n	8006c5c <_free_r+0x74>
 8006c44:	6820      	ldr	r0, [r4, #0]
 8006c46:	4401      	add	r1, r0
 8006c48:	1858      	adds	r0, r3, r1
 8006c4a:	4282      	cmp	r2, r0
 8006c4c:	6019      	str	r1, [r3, #0]
 8006c4e:	d1dd      	bne.n	8006c0c <_free_r+0x24>
 8006c50:	6810      	ldr	r0, [r2, #0]
 8006c52:	6852      	ldr	r2, [r2, #4]
 8006c54:	605a      	str	r2, [r3, #4]
 8006c56:	4401      	add	r1, r0
 8006c58:	6019      	str	r1, [r3, #0]
 8006c5a:	e7d7      	b.n	8006c0c <_free_r+0x24>
 8006c5c:	d902      	bls.n	8006c64 <_free_r+0x7c>
 8006c5e:	230c      	movs	r3, #12
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	e7d3      	b.n	8006c0c <_free_r+0x24>
 8006c64:	6820      	ldr	r0, [r4, #0]
 8006c66:	1821      	adds	r1, r4, r0
 8006c68:	428a      	cmp	r2, r1
 8006c6a:	bf04      	itt	eq
 8006c6c:	6811      	ldreq	r1, [r2, #0]
 8006c6e:	6852      	ldreq	r2, [r2, #4]
 8006c70:	6062      	str	r2, [r4, #4]
 8006c72:	bf04      	itt	eq
 8006c74:	1809      	addeq	r1, r1, r0
 8006c76:	6021      	streq	r1, [r4, #0]
 8006c78:	605c      	str	r4, [r3, #4]
 8006c7a:	e7c7      	b.n	8006c0c <_free_r+0x24>
 8006c7c:	bd38      	pop	{r3, r4, r5, pc}
 8006c7e:	bf00      	nop
 8006c80:	200040a8 	.word	0x200040a8

08006c84 <_malloc_r>:
 8006c84:	b570      	push	{r4, r5, r6, lr}
 8006c86:	1ccd      	adds	r5, r1, #3
 8006c88:	f025 0503 	bic.w	r5, r5, #3
 8006c8c:	3508      	adds	r5, #8
 8006c8e:	2d0c      	cmp	r5, #12
 8006c90:	bf38      	it	cc
 8006c92:	250c      	movcc	r5, #12
 8006c94:	2d00      	cmp	r5, #0
 8006c96:	4606      	mov	r6, r0
 8006c98:	db01      	blt.n	8006c9e <_malloc_r+0x1a>
 8006c9a:	42a9      	cmp	r1, r5
 8006c9c:	d903      	bls.n	8006ca6 <_malloc_r+0x22>
 8006c9e:	230c      	movs	r3, #12
 8006ca0:	6033      	str	r3, [r6, #0]
 8006ca2:	2000      	movs	r0, #0
 8006ca4:	bd70      	pop	{r4, r5, r6, pc}
 8006ca6:	f000 f939 	bl	8006f1c <__malloc_lock>
 8006caa:	4a21      	ldr	r2, [pc, #132]	; (8006d30 <_malloc_r+0xac>)
 8006cac:	6814      	ldr	r4, [r2, #0]
 8006cae:	4621      	mov	r1, r4
 8006cb0:	b991      	cbnz	r1, 8006cd8 <_malloc_r+0x54>
 8006cb2:	4c20      	ldr	r4, [pc, #128]	; (8006d34 <_malloc_r+0xb0>)
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	b91b      	cbnz	r3, 8006cc0 <_malloc_r+0x3c>
 8006cb8:	4630      	mov	r0, r6
 8006cba:	f000 f855 	bl	8006d68 <_sbrk_r>
 8006cbe:	6020      	str	r0, [r4, #0]
 8006cc0:	4629      	mov	r1, r5
 8006cc2:	4630      	mov	r0, r6
 8006cc4:	f000 f850 	bl	8006d68 <_sbrk_r>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d124      	bne.n	8006d16 <_malloc_r+0x92>
 8006ccc:	230c      	movs	r3, #12
 8006cce:	6033      	str	r3, [r6, #0]
 8006cd0:	4630      	mov	r0, r6
 8006cd2:	f000 f924 	bl	8006f1e <__malloc_unlock>
 8006cd6:	e7e4      	b.n	8006ca2 <_malloc_r+0x1e>
 8006cd8:	680b      	ldr	r3, [r1, #0]
 8006cda:	1b5b      	subs	r3, r3, r5
 8006cdc:	d418      	bmi.n	8006d10 <_malloc_r+0x8c>
 8006cde:	2b0b      	cmp	r3, #11
 8006ce0:	d90f      	bls.n	8006d02 <_malloc_r+0x7e>
 8006ce2:	600b      	str	r3, [r1, #0]
 8006ce4:	50cd      	str	r5, [r1, r3]
 8006ce6:	18cc      	adds	r4, r1, r3
 8006ce8:	4630      	mov	r0, r6
 8006cea:	f000 f918 	bl	8006f1e <__malloc_unlock>
 8006cee:	f104 000b 	add.w	r0, r4, #11
 8006cf2:	1d23      	adds	r3, r4, #4
 8006cf4:	f020 0007 	bic.w	r0, r0, #7
 8006cf8:	1ac3      	subs	r3, r0, r3
 8006cfa:	d0d3      	beq.n	8006ca4 <_malloc_r+0x20>
 8006cfc:	425a      	negs	r2, r3
 8006cfe:	50e2      	str	r2, [r4, r3]
 8006d00:	e7d0      	b.n	8006ca4 <_malloc_r+0x20>
 8006d02:	428c      	cmp	r4, r1
 8006d04:	684b      	ldr	r3, [r1, #4]
 8006d06:	bf16      	itet	ne
 8006d08:	6063      	strne	r3, [r4, #4]
 8006d0a:	6013      	streq	r3, [r2, #0]
 8006d0c:	460c      	movne	r4, r1
 8006d0e:	e7eb      	b.n	8006ce8 <_malloc_r+0x64>
 8006d10:	460c      	mov	r4, r1
 8006d12:	6849      	ldr	r1, [r1, #4]
 8006d14:	e7cc      	b.n	8006cb0 <_malloc_r+0x2c>
 8006d16:	1cc4      	adds	r4, r0, #3
 8006d18:	f024 0403 	bic.w	r4, r4, #3
 8006d1c:	42a0      	cmp	r0, r4
 8006d1e:	d005      	beq.n	8006d2c <_malloc_r+0xa8>
 8006d20:	1a21      	subs	r1, r4, r0
 8006d22:	4630      	mov	r0, r6
 8006d24:	f000 f820 	bl	8006d68 <_sbrk_r>
 8006d28:	3001      	adds	r0, #1
 8006d2a:	d0cf      	beq.n	8006ccc <_malloc_r+0x48>
 8006d2c:	6025      	str	r5, [r4, #0]
 8006d2e:	e7db      	b.n	8006ce8 <_malloc_r+0x64>
 8006d30:	200040a8 	.word	0x200040a8
 8006d34:	200040ac 	.word	0x200040ac

08006d38 <iprintf>:
 8006d38:	b40f      	push	{r0, r1, r2, r3}
 8006d3a:	4b0a      	ldr	r3, [pc, #40]	; (8006d64 <iprintf+0x2c>)
 8006d3c:	b513      	push	{r0, r1, r4, lr}
 8006d3e:	681c      	ldr	r4, [r3, #0]
 8006d40:	b124      	cbz	r4, 8006d4c <iprintf+0x14>
 8006d42:	69a3      	ldr	r3, [r4, #24]
 8006d44:	b913      	cbnz	r3, 8006d4c <iprintf+0x14>
 8006d46:	4620      	mov	r0, r4
 8006d48:	f000 f85e 	bl	8006e08 <__sinit>
 8006d4c:	ab05      	add	r3, sp, #20
 8006d4e:	9a04      	ldr	r2, [sp, #16]
 8006d50:	68a1      	ldr	r1, [r4, #8]
 8006d52:	9301      	str	r3, [sp, #4]
 8006d54:	4620      	mov	r0, r4
 8006d56:	f000 f90d 	bl	8006f74 <_vfiprintf_r>
 8006d5a:	b002      	add	sp, #8
 8006d5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d60:	b004      	add	sp, #16
 8006d62:	4770      	bx	lr
 8006d64:	20000040 	.word	0x20000040

08006d68 <_sbrk_r>:
 8006d68:	b538      	push	{r3, r4, r5, lr}
 8006d6a:	4c06      	ldr	r4, [pc, #24]	; (8006d84 <_sbrk_r+0x1c>)
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	4605      	mov	r5, r0
 8006d70:	4608      	mov	r0, r1
 8006d72:	6023      	str	r3, [r4, #0]
 8006d74:	f7fa f970 	bl	8001058 <_sbrk>
 8006d78:	1c43      	adds	r3, r0, #1
 8006d7a:	d102      	bne.n	8006d82 <_sbrk_r+0x1a>
 8006d7c:	6823      	ldr	r3, [r4, #0]
 8006d7e:	b103      	cbz	r3, 8006d82 <_sbrk_r+0x1a>
 8006d80:	602b      	str	r3, [r5, #0]
 8006d82:	bd38      	pop	{r3, r4, r5, pc}
 8006d84:	2000418c 	.word	0x2000418c

08006d88 <std>:
 8006d88:	2300      	movs	r3, #0
 8006d8a:	b510      	push	{r4, lr}
 8006d8c:	4604      	mov	r4, r0
 8006d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006d92:	6083      	str	r3, [r0, #8]
 8006d94:	8181      	strh	r1, [r0, #12]
 8006d96:	6643      	str	r3, [r0, #100]	; 0x64
 8006d98:	81c2      	strh	r2, [r0, #14]
 8006d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d9e:	6183      	str	r3, [r0, #24]
 8006da0:	4619      	mov	r1, r3
 8006da2:	2208      	movs	r2, #8
 8006da4:	305c      	adds	r0, #92	; 0x5c
 8006da6:	f7ff ff16 	bl	8006bd6 <memset>
 8006daa:	4b05      	ldr	r3, [pc, #20]	; (8006dc0 <std+0x38>)
 8006dac:	6263      	str	r3, [r4, #36]	; 0x24
 8006dae:	4b05      	ldr	r3, [pc, #20]	; (8006dc4 <std+0x3c>)
 8006db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006db2:	4b05      	ldr	r3, [pc, #20]	; (8006dc8 <std+0x40>)
 8006db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006db6:	4b05      	ldr	r3, [pc, #20]	; (8006dcc <std+0x44>)
 8006db8:	6224      	str	r4, [r4, #32]
 8006dba:	6323      	str	r3, [r4, #48]	; 0x30
 8006dbc:	bd10      	pop	{r4, pc}
 8006dbe:	bf00      	nop
 8006dc0:	080074b1 	.word	0x080074b1
 8006dc4:	080074d3 	.word	0x080074d3
 8006dc8:	0800750b 	.word	0x0800750b
 8006dcc:	0800752f 	.word	0x0800752f

08006dd0 <_cleanup_r>:
 8006dd0:	4901      	ldr	r1, [pc, #4]	; (8006dd8 <_cleanup_r+0x8>)
 8006dd2:	f000 b885 	b.w	8006ee0 <_fwalk_reent>
 8006dd6:	bf00      	nop
 8006dd8:	08007809 	.word	0x08007809

08006ddc <__sfmoreglue>:
 8006ddc:	b570      	push	{r4, r5, r6, lr}
 8006dde:	1e4a      	subs	r2, r1, #1
 8006de0:	2568      	movs	r5, #104	; 0x68
 8006de2:	4355      	muls	r5, r2
 8006de4:	460e      	mov	r6, r1
 8006de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006dea:	f7ff ff4b 	bl	8006c84 <_malloc_r>
 8006dee:	4604      	mov	r4, r0
 8006df0:	b140      	cbz	r0, 8006e04 <__sfmoreglue+0x28>
 8006df2:	2100      	movs	r1, #0
 8006df4:	e9c0 1600 	strd	r1, r6, [r0]
 8006df8:	300c      	adds	r0, #12
 8006dfa:	60a0      	str	r0, [r4, #8]
 8006dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006e00:	f7ff fee9 	bl	8006bd6 <memset>
 8006e04:	4620      	mov	r0, r4
 8006e06:	bd70      	pop	{r4, r5, r6, pc}

08006e08 <__sinit>:
 8006e08:	6983      	ldr	r3, [r0, #24]
 8006e0a:	b510      	push	{r4, lr}
 8006e0c:	4604      	mov	r4, r0
 8006e0e:	bb33      	cbnz	r3, 8006e5e <__sinit+0x56>
 8006e10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8006e14:	6503      	str	r3, [r0, #80]	; 0x50
 8006e16:	4b12      	ldr	r3, [pc, #72]	; (8006e60 <__sinit+0x58>)
 8006e18:	4a12      	ldr	r2, [pc, #72]	; (8006e64 <__sinit+0x5c>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6282      	str	r2, [r0, #40]	; 0x28
 8006e1e:	4298      	cmp	r0, r3
 8006e20:	bf04      	itt	eq
 8006e22:	2301      	moveq	r3, #1
 8006e24:	6183      	streq	r3, [r0, #24]
 8006e26:	f000 f81f 	bl	8006e68 <__sfp>
 8006e2a:	6060      	str	r0, [r4, #4]
 8006e2c:	4620      	mov	r0, r4
 8006e2e:	f000 f81b 	bl	8006e68 <__sfp>
 8006e32:	60a0      	str	r0, [r4, #8]
 8006e34:	4620      	mov	r0, r4
 8006e36:	f000 f817 	bl	8006e68 <__sfp>
 8006e3a:	2200      	movs	r2, #0
 8006e3c:	60e0      	str	r0, [r4, #12]
 8006e3e:	2104      	movs	r1, #4
 8006e40:	6860      	ldr	r0, [r4, #4]
 8006e42:	f7ff ffa1 	bl	8006d88 <std>
 8006e46:	2201      	movs	r2, #1
 8006e48:	2109      	movs	r1, #9
 8006e4a:	68a0      	ldr	r0, [r4, #8]
 8006e4c:	f7ff ff9c 	bl	8006d88 <std>
 8006e50:	2202      	movs	r2, #2
 8006e52:	2112      	movs	r1, #18
 8006e54:	68e0      	ldr	r0, [r4, #12]
 8006e56:	f7ff ff97 	bl	8006d88 <std>
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	61a3      	str	r3, [r4, #24]
 8006e5e:	bd10      	pop	{r4, pc}
 8006e60:	08007b30 	.word	0x08007b30
 8006e64:	08006dd1 	.word	0x08006dd1

08006e68 <__sfp>:
 8006e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e6a:	4b1b      	ldr	r3, [pc, #108]	; (8006ed8 <__sfp+0x70>)
 8006e6c:	681e      	ldr	r6, [r3, #0]
 8006e6e:	69b3      	ldr	r3, [r6, #24]
 8006e70:	4607      	mov	r7, r0
 8006e72:	b913      	cbnz	r3, 8006e7a <__sfp+0x12>
 8006e74:	4630      	mov	r0, r6
 8006e76:	f7ff ffc7 	bl	8006e08 <__sinit>
 8006e7a:	3648      	adds	r6, #72	; 0x48
 8006e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e80:	3b01      	subs	r3, #1
 8006e82:	d503      	bpl.n	8006e8c <__sfp+0x24>
 8006e84:	6833      	ldr	r3, [r6, #0]
 8006e86:	b133      	cbz	r3, 8006e96 <__sfp+0x2e>
 8006e88:	6836      	ldr	r6, [r6, #0]
 8006e8a:	e7f7      	b.n	8006e7c <__sfp+0x14>
 8006e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e90:	b16d      	cbz	r5, 8006eae <__sfp+0x46>
 8006e92:	3468      	adds	r4, #104	; 0x68
 8006e94:	e7f4      	b.n	8006e80 <__sfp+0x18>
 8006e96:	2104      	movs	r1, #4
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f7ff ff9f 	bl	8006ddc <__sfmoreglue>
 8006e9e:	6030      	str	r0, [r6, #0]
 8006ea0:	2800      	cmp	r0, #0
 8006ea2:	d1f1      	bne.n	8006e88 <__sfp+0x20>
 8006ea4:	230c      	movs	r3, #12
 8006ea6:	603b      	str	r3, [r7, #0]
 8006ea8:	4604      	mov	r4, r0
 8006eaa:	4620      	mov	r0, r4
 8006eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eae:	4b0b      	ldr	r3, [pc, #44]	; (8006edc <__sfp+0x74>)
 8006eb0:	6665      	str	r5, [r4, #100]	; 0x64
 8006eb2:	e9c4 5500 	strd	r5, r5, [r4]
 8006eb6:	60a5      	str	r5, [r4, #8]
 8006eb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006ebc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8006ec0:	2208      	movs	r2, #8
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006ec8:	f7ff fe85 	bl	8006bd6 <memset>
 8006ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006ed4:	e7e9      	b.n	8006eaa <__sfp+0x42>
 8006ed6:	bf00      	nop
 8006ed8:	08007b30 	.word	0x08007b30
 8006edc:	ffff0001 	.word	0xffff0001

08006ee0 <_fwalk_reent>:
 8006ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ee4:	4680      	mov	r8, r0
 8006ee6:	4689      	mov	r9, r1
 8006ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eec:	2600      	movs	r6, #0
 8006eee:	b914      	cbnz	r4, 8006ef6 <_fwalk_reent+0x16>
 8006ef0:	4630      	mov	r0, r6
 8006ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ef6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8006efa:	3f01      	subs	r7, #1
 8006efc:	d501      	bpl.n	8006f02 <_fwalk_reent+0x22>
 8006efe:	6824      	ldr	r4, [r4, #0]
 8006f00:	e7f5      	b.n	8006eee <_fwalk_reent+0xe>
 8006f02:	89ab      	ldrh	r3, [r5, #12]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d907      	bls.n	8006f18 <_fwalk_reent+0x38>
 8006f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006f0c:	3301      	adds	r3, #1
 8006f0e:	d003      	beq.n	8006f18 <_fwalk_reent+0x38>
 8006f10:	4629      	mov	r1, r5
 8006f12:	4640      	mov	r0, r8
 8006f14:	47c8      	blx	r9
 8006f16:	4306      	orrs	r6, r0
 8006f18:	3568      	adds	r5, #104	; 0x68
 8006f1a:	e7ee      	b.n	8006efa <_fwalk_reent+0x1a>

08006f1c <__malloc_lock>:
 8006f1c:	4770      	bx	lr

08006f1e <__malloc_unlock>:
 8006f1e:	4770      	bx	lr

08006f20 <__sfputc_r>:
 8006f20:	6893      	ldr	r3, [r2, #8]
 8006f22:	3b01      	subs	r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	b410      	push	{r4}
 8006f28:	6093      	str	r3, [r2, #8]
 8006f2a:	da08      	bge.n	8006f3e <__sfputc_r+0x1e>
 8006f2c:	6994      	ldr	r4, [r2, #24]
 8006f2e:	42a3      	cmp	r3, r4
 8006f30:	db01      	blt.n	8006f36 <__sfputc_r+0x16>
 8006f32:	290a      	cmp	r1, #10
 8006f34:	d103      	bne.n	8006f3e <__sfputc_r+0x1e>
 8006f36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f3a:	f000 bafd 	b.w	8007538 <__swbuf_r>
 8006f3e:	6813      	ldr	r3, [r2, #0]
 8006f40:	1c58      	adds	r0, r3, #1
 8006f42:	6010      	str	r0, [r2, #0]
 8006f44:	7019      	strb	r1, [r3, #0]
 8006f46:	4608      	mov	r0, r1
 8006f48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <__sfputs_r>:
 8006f4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f50:	4606      	mov	r6, r0
 8006f52:	460f      	mov	r7, r1
 8006f54:	4614      	mov	r4, r2
 8006f56:	18d5      	adds	r5, r2, r3
 8006f58:	42ac      	cmp	r4, r5
 8006f5a:	d101      	bne.n	8006f60 <__sfputs_r+0x12>
 8006f5c:	2000      	movs	r0, #0
 8006f5e:	e007      	b.n	8006f70 <__sfputs_r+0x22>
 8006f60:	463a      	mov	r2, r7
 8006f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f66:	4630      	mov	r0, r6
 8006f68:	f7ff ffda 	bl	8006f20 <__sfputc_r>
 8006f6c:	1c43      	adds	r3, r0, #1
 8006f6e:	d1f3      	bne.n	8006f58 <__sfputs_r+0xa>
 8006f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006f74 <_vfiprintf_r>:
 8006f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f78:	460c      	mov	r4, r1
 8006f7a:	b09d      	sub	sp, #116	; 0x74
 8006f7c:	4617      	mov	r7, r2
 8006f7e:	461d      	mov	r5, r3
 8006f80:	4606      	mov	r6, r0
 8006f82:	b118      	cbz	r0, 8006f8c <_vfiprintf_r+0x18>
 8006f84:	6983      	ldr	r3, [r0, #24]
 8006f86:	b90b      	cbnz	r3, 8006f8c <_vfiprintf_r+0x18>
 8006f88:	f7ff ff3e 	bl	8006e08 <__sinit>
 8006f8c:	4b7c      	ldr	r3, [pc, #496]	; (8007180 <_vfiprintf_r+0x20c>)
 8006f8e:	429c      	cmp	r4, r3
 8006f90:	d158      	bne.n	8007044 <_vfiprintf_r+0xd0>
 8006f92:	6874      	ldr	r4, [r6, #4]
 8006f94:	89a3      	ldrh	r3, [r4, #12]
 8006f96:	0718      	lsls	r0, r3, #28
 8006f98:	d55e      	bpl.n	8007058 <_vfiprintf_r+0xe4>
 8006f9a:	6923      	ldr	r3, [r4, #16]
 8006f9c:	2b00      	cmp	r3, #0
 8006f9e:	d05b      	beq.n	8007058 <_vfiprintf_r+0xe4>
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	9309      	str	r3, [sp, #36]	; 0x24
 8006fa4:	2320      	movs	r3, #32
 8006fa6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006faa:	2330      	movs	r3, #48	; 0x30
 8006fac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006fb0:	9503      	str	r5, [sp, #12]
 8006fb2:	f04f 0b01 	mov.w	fp, #1
 8006fb6:	46b8      	mov	r8, r7
 8006fb8:	4645      	mov	r5, r8
 8006fba:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006fbe:	b10b      	cbz	r3, 8006fc4 <_vfiprintf_r+0x50>
 8006fc0:	2b25      	cmp	r3, #37	; 0x25
 8006fc2:	d154      	bne.n	800706e <_vfiprintf_r+0xfa>
 8006fc4:	ebb8 0a07 	subs.w	sl, r8, r7
 8006fc8:	d00b      	beq.n	8006fe2 <_vfiprintf_r+0x6e>
 8006fca:	4653      	mov	r3, sl
 8006fcc:	463a      	mov	r2, r7
 8006fce:	4621      	mov	r1, r4
 8006fd0:	4630      	mov	r0, r6
 8006fd2:	f7ff ffbc 	bl	8006f4e <__sfputs_r>
 8006fd6:	3001      	adds	r0, #1
 8006fd8:	f000 80c2 	beq.w	8007160 <_vfiprintf_r+0x1ec>
 8006fdc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fde:	4453      	add	r3, sl
 8006fe0:	9309      	str	r3, [sp, #36]	; 0x24
 8006fe2:	f898 3000 	ldrb.w	r3, [r8]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	f000 80ba 	beq.w	8007160 <_vfiprintf_r+0x1ec>
 8006fec:	2300      	movs	r3, #0
 8006fee:	f04f 32ff 	mov.w	r2, #4294967295
 8006ff2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ff6:	9304      	str	r3, [sp, #16]
 8006ff8:	9307      	str	r3, [sp, #28]
 8006ffa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ffe:	931a      	str	r3, [sp, #104]	; 0x68
 8007000:	46a8      	mov	r8, r5
 8007002:	2205      	movs	r2, #5
 8007004:	f818 1b01 	ldrb.w	r1, [r8], #1
 8007008:	485e      	ldr	r0, [pc, #376]	; (8007184 <_vfiprintf_r+0x210>)
 800700a:	f7f9 f909 	bl	8000220 <memchr>
 800700e:	9b04      	ldr	r3, [sp, #16]
 8007010:	bb78      	cbnz	r0, 8007072 <_vfiprintf_r+0xfe>
 8007012:	06d9      	lsls	r1, r3, #27
 8007014:	bf44      	itt	mi
 8007016:	2220      	movmi	r2, #32
 8007018:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800701c:	071a      	lsls	r2, r3, #28
 800701e:	bf44      	itt	mi
 8007020:	222b      	movmi	r2, #43	; 0x2b
 8007022:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8007026:	782a      	ldrb	r2, [r5, #0]
 8007028:	2a2a      	cmp	r2, #42	; 0x2a
 800702a:	d02a      	beq.n	8007082 <_vfiprintf_r+0x10e>
 800702c:	9a07      	ldr	r2, [sp, #28]
 800702e:	46a8      	mov	r8, r5
 8007030:	2000      	movs	r0, #0
 8007032:	250a      	movs	r5, #10
 8007034:	4641      	mov	r1, r8
 8007036:	f811 3b01 	ldrb.w	r3, [r1], #1
 800703a:	3b30      	subs	r3, #48	; 0x30
 800703c:	2b09      	cmp	r3, #9
 800703e:	d969      	bls.n	8007114 <_vfiprintf_r+0x1a0>
 8007040:	b360      	cbz	r0, 800709c <_vfiprintf_r+0x128>
 8007042:	e024      	b.n	800708e <_vfiprintf_r+0x11a>
 8007044:	4b50      	ldr	r3, [pc, #320]	; (8007188 <_vfiprintf_r+0x214>)
 8007046:	429c      	cmp	r4, r3
 8007048:	d101      	bne.n	800704e <_vfiprintf_r+0xda>
 800704a:	68b4      	ldr	r4, [r6, #8]
 800704c:	e7a2      	b.n	8006f94 <_vfiprintf_r+0x20>
 800704e:	4b4f      	ldr	r3, [pc, #316]	; (800718c <_vfiprintf_r+0x218>)
 8007050:	429c      	cmp	r4, r3
 8007052:	bf08      	it	eq
 8007054:	68f4      	ldreq	r4, [r6, #12]
 8007056:	e79d      	b.n	8006f94 <_vfiprintf_r+0x20>
 8007058:	4621      	mov	r1, r4
 800705a:	4630      	mov	r0, r6
 800705c:	f000 fad0 	bl	8007600 <__swsetup_r>
 8007060:	2800      	cmp	r0, #0
 8007062:	d09d      	beq.n	8006fa0 <_vfiprintf_r+0x2c>
 8007064:	f04f 30ff 	mov.w	r0, #4294967295
 8007068:	b01d      	add	sp, #116	; 0x74
 800706a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800706e:	46a8      	mov	r8, r5
 8007070:	e7a2      	b.n	8006fb8 <_vfiprintf_r+0x44>
 8007072:	4a44      	ldr	r2, [pc, #272]	; (8007184 <_vfiprintf_r+0x210>)
 8007074:	1a80      	subs	r0, r0, r2
 8007076:	fa0b f000 	lsl.w	r0, fp, r0
 800707a:	4318      	orrs	r0, r3
 800707c:	9004      	str	r0, [sp, #16]
 800707e:	4645      	mov	r5, r8
 8007080:	e7be      	b.n	8007000 <_vfiprintf_r+0x8c>
 8007082:	9a03      	ldr	r2, [sp, #12]
 8007084:	1d11      	adds	r1, r2, #4
 8007086:	6812      	ldr	r2, [r2, #0]
 8007088:	9103      	str	r1, [sp, #12]
 800708a:	2a00      	cmp	r2, #0
 800708c:	db01      	blt.n	8007092 <_vfiprintf_r+0x11e>
 800708e:	9207      	str	r2, [sp, #28]
 8007090:	e004      	b.n	800709c <_vfiprintf_r+0x128>
 8007092:	4252      	negs	r2, r2
 8007094:	f043 0302 	orr.w	r3, r3, #2
 8007098:	9207      	str	r2, [sp, #28]
 800709a:	9304      	str	r3, [sp, #16]
 800709c:	f898 3000 	ldrb.w	r3, [r8]
 80070a0:	2b2e      	cmp	r3, #46	; 0x2e
 80070a2:	d10e      	bne.n	80070c2 <_vfiprintf_r+0x14e>
 80070a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80070a8:	2b2a      	cmp	r3, #42	; 0x2a
 80070aa:	d138      	bne.n	800711e <_vfiprintf_r+0x1aa>
 80070ac:	9b03      	ldr	r3, [sp, #12]
 80070ae:	1d1a      	adds	r2, r3, #4
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	9203      	str	r2, [sp, #12]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	bfb8      	it	lt
 80070b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80070bc:	f108 0802 	add.w	r8, r8, #2
 80070c0:	9305      	str	r3, [sp, #20]
 80070c2:	4d33      	ldr	r5, [pc, #204]	; (8007190 <_vfiprintf_r+0x21c>)
 80070c4:	f898 1000 	ldrb.w	r1, [r8]
 80070c8:	2203      	movs	r2, #3
 80070ca:	4628      	mov	r0, r5
 80070cc:	f7f9 f8a8 	bl	8000220 <memchr>
 80070d0:	b140      	cbz	r0, 80070e4 <_vfiprintf_r+0x170>
 80070d2:	2340      	movs	r3, #64	; 0x40
 80070d4:	1b40      	subs	r0, r0, r5
 80070d6:	fa03 f000 	lsl.w	r0, r3, r0
 80070da:	9b04      	ldr	r3, [sp, #16]
 80070dc:	4303      	orrs	r3, r0
 80070de:	f108 0801 	add.w	r8, r8, #1
 80070e2:	9304      	str	r3, [sp, #16]
 80070e4:	f898 1000 	ldrb.w	r1, [r8]
 80070e8:	482a      	ldr	r0, [pc, #168]	; (8007194 <_vfiprintf_r+0x220>)
 80070ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80070ee:	2206      	movs	r2, #6
 80070f0:	f108 0701 	add.w	r7, r8, #1
 80070f4:	f7f9 f894 	bl	8000220 <memchr>
 80070f8:	2800      	cmp	r0, #0
 80070fa:	d037      	beq.n	800716c <_vfiprintf_r+0x1f8>
 80070fc:	4b26      	ldr	r3, [pc, #152]	; (8007198 <_vfiprintf_r+0x224>)
 80070fe:	bb1b      	cbnz	r3, 8007148 <_vfiprintf_r+0x1d4>
 8007100:	9b03      	ldr	r3, [sp, #12]
 8007102:	3307      	adds	r3, #7
 8007104:	f023 0307 	bic.w	r3, r3, #7
 8007108:	3308      	adds	r3, #8
 800710a:	9303      	str	r3, [sp, #12]
 800710c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800710e:	444b      	add	r3, r9
 8007110:	9309      	str	r3, [sp, #36]	; 0x24
 8007112:	e750      	b.n	8006fb6 <_vfiprintf_r+0x42>
 8007114:	fb05 3202 	mla	r2, r5, r2, r3
 8007118:	2001      	movs	r0, #1
 800711a:	4688      	mov	r8, r1
 800711c:	e78a      	b.n	8007034 <_vfiprintf_r+0xc0>
 800711e:	2300      	movs	r3, #0
 8007120:	f108 0801 	add.w	r8, r8, #1
 8007124:	9305      	str	r3, [sp, #20]
 8007126:	4619      	mov	r1, r3
 8007128:	250a      	movs	r5, #10
 800712a:	4640      	mov	r0, r8
 800712c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007130:	3a30      	subs	r2, #48	; 0x30
 8007132:	2a09      	cmp	r2, #9
 8007134:	d903      	bls.n	800713e <_vfiprintf_r+0x1ca>
 8007136:	2b00      	cmp	r3, #0
 8007138:	d0c3      	beq.n	80070c2 <_vfiprintf_r+0x14e>
 800713a:	9105      	str	r1, [sp, #20]
 800713c:	e7c1      	b.n	80070c2 <_vfiprintf_r+0x14e>
 800713e:	fb05 2101 	mla	r1, r5, r1, r2
 8007142:	2301      	movs	r3, #1
 8007144:	4680      	mov	r8, r0
 8007146:	e7f0      	b.n	800712a <_vfiprintf_r+0x1b6>
 8007148:	ab03      	add	r3, sp, #12
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	4622      	mov	r2, r4
 800714e:	4b13      	ldr	r3, [pc, #76]	; (800719c <_vfiprintf_r+0x228>)
 8007150:	a904      	add	r1, sp, #16
 8007152:	4630      	mov	r0, r6
 8007154:	f3af 8000 	nop.w
 8007158:	f1b0 3fff 	cmp.w	r0, #4294967295
 800715c:	4681      	mov	r9, r0
 800715e:	d1d5      	bne.n	800710c <_vfiprintf_r+0x198>
 8007160:	89a3      	ldrh	r3, [r4, #12]
 8007162:	065b      	lsls	r3, r3, #25
 8007164:	f53f af7e 	bmi.w	8007064 <_vfiprintf_r+0xf0>
 8007168:	9809      	ldr	r0, [sp, #36]	; 0x24
 800716a:	e77d      	b.n	8007068 <_vfiprintf_r+0xf4>
 800716c:	ab03      	add	r3, sp, #12
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	4622      	mov	r2, r4
 8007172:	4b0a      	ldr	r3, [pc, #40]	; (800719c <_vfiprintf_r+0x228>)
 8007174:	a904      	add	r1, sp, #16
 8007176:	4630      	mov	r0, r6
 8007178:	f000 f888 	bl	800728c <_printf_i>
 800717c:	e7ec      	b.n	8007158 <_vfiprintf_r+0x1e4>
 800717e:	bf00      	nop
 8007180:	08007b54 	.word	0x08007b54
 8007184:	08007b94 	.word	0x08007b94
 8007188:	08007b74 	.word	0x08007b74
 800718c:	08007b34 	.word	0x08007b34
 8007190:	08007b9a 	.word	0x08007b9a
 8007194:	08007b9e 	.word	0x08007b9e
 8007198:	00000000 	.word	0x00000000
 800719c:	08006f4f 	.word	0x08006f4f

080071a0 <_printf_common>:
 80071a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071a4:	4691      	mov	r9, r2
 80071a6:	461f      	mov	r7, r3
 80071a8:	688a      	ldr	r2, [r1, #8]
 80071aa:	690b      	ldr	r3, [r1, #16]
 80071ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80071b0:	4293      	cmp	r3, r2
 80071b2:	bfb8      	it	lt
 80071b4:	4613      	movlt	r3, r2
 80071b6:	f8c9 3000 	str.w	r3, [r9]
 80071ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80071be:	4606      	mov	r6, r0
 80071c0:	460c      	mov	r4, r1
 80071c2:	b112      	cbz	r2, 80071ca <_printf_common+0x2a>
 80071c4:	3301      	adds	r3, #1
 80071c6:	f8c9 3000 	str.w	r3, [r9]
 80071ca:	6823      	ldr	r3, [r4, #0]
 80071cc:	0699      	lsls	r1, r3, #26
 80071ce:	bf42      	ittt	mi
 80071d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80071d4:	3302      	addmi	r3, #2
 80071d6:	f8c9 3000 	strmi.w	r3, [r9]
 80071da:	6825      	ldr	r5, [r4, #0]
 80071dc:	f015 0506 	ands.w	r5, r5, #6
 80071e0:	d107      	bne.n	80071f2 <_printf_common+0x52>
 80071e2:	f104 0a19 	add.w	sl, r4, #25
 80071e6:	68e3      	ldr	r3, [r4, #12]
 80071e8:	f8d9 2000 	ldr.w	r2, [r9]
 80071ec:	1a9b      	subs	r3, r3, r2
 80071ee:	42ab      	cmp	r3, r5
 80071f0:	dc28      	bgt.n	8007244 <_printf_common+0xa4>
 80071f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80071f6:	6822      	ldr	r2, [r4, #0]
 80071f8:	3300      	adds	r3, #0
 80071fa:	bf18      	it	ne
 80071fc:	2301      	movne	r3, #1
 80071fe:	0692      	lsls	r2, r2, #26
 8007200:	d42d      	bmi.n	800725e <_printf_common+0xbe>
 8007202:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007206:	4639      	mov	r1, r7
 8007208:	4630      	mov	r0, r6
 800720a:	47c0      	blx	r8
 800720c:	3001      	adds	r0, #1
 800720e:	d020      	beq.n	8007252 <_printf_common+0xb2>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	68e5      	ldr	r5, [r4, #12]
 8007214:	f8d9 2000 	ldr.w	r2, [r9]
 8007218:	f003 0306 	and.w	r3, r3, #6
 800721c:	2b04      	cmp	r3, #4
 800721e:	bf08      	it	eq
 8007220:	1aad      	subeq	r5, r5, r2
 8007222:	68a3      	ldr	r3, [r4, #8]
 8007224:	6922      	ldr	r2, [r4, #16]
 8007226:	bf0c      	ite	eq
 8007228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800722c:	2500      	movne	r5, #0
 800722e:	4293      	cmp	r3, r2
 8007230:	bfc4      	itt	gt
 8007232:	1a9b      	subgt	r3, r3, r2
 8007234:	18ed      	addgt	r5, r5, r3
 8007236:	f04f 0900 	mov.w	r9, #0
 800723a:	341a      	adds	r4, #26
 800723c:	454d      	cmp	r5, r9
 800723e:	d11a      	bne.n	8007276 <_printf_common+0xd6>
 8007240:	2000      	movs	r0, #0
 8007242:	e008      	b.n	8007256 <_printf_common+0xb6>
 8007244:	2301      	movs	r3, #1
 8007246:	4652      	mov	r2, sl
 8007248:	4639      	mov	r1, r7
 800724a:	4630      	mov	r0, r6
 800724c:	47c0      	blx	r8
 800724e:	3001      	adds	r0, #1
 8007250:	d103      	bne.n	800725a <_printf_common+0xba>
 8007252:	f04f 30ff 	mov.w	r0, #4294967295
 8007256:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800725a:	3501      	adds	r5, #1
 800725c:	e7c3      	b.n	80071e6 <_printf_common+0x46>
 800725e:	18e1      	adds	r1, r4, r3
 8007260:	1c5a      	adds	r2, r3, #1
 8007262:	2030      	movs	r0, #48	; 0x30
 8007264:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007268:	4422      	add	r2, r4
 800726a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800726e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007272:	3302      	adds	r3, #2
 8007274:	e7c5      	b.n	8007202 <_printf_common+0x62>
 8007276:	2301      	movs	r3, #1
 8007278:	4622      	mov	r2, r4
 800727a:	4639      	mov	r1, r7
 800727c:	4630      	mov	r0, r6
 800727e:	47c0      	blx	r8
 8007280:	3001      	adds	r0, #1
 8007282:	d0e6      	beq.n	8007252 <_printf_common+0xb2>
 8007284:	f109 0901 	add.w	r9, r9, #1
 8007288:	e7d8      	b.n	800723c <_printf_common+0x9c>
	...

0800728c <_printf_i>:
 800728c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007290:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007294:	460c      	mov	r4, r1
 8007296:	7e09      	ldrb	r1, [r1, #24]
 8007298:	b085      	sub	sp, #20
 800729a:	296e      	cmp	r1, #110	; 0x6e
 800729c:	4617      	mov	r7, r2
 800729e:	4606      	mov	r6, r0
 80072a0:	4698      	mov	r8, r3
 80072a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80072a4:	f000 80b3 	beq.w	800740e <_printf_i+0x182>
 80072a8:	d822      	bhi.n	80072f0 <_printf_i+0x64>
 80072aa:	2963      	cmp	r1, #99	; 0x63
 80072ac:	d036      	beq.n	800731c <_printf_i+0x90>
 80072ae:	d80a      	bhi.n	80072c6 <_printf_i+0x3a>
 80072b0:	2900      	cmp	r1, #0
 80072b2:	f000 80b9 	beq.w	8007428 <_printf_i+0x19c>
 80072b6:	2958      	cmp	r1, #88	; 0x58
 80072b8:	f000 8083 	beq.w	80073c2 <_printf_i+0x136>
 80072bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80072c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80072c4:	e032      	b.n	800732c <_printf_i+0xa0>
 80072c6:	2964      	cmp	r1, #100	; 0x64
 80072c8:	d001      	beq.n	80072ce <_printf_i+0x42>
 80072ca:	2969      	cmp	r1, #105	; 0x69
 80072cc:	d1f6      	bne.n	80072bc <_printf_i+0x30>
 80072ce:	6820      	ldr	r0, [r4, #0]
 80072d0:	6813      	ldr	r3, [r2, #0]
 80072d2:	0605      	lsls	r5, r0, #24
 80072d4:	f103 0104 	add.w	r1, r3, #4
 80072d8:	d52a      	bpl.n	8007330 <_printf_i+0xa4>
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	6011      	str	r1, [r2, #0]
 80072de:	2b00      	cmp	r3, #0
 80072e0:	da03      	bge.n	80072ea <_printf_i+0x5e>
 80072e2:	222d      	movs	r2, #45	; 0x2d
 80072e4:	425b      	negs	r3, r3
 80072e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80072ea:	486f      	ldr	r0, [pc, #444]	; (80074a8 <_printf_i+0x21c>)
 80072ec:	220a      	movs	r2, #10
 80072ee:	e039      	b.n	8007364 <_printf_i+0xd8>
 80072f0:	2973      	cmp	r1, #115	; 0x73
 80072f2:	f000 809d 	beq.w	8007430 <_printf_i+0x1a4>
 80072f6:	d808      	bhi.n	800730a <_printf_i+0x7e>
 80072f8:	296f      	cmp	r1, #111	; 0x6f
 80072fa:	d020      	beq.n	800733e <_printf_i+0xb2>
 80072fc:	2970      	cmp	r1, #112	; 0x70
 80072fe:	d1dd      	bne.n	80072bc <_printf_i+0x30>
 8007300:	6823      	ldr	r3, [r4, #0]
 8007302:	f043 0320 	orr.w	r3, r3, #32
 8007306:	6023      	str	r3, [r4, #0]
 8007308:	e003      	b.n	8007312 <_printf_i+0x86>
 800730a:	2975      	cmp	r1, #117	; 0x75
 800730c:	d017      	beq.n	800733e <_printf_i+0xb2>
 800730e:	2978      	cmp	r1, #120	; 0x78
 8007310:	d1d4      	bne.n	80072bc <_printf_i+0x30>
 8007312:	2378      	movs	r3, #120	; 0x78
 8007314:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007318:	4864      	ldr	r0, [pc, #400]	; (80074ac <_printf_i+0x220>)
 800731a:	e055      	b.n	80073c8 <_printf_i+0x13c>
 800731c:	6813      	ldr	r3, [r2, #0]
 800731e:	1d19      	adds	r1, r3, #4
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	6011      	str	r1, [r2, #0]
 8007324:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007328:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800732c:	2301      	movs	r3, #1
 800732e:	e08c      	b.n	800744a <_printf_i+0x1be>
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	6011      	str	r1, [r2, #0]
 8007334:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007338:	bf18      	it	ne
 800733a:	b21b      	sxthne	r3, r3
 800733c:	e7cf      	b.n	80072de <_printf_i+0x52>
 800733e:	6813      	ldr	r3, [r2, #0]
 8007340:	6825      	ldr	r5, [r4, #0]
 8007342:	1d18      	adds	r0, r3, #4
 8007344:	6010      	str	r0, [r2, #0]
 8007346:	0628      	lsls	r0, r5, #24
 8007348:	d501      	bpl.n	800734e <_printf_i+0xc2>
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	e002      	b.n	8007354 <_printf_i+0xc8>
 800734e:	0668      	lsls	r0, r5, #25
 8007350:	d5fb      	bpl.n	800734a <_printf_i+0xbe>
 8007352:	881b      	ldrh	r3, [r3, #0]
 8007354:	4854      	ldr	r0, [pc, #336]	; (80074a8 <_printf_i+0x21c>)
 8007356:	296f      	cmp	r1, #111	; 0x6f
 8007358:	bf14      	ite	ne
 800735a:	220a      	movne	r2, #10
 800735c:	2208      	moveq	r2, #8
 800735e:	2100      	movs	r1, #0
 8007360:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007364:	6865      	ldr	r5, [r4, #4]
 8007366:	60a5      	str	r5, [r4, #8]
 8007368:	2d00      	cmp	r5, #0
 800736a:	f2c0 8095 	blt.w	8007498 <_printf_i+0x20c>
 800736e:	6821      	ldr	r1, [r4, #0]
 8007370:	f021 0104 	bic.w	r1, r1, #4
 8007374:	6021      	str	r1, [r4, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d13d      	bne.n	80073f6 <_printf_i+0x16a>
 800737a:	2d00      	cmp	r5, #0
 800737c:	f040 808e 	bne.w	800749c <_printf_i+0x210>
 8007380:	4665      	mov	r5, ip
 8007382:	2a08      	cmp	r2, #8
 8007384:	d10b      	bne.n	800739e <_printf_i+0x112>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	07db      	lsls	r3, r3, #31
 800738a:	d508      	bpl.n	800739e <_printf_i+0x112>
 800738c:	6923      	ldr	r3, [r4, #16]
 800738e:	6862      	ldr	r2, [r4, #4]
 8007390:	429a      	cmp	r2, r3
 8007392:	bfde      	ittt	le
 8007394:	2330      	movle	r3, #48	; 0x30
 8007396:	f805 3c01 	strble.w	r3, [r5, #-1]
 800739a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800739e:	ebac 0305 	sub.w	r3, ip, r5
 80073a2:	6123      	str	r3, [r4, #16]
 80073a4:	f8cd 8000 	str.w	r8, [sp]
 80073a8:	463b      	mov	r3, r7
 80073aa:	aa03      	add	r2, sp, #12
 80073ac:	4621      	mov	r1, r4
 80073ae:	4630      	mov	r0, r6
 80073b0:	f7ff fef6 	bl	80071a0 <_printf_common>
 80073b4:	3001      	adds	r0, #1
 80073b6:	d14d      	bne.n	8007454 <_printf_i+0x1c8>
 80073b8:	f04f 30ff 	mov.w	r0, #4294967295
 80073bc:	b005      	add	sp, #20
 80073be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073c2:	4839      	ldr	r0, [pc, #228]	; (80074a8 <_printf_i+0x21c>)
 80073c4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80073c8:	6813      	ldr	r3, [r2, #0]
 80073ca:	6821      	ldr	r1, [r4, #0]
 80073cc:	1d1d      	adds	r5, r3, #4
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	6015      	str	r5, [r2, #0]
 80073d2:	060a      	lsls	r2, r1, #24
 80073d4:	d50b      	bpl.n	80073ee <_printf_i+0x162>
 80073d6:	07ca      	lsls	r2, r1, #31
 80073d8:	bf44      	itt	mi
 80073da:	f041 0120 	orrmi.w	r1, r1, #32
 80073de:	6021      	strmi	r1, [r4, #0]
 80073e0:	b91b      	cbnz	r3, 80073ea <_printf_i+0x15e>
 80073e2:	6822      	ldr	r2, [r4, #0]
 80073e4:	f022 0220 	bic.w	r2, r2, #32
 80073e8:	6022      	str	r2, [r4, #0]
 80073ea:	2210      	movs	r2, #16
 80073ec:	e7b7      	b.n	800735e <_printf_i+0xd2>
 80073ee:	064d      	lsls	r5, r1, #25
 80073f0:	bf48      	it	mi
 80073f2:	b29b      	uxthmi	r3, r3
 80073f4:	e7ef      	b.n	80073d6 <_printf_i+0x14a>
 80073f6:	4665      	mov	r5, ip
 80073f8:	fbb3 f1f2 	udiv	r1, r3, r2
 80073fc:	fb02 3311 	mls	r3, r2, r1, r3
 8007400:	5cc3      	ldrb	r3, [r0, r3]
 8007402:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007406:	460b      	mov	r3, r1
 8007408:	2900      	cmp	r1, #0
 800740a:	d1f5      	bne.n	80073f8 <_printf_i+0x16c>
 800740c:	e7b9      	b.n	8007382 <_printf_i+0xf6>
 800740e:	6813      	ldr	r3, [r2, #0]
 8007410:	6825      	ldr	r5, [r4, #0]
 8007412:	6961      	ldr	r1, [r4, #20]
 8007414:	1d18      	adds	r0, r3, #4
 8007416:	6010      	str	r0, [r2, #0]
 8007418:	0628      	lsls	r0, r5, #24
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	d501      	bpl.n	8007422 <_printf_i+0x196>
 800741e:	6019      	str	r1, [r3, #0]
 8007420:	e002      	b.n	8007428 <_printf_i+0x19c>
 8007422:	066a      	lsls	r2, r5, #25
 8007424:	d5fb      	bpl.n	800741e <_printf_i+0x192>
 8007426:	8019      	strh	r1, [r3, #0]
 8007428:	2300      	movs	r3, #0
 800742a:	6123      	str	r3, [r4, #16]
 800742c:	4665      	mov	r5, ip
 800742e:	e7b9      	b.n	80073a4 <_printf_i+0x118>
 8007430:	6813      	ldr	r3, [r2, #0]
 8007432:	1d19      	adds	r1, r3, #4
 8007434:	6011      	str	r1, [r2, #0]
 8007436:	681d      	ldr	r5, [r3, #0]
 8007438:	6862      	ldr	r2, [r4, #4]
 800743a:	2100      	movs	r1, #0
 800743c:	4628      	mov	r0, r5
 800743e:	f7f8 feef 	bl	8000220 <memchr>
 8007442:	b108      	cbz	r0, 8007448 <_printf_i+0x1bc>
 8007444:	1b40      	subs	r0, r0, r5
 8007446:	6060      	str	r0, [r4, #4]
 8007448:	6863      	ldr	r3, [r4, #4]
 800744a:	6123      	str	r3, [r4, #16]
 800744c:	2300      	movs	r3, #0
 800744e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007452:	e7a7      	b.n	80073a4 <_printf_i+0x118>
 8007454:	6923      	ldr	r3, [r4, #16]
 8007456:	462a      	mov	r2, r5
 8007458:	4639      	mov	r1, r7
 800745a:	4630      	mov	r0, r6
 800745c:	47c0      	blx	r8
 800745e:	3001      	adds	r0, #1
 8007460:	d0aa      	beq.n	80073b8 <_printf_i+0x12c>
 8007462:	6823      	ldr	r3, [r4, #0]
 8007464:	079b      	lsls	r3, r3, #30
 8007466:	d413      	bmi.n	8007490 <_printf_i+0x204>
 8007468:	68e0      	ldr	r0, [r4, #12]
 800746a:	9b03      	ldr	r3, [sp, #12]
 800746c:	4298      	cmp	r0, r3
 800746e:	bfb8      	it	lt
 8007470:	4618      	movlt	r0, r3
 8007472:	e7a3      	b.n	80073bc <_printf_i+0x130>
 8007474:	2301      	movs	r3, #1
 8007476:	464a      	mov	r2, r9
 8007478:	4639      	mov	r1, r7
 800747a:	4630      	mov	r0, r6
 800747c:	47c0      	blx	r8
 800747e:	3001      	adds	r0, #1
 8007480:	d09a      	beq.n	80073b8 <_printf_i+0x12c>
 8007482:	3501      	adds	r5, #1
 8007484:	68e3      	ldr	r3, [r4, #12]
 8007486:	9a03      	ldr	r2, [sp, #12]
 8007488:	1a9b      	subs	r3, r3, r2
 800748a:	42ab      	cmp	r3, r5
 800748c:	dcf2      	bgt.n	8007474 <_printf_i+0x1e8>
 800748e:	e7eb      	b.n	8007468 <_printf_i+0x1dc>
 8007490:	2500      	movs	r5, #0
 8007492:	f104 0919 	add.w	r9, r4, #25
 8007496:	e7f5      	b.n	8007484 <_printf_i+0x1f8>
 8007498:	2b00      	cmp	r3, #0
 800749a:	d1ac      	bne.n	80073f6 <_printf_i+0x16a>
 800749c:	7803      	ldrb	r3, [r0, #0]
 800749e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80074a6:	e76c      	b.n	8007382 <_printf_i+0xf6>
 80074a8:	08007ba5 	.word	0x08007ba5
 80074ac:	08007bb6 	.word	0x08007bb6

080074b0 <__sread>:
 80074b0:	b510      	push	{r4, lr}
 80074b2:	460c      	mov	r4, r1
 80074b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b8:	f000 fa46 	bl	8007948 <_read_r>
 80074bc:	2800      	cmp	r0, #0
 80074be:	bfab      	itete	ge
 80074c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80074c2:	89a3      	ldrhlt	r3, [r4, #12]
 80074c4:	181b      	addge	r3, r3, r0
 80074c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80074ca:	bfac      	ite	ge
 80074cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80074ce:	81a3      	strhlt	r3, [r4, #12]
 80074d0:	bd10      	pop	{r4, pc}

080074d2 <__swrite>:
 80074d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074d6:	461f      	mov	r7, r3
 80074d8:	898b      	ldrh	r3, [r1, #12]
 80074da:	05db      	lsls	r3, r3, #23
 80074dc:	4605      	mov	r5, r0
 80074de:	460c      	mov	r4, r1
 80074e0:	4616      	mov	r6, r2
 80074e2:	d505      	bpl.n	80074f0 <__swrite+0x1e>
 80074e4:	2302      	movs	r3, #2
 80074e6:	2200      	movs	r2, #0
 80074e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074ec:	f000 f9b6 	bl	800785c <_lseek_r>
 80074f0:	89a3      	ldrh	r3, [r4, #12]
 80074f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074fa:	81a3      	strh	r3, [r4, #12]
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	4628      	mov	r0, r5
 8007502:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007506:	f000 b869 	b.w	80075dc <_write_r>

0800750a <__sseek>:
 800750a:	b510      	push	{r4, lr}
 800750c:	460c      	mov	r4, r1
 800750e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007512:	f000 f9a3 	bl	800785c <_lseek_r>
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	89a3      	ldrh	r3, [r4, #12]
 800751a:	bf15      	itete	ne
 800751c:	6560      	strne	r0, [r4, #84]	; 0x54
 800751e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007522:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007526:	81a3      	strheq	r3, [r4, #12]
 8007528:	bf18      	it	ne
 800752a:	81a3      	strhne	r3, [r4, #12]
 800752c:	bd10      	pop	{r4, pc}

0800752e <__sclose>:
 800752e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007532:	f000 b8d3 	b.w	80076dc <_close_r>
	...

08007538 <__swbuf_r>:
 8007538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800753a:	460e      	mov	r6, r1
 800753c:	4614      	mov	r4, r2
 800753e:	4605      	mov	r5, r0
 8007540:	b118      	cbz	r0, 800754a <__swbuf_r+0x12>
 8007542:	6983      	ldr	r3, [r0, #24]
 8007544:	b90b      	cbnz	r3, 800754a <__swbuf_r+0x12>
 8007546:	f7ff fc5f 	bl	8006e08 <__sinit>
 800754a:	4b21      	ldr	r3, [pc, #132]	; (80075d0 <__swbuf_r+0x98>)
 800754c:	429c      	cmp	r4, r3
 800754e:	d12a      	bne.n	80075a6 <__swbuf_r+0x6e>
 8007550:	686c      	ldr	r4, [r5, #4]
 8007552:	69a3      	ldr	r3, [r4, #24]
 8007554:	60a3      	str	r3, [r4, #8]
 8007556:	89a3      	ldrh	r3, [r4, #12]
 8007558:	071a      	lsls	r2, r3, #28
 800755a:	d52e      	bpl.n	80075ba <__swbuf_r+0x82>
 800755c:	6923      	ldr	r3, [r4, #16]
 800755e:	b363      	cbz	r3, 80075ba <__swbuf_r+0x82>
 8007560:	6923      	ldr	r3, [r4, #16]
 8007562:	6820      	ldr	r0, [r4, #0]
 8007564:	1ac0      	subs	r0, r0, r3
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	b2f6      	uxtb	r6, r6
 800756a:	4283      	cmp	r3, r0
 800756c:	4637      	mov	r7, r6
 800756e:	dc04      	bgt.n	800757a <__swbuf_r+0x42>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f000 f948 	bl	8007808 <_fflush_r>
 8007578:	bb28      	cbnz	r0, 80075c6 <__swbuf_r+0x8e>
 800757a:	68a3      	ldr	r3, [r4, #8]
 800757c:	3b01      	subs	r3, #1
 800757e:	60a3      	str	r3, [r4, #8]
 8007580:	6823      	ldr	r3, [r4, #0]
 8007582:	1c5a      	adds	r2, r3, #1
 8007584:	6022      	str	r2, [r4, #0]
 8007586:	701e      	strb	r6, [r3, #0]
 8007588:	6963      	ldr	r3, [r4, #20]
 800758a:	3001      	adds	r0, #1
 800758c:	4283      	cmp	r3, r0
 800758e:	d004      	beq.n	800759a <__swbuf_r+0x62>
 8007590:	89a3      	ldrh	r3, [r4, #12]
 8007592:	07db      	lsls	r3, r3, #31
 8007594:	d519      	bpl.n	80075ca <__swbuf_r+0x92>
 8007596:	2e0a      	cmp	r6, #10
 8007598:	d117      	bne.n	80075ca <__swbuf_r+0x92>
 800759a:	4621      	mov	r1, r4
 800759c:	4628      	mov	r0, r5
 800759e:	f000 f933 	bl	8007808 <_fflush_r>
 80075a2:	b190      	cbz	r0, 80075ca <__swbuf_r+0x92>
 80075a4:	e00f      	b.n	80075c6 <__swbuf_r+0x8e>
 80075a6:	4b0b      	ldr	r3, [pc, #44]	; (80075d4 <__swbuf_r+0x9c>)
 80075a8:	429c      	cmp	r4, r3
 80075aa:	d101      	bne.n	80075b0 <__swbuf_r+0x78>
 80075ac:	68ac      	ldr	r4, [r5, #8]
 80075ae:	e7d0      	b.n	8007552 <__swbuf_r+0x1a>
 80075b0:	4b09      	ldr	r3, [pc, #36]	; (80075d8 <__swbuf_r+0xa0>)
 80075b2:	429c      	cmp	r4, r3
 80075b4:	bf08      	it	eq
 80075b6:	68ec      	ldreq	r4, [r5, #12]
 80075b8:	e7cb      	b.n	8007552 <__swbuf_r+0x1a>
 80075ba:	4621      	mov	r1, r4
 80075bc:	4628      	mov	r0, r5
 80075be:	f000 f81f 	bl	8007600 <__swsetup_r>
 80075c2:	2800      	cmp	r0, #0
 80075c4:	d0cc      	beq.n	8007560 <__swbuf_r+0x28>
 80075c6:	f04f 37ff 	mov.w	r7, #4294967295
 80075ca:	4638      	mov	r0, r7
 80075cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075ce:	bf00      	nop
 80075d0:	08007b54 	.word	0x08007b54
 80075d4:	08007b74 	.word	0x08007b74
 80075d8:	08007b34 	.word	0x08007b34

080075dc <_write_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4c07      	ldr	r4, [pc, #28]	; (80075fc <_write_r+0x20>)
 80075e0:	4605      	mov	r5, r0
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7f9 fa2e 	bl	8000a4c <_write>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_write_r+0x1e>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_write_r+0x1e>
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	2000418c 	.word	0x2000418c

08007600 <__swsetup_r>:
 8007600:	4b32      	ldr	r3, [pc, #200]	; (80076cc <__swsetup_r+0xcc>)
 8007602:	b570      	push	{r4, r5, r6, lr}
 8007604:	681d      	ldr	r5, [r3, #0]
 8007606:	4606      	mov	r6, r0
 8007608:	460c      	mov	r4, r1
 800760a:	b125      	cbz	r5, 8007616 <__swsetup_r+0x16>
 800760c:	69ab      	ldr	r3, [r5, #24]
 800760e:	b913      	cbnz	r3, 8007616 <__swsetup_r+0x16>
 8007610:	4628      	mov	r0, r5
 8007612:	f7ff fbf9 	bl	8006e08 <__sinit>
 8007616:	4b2e      	ldr	r3, [pc, #184]	; (80076d0 <__swsetup_r+0xd0>)
 8007618:	429c      	cmp	r4, r3
 800761a:	d10f      	bne.n	800763c <__swsetup_r+0x3c>
 800761c:	686c      	ldr	r4, [r5, #4]
 800761e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007622:	b29a      	uxth	r2, r3
 8007624:	0715      	lsls	r5, r2, #28
 8007626:	d42c      	bmi.n	8007682 <__swsetup_r+0x82>
 8007628:	06d0      	lsls	r0, r2, #27
 800762a:	d411      	bmi.n	8007650 <__swsetup_r+0x50>
 800762c:	2209      	movs	r2, #9
 800762e:	6032      	str	r2, [r6, #0]
 8007630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007634:	81a3      	strh	r3, [r4, #12]
 8007636:	f04f 30ff 	mov.w	r0, #4294967295
 800763a:	e03e      	b.n	80076ba <__swsetup_r+0xba>
 800763c:	4b25      	ldr	r3, [pc, #148]	; (80076d4 <__swsetup_r+0xd4>)
 800763e:	429c      	cmp	r4, r3
 8007640:	d101      	bne.n	8007646 <__swsetup_r+0x46>
 8007642:	68ac      	ldr	r4, [r5, #8]
 8007644:	e7eb      	b.n	800761e <__swsetup_r+0x1e>
 8007646:	4b24      	ldr	r3, [pc, #144]	; (80076d8 <__swsetup_r+0xd8>)
 8007648:	429c      	cmp	r4, r3
 800764a:	bf08      	it	eq
 800764c:	68ec      	ldreq	r4, [r5, #12]
 800764e:	e7e6      	b.n	800761e <__swsetup_r+0x1e>
 8007650:	0751      	lsls	r1, r2, #29
 8007652:	d512      	bpl.n	800767a <__swsetup_r+0x7a>
 8007654:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007656:	b141      	cbz	r1, 800766a <__swsetup_r+0x6a>
 8007658:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800765c:	4299      	cmp	r1, r3
 800765e:	d002      	beq.n	8007666 <__swsetup_r+0x66>
 8007660:	4630      	mov	r0, r6
 8007662:	f7ff fac1 	bl	8006be8 <_free_r>
 8007666:	2300      	movs	r3, #0
 8007668:	6363      	str	r3, [r4, #52]	; 0x34
 800766a:	89a3      	ldrh	r3, [r4, #12]
 800766c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007670:	81a3      	strh	r3, [r4, #12]
 8007672:	2300      	movs	r3, #0
 8007674:	6063      	str	r3, [r4, #4]
 8007676:	6923      	ldr	r3, [r4, #16]
 8007678:	6023      	str	r3, [r4, #0]
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f043 0308 	orr.w	r3, r3, #8
 8007680:	81a3      	strh	r3, [r4, #12]
 8007682:	6923      	ldr	r3, [r4, #16]
 8007684:	b94b      	cbnz	r3, 800769a <__swsetup_r+0x9a>
 8007686:	89a3      	ldrh	r3, [r4, #12]
 8007688:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800768c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007690:	d003      	beq.n	800769a <__swsetup_r+0x9a>
 8007692:	4621      	mov	r1, r4
 8007694:	4630      	mov	r0, r6
 8007696:	f000 f917 	bl	80078c8 <__smakebuf_r>
 800769a:	89a2      	ldrh	r2, [r4, #12]
 800769c:	f012 0301 	ands.w	r3, r2, #1
 80076a0:	d00c      	beq.n	80076bc <__swsetup_r+0xbc>
 80076a2:	2300      	movs	r3, #0
 80076a4:	60a3      	str	r3, [r4, #8]
 80076a6:	6963      	ldr	r3, [r4, #20]
 80076a8:	425b      	negs	r3, r3
 80076aa:	61a3      	str	r3, [r4, #24]
 80076ac:	6923      	ldr	r3, [r4, #16]
 80076ae:	b953      	cbnz	r3, 80076c6 <__swsetup_r+0xc6>
 80076b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80076b8:	d1ba      	bne.n	8007630 <__swsetup_r+0x30>
 80076ba:	bd70      	pop	{r4, r5, r6, pc}
 80076bc:	0792      	lsls	r2, r2, #30
 80076be:	bf58      	it	pl
 80076c0:	6963      	ldrpl	r3, [r4, #20]
 80076c2:	60a3      	str	r3, [r4, #8]
 80076c4:	e7f2      	b.n	80076ac <__swsetup_r+0xac>
 80076c6:	2000      	movs	r0, #0
 80076c8:	e7f7      	b.n	80076ba <__swsetup_r+0xba>
 80076ca:	bf00      	nop
 80076cc:	20000040 	.word	0x20000040
 80076d0:	08007b54 	.word	0x08007b54
 80076d4:	08007b74 	.word	0x08007b74
 80076d8:	08007b34 	.word	0x08007b34

080076dc <_close_r>:
 80076dc:	b538      	push	{r3, r4, r5, lr}
 80076de:	4c06      	ldr	r4, [pc, #24]	; (80076f8 <_close_r+0x1c>)
 80076e0:	2300      	movs	r3, #0
 80076e2:	4605      	mov	r5, r0
 80076e4:	4608      	mov	r0, r1
 80076e6:	6023      	str	r3, [r4, #0]
 80076e8:	f7f9 fc81 	bl	8000fee <_close>
 80076ec:	1c43      	adds	r3, r0, #1
 80076ee:	d102      	bne.n	80076f6 <_close_r+0x1a>
 80076f0:	6823      	ldr	r3, [r4, #0]
 80076f2:	b103      	cbz	r3, 80076f6 <_close_r+0x1a>
 80076f4:	602b      	str	r3, [r5, #0]
 80076f6:	bd38      	pop	{r3, r4, r5, pc}
 80076f8:	2000418c 	.word	0x2000418c

080076fc <__sflush_r>:
 80076fc:	898a      	ldrh	r2, [r1, #12]
 80076fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007702:	4605      	mov	r5, r0
 8007704:	0710      	lsls	r0, r2, #28
 8007706:	460c      	mov	r4, r1
 8007708:	d458      	bmi.n	80077bc <__sflush_r+0xc0>
 800770a:	684b      	ldr	r3, [r1, #4]
 800770c:	2b00      	cmp	r3, #0
 800770e:	dc05      	bgt.n	800771c <__sflush_r+0x20>
 8007710:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007712:	2b00      	cmp	r3, #0
 8007714:	dc02      	bgt.n	800771c <__sflush_r+0x20>
 8007716:	2000      	movs	r0, #0
 8007718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800771c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800771e:	2e00      	cmp	r6, #0
 8007720:	d0f9      	beq.n	8007716 <__sflush_r+0x1a>
 8007722:	2300      	movs	r3, #0
 8007724:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007728:	682f      	ldr	r7, [r5, #0]
 800772a:	6a21      	ldr	r1, [r4, #32]
 800772c:	602b      	str	r3, [r5, #0]
 800772e:	d032      	beq.n	8007796 <__sflush_r+0x9a>
 8007730:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007732:	89a3      	ldrh	r3, [r4, #12]
 8007734:	075a      	lsls	r2, r3, #29
 8007736:	d505      	bpl.n	8007744 <__sflush_r+0x48>
 8007738:	6863      	ldr	r3, [r4, #4]
 800773a:	1ac0      	subs	r0, r0, r3
 800773c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800773e:	b10b      	cbz	r3, 8007744 <__sflush_r+0x48>
 8007740:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007742:	1ac0      	subs	r0, r0, r3
 8007744:	2300      	movs	r3, #0
 8007746:	4602      	mov	r2, r0
 8007748:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800774a:	6a21      	ldr	r1, [r4, #32]
 800774c:	4628      	mov	r0, r5
 800774e:	47b0      	blx	r6
 8007750:	1c43      	adds	r3, r0, #1
 8007752:	89a3      	ldrh	r3, [r4, #12]
 8007754:	d106      	bne.n	8007764 <__sflush_r+0x68>
 8007756:	6829      	ldr	r1, [r5, #0]
 8007758:	291d      	cmp	r1, #29
 800775a:	d848      	bhi.n	80077ee <__sflush_r+0xf2>
 800775c:	4a29      	ldr	r2, [pc, #164]	; (8007804 <__sflush_r+0x108>)
 800775e:	40ca      	lsrs	r2, r1
 8007760:	07d6      	lsls	r6, r2, #31
 8007762:	d544      	bpl.n	80077ee <__sflush_r+0xf2>
 8007764:	2200      	movs	r2, #0
 8007766:	6062      	str	r2, [r4, #4]
 8007768:	04d9      	lsls	r1, r3, #19
 800776a:	6922      	ldr	r2, [r4, #16]
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	d504      	bpl.n	800777a <__sflush_r+0x7e>
 8007770:	1c42      	adds	r2, r0, #1
 8007772:	d101      	bne.n	8007778 <__sflush_r+0x7c>
 8007774:	682b      	ldr	r3, [r5, #0]
 8007776:	b903      	cbnz	r3, 800777a <__sflush_r+0x7e>
 8007778:	6560      	str	r0, [r4, #84]	; 0x54
 800777a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800777c:	602f      	str	r7, [r5, #0]
 800777e:	2900      	cmp	r1, #0
 8007780:	d0c9      	beq.n	8007716 <__sflush_r+0x1a>
 8007782:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007786:	4299      	cmp	r1, r3
 8007788:	d002      	beq.n	8007790 <__sflush_r+0x94>
 800778a:	4628      	mov	r0, r5
 800778c:	f7ff fa2c 	bl	8006be8 <_free_r>
 8007790:	2000      	movs	r0, #0
 8007792:	6360      	str	r0, [r4, #52]	; 0x34
 8007794:	e7c0      	b.n	8007718 <__sflush_r+0x1c>
 8007796:	2301      	movs	r3, #1
 8007798:	4628      	mov	r0, r5
 800779a:	47b0      	blx	r6
 800779c:	1c41      	adds	r1, r0, #1
 800779e:	d1c8      	bne.n	8007732 <__sflush_r+0x36>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0c5      	beq.n	8007732 <__sflush_r+0x36>
 80077a6:	2b1d      	cmp	r3, #29
 80077a8:	d001      	beq.n	80077ae <__sflush_r+0xb2>
 80077aa:	2b16      	cmp	r3, #22
 80077ac:	d101      	bne.n	80077b2 <__sflush_r+0xb6>
 80077ae:	602f      	str	r7, [r5, #0]
 80077b0:	e7b1      	b.n	8007716 <__sflush_r+0x1a>
 80077b2:	89a3      	ldrh	r3, [r4, #12]
 80077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077b8:	81a3      	strh	r3, [r4, #12]
 80077ba:	e7ad      	b.n	8007718 <__sflush_r+0x1c>
 80077bc:	690f      	ldr	r7, [r1, #16]
 80077be:	2f00      	cmp	r7, #0
 80077c0:	d0a9      	beq.n	8007716 <__sflush_r+0x1a>
 80077c2:	0793      	lsls	r3, r2, #30
 80077c4:	680e      	ldr	r6, [r1, #0]
 80077c6:	bf08      	it	eq
 80077c8:	694b      	ldreq	r3, [r1, #20]
 80077ca:	600f      	str	r7, [r1, #0]
 80077cc:	bf18      	it	ne
 80077ce:	2300      	movne	r3, #0
 80077d0:	eba6 0807 	sub.w	r8, r6, r7
 80077d4:	608b      	str	r3, [r1, #8]
 80077d6:	f1b8 0f00 	cmp.w	r8, #0
 80077da:	dd9c      	ble.n	8007716 <__sflush_r+0x1a>
 80077dc:	4643      	mov	r3, r8
 80077de:	463a      	mov	r2, r7
 80077e0:	6a21      	ldr	r1, [r4, #32]
 80077e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80077e4:	4628      	mov	r0, r5
 80077e6:	47b0      	blx	r6
 80077e8:	2800      	cmp	r0, #0
 80077ea:	dc06      	bgt.n	80077fa <__sflush_r+0xfe>
 80077ec:	89a3      	ldrh	r3, [r4, #12]
 80077ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077f2:	81a3      	strh	r3, [r4, #12]
 80077f4:	f04f 30ff 	mov.w	r0, #4294967295
 80077f8:	e78e      	b.n	8007718 <__sflush_r+0x1c>
 80077fa:	4407      	add	r7, r0
 80077fc:	eba8 0800 	sub.w	r8, r8, r0
 8007800:	e7e9      	b.n	80077d6 <__sflush_r+0xda>
 8007802:	bf00      	nop
 8007804:	20400001 	.word	0x20400001

08007808 <_fflush_r>:
 8007808:	b538      	push	{r3, r4, r5, lr}
 800780a:	690b      	ldr	r3, [r1, #16]
 800780c:	4605      	mov	r5, r0
 800780e:	460c      	mov	r4, r1
 8007810:	b1db      	cbz	r3, 800784a <_fflush_r+0x42>
 8007812:	b118      	cbz	r0, 800781c <_fflush_r+0x14>
 8007814:	6983      	ldr	r3, [r0, #24]
 8007816:	b90b      	cbnz	r3, 800781c <_fflush_r+0x14>
 8007818:	f7ff faf6 	bl	8006e08 <__sinit>
 800781c:	4b0c      	ldr	r3, [pc, #48]	; (8007850 <_fflush_r+0x48>)
 800781e:	429c      	cmp	r4, r3
 8007820:	d109      	bne.n	8007836 <_fflush_r+0x2e>
 8007822:	686c      	ldr	r4, [r5, #4]
 8007824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007828:	b17b      	cbz	r3, 800784a <_fflush_r+0x42>
 800782a:	4621      	mov	r1, r4
 800782c:	4628      	mov	r0, r5
 800782e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007832:	f7ff bf63 	b.w	80076fc <__sflush_r>
 8007836:	4b07      	ldr	r3, [pc, #28]	; (8007854 <_fflush_r+0x4c>)
 8007838:	429c      	cmp	r4, r3
 800783a:	d101      	bne.n	8007840 <_fflush_r+0x38>
 800783c:	68ac      	ldr	r4, [r5, #8]
 800783e:	e7f1      	b.n	8007824 <_fflush_r+0x1c>
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_fflush_r+0x50>)
 8007842:	429c      	cmp	r4, r3
 8007844:	bf08      	it	eq
 8007846:	68ec      	ldreq	r4, [r5, #12]
 8007848:	e7ec      	b.n	8007824 <_fflush_r+0x1c>
 800784a:	2000      	movs	r0, #0
 800784c:	bd38      	pop	{r3, r4, r5, pc}
 800784e:	bf00      	nop
 8007850:	08007b54 	.word	0x08007b54
 8007854:	08007b74 	.word	0x08007b74
 8007858:	08007b34 	.word	0x08007b34

0800785c <_lseek_r>:
 800785c:	b538      	push	{r3, r4, r5, lr}
 800785e:	4c07      	ldr	r4, [pc, #28]	; (800787c <_lseek_r+0x20>)
 8007860:	4605      	mov	r5, r0
 8007862:	4608      	mov	r0, r1
 8007864:	4611      	mov	r1, r2
 8007866:	2200      	movs	r2, #0
 8007868:	6022      	str	r2, [r4, #0]
 800786a:	461a      	mov	r2, r3
 800786c:	f7f9 fbe6 	bl	800103c <_lseek>
 8007870:	1c43      	adds	r3, r0, #1
 8007872:	d102      	bne.n	800787a <_lseek_r+0x1e>
 8007874:	6823      	ldr	r3, [r4, #0]
 8007876:	b103      	cbz	r3, 800787a <_lseek_r+0x1e>
 8007878:	602b      	str	r3, [r5, #0]
 800787a:	bd38      	pop	{r3, r4, r5, pc}
 800787c:	2000418c 	.word	0x2000418c

08007880 <__swhatbuf_r>:
 8007880:	b570      	push	{r4, r5, r6, lr}
 8007882:	460e      	mov	r6, r1
 8007884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007888:	2900      	cmp	r1, #0
 800788a:	b096      	sub	sp, #88	; 0x58
 800788c:	4614      	mov	r4, r2
 800788e:	461d      	mov	r5, r3
 8007890:	da07      	bge.n	80078a2 <__swhatbuf_r+0x22>
 8007892:	2300      	movs	r3, #0
 8007894:	602b      	str	r3, [r5, #0]
 8007896:	89b3      	ldrh	r3, [r6, #12]
 8007898:	061a      	lsls	r2, r3, #24
 800789a:	d410      	bmi.n	80078be <__swhatbuf_r+0x3e>
 800789c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80078a0:	e00e      	b.n	80078c0 <__swhatbuf_r+0x40>
 80078a2:	466a      	mov	r2, sp
 80078a4:	f000 f862 	bl	800796c <_fstat_r>
 80078a8:	2800      	cmp	r0, #0
 80078aa:	dbf2      	blt.n	8007892 <__swhatbuf_r+0x12>
 80078ac:	9a01      	ldr	r2, [sp, #4]
 80078ae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80078b2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80078b6:	425a      	negs	r2, r3
 80078b8:	415a      	adcs	r2, r3
 80078ba:	602a      	str	r2, [r5, #0]
 80078bc:	e7ee      	b.n	800789c <__swhatbuf_r+0x1c>
 80078be:	2340      	movs	r3, #64	; 0x40
 80078c0:	2000      	movs	r0, #0
 80078c2:	6023      	str	r3, [r4, #0]
 80078c4:	b016      	add	sp, #88	; 0x58
 80078c6:	bd70      	pop	{r4, r5, r6, pc}

080078c8 <__smakebuf_r>:
 80078c8:	898b      	ldrh	r3, [r1, #12]
 80078ca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80078cc:	079d      	lsls	r5, r3, #30
 80078ce:	4606      	mov	r6, r0
 80078d0:	460c      	mov	r4, r1
 80078d2:	d507      	bpl.n	80078e4 <__smakebuf_r+0x1c>
 80078d4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80078d8:	6023      	str	r3, [r4, #0]
 80078da:	6123      	str	r3, [r4, #16]
 80078dc:	2301      	movs	r3, #1
 80078de:	6163      	str	r3, [r4, #20]
 80078e0:	b002      	add	sp, #8
 80078e2:	bd70      	pop	{r4, r5, r6, pc}
 80078e4:	ab01      	add	r3, sp, #4
 80078e6:	466a      	mov	r2, sp
 80078e8:	f7ff ffca 	bl	8007880 <__swhatbuf_r>
 80078ec:	9900      	ldr	r1, [sp, #0]
 80078ee:	4605      	mov	r5, r0
 80078f0:	4630      	mov	r0, r6
 80078f2:	f7ff f9c7 	bl	8006c84 <_malloc_r>
 80078f6:	b948      	cbnz	r0, 800790c <__smakebuf_r+0x44>
 80078f8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078fc:	059a      	lsls	r2, r3, #22
 80078fe:	d4ef      	bmi.n	80078e0 <__smakebuf_r+0x18>
 8007900:	f023 0303 	bic.w	r3, r3, #3
 8007904:	f043 0302 	orr.w	r3, r3, #2
 8007908:	81a3      	strh	r3, [r4, #12]
 800790a:	e7e3      	b.n	80078d4 <__smakebuf_r+0xc>
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <__smakebuf_r+0x7c>)
 800790e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007910:	89a3      	ldrh	r3, [r4, #12]
 8007912:	6020      	str	r0, [r4, #0]
 8007914:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007918:	81a3      	strh	r3, [r4, #12]
 800791a:	9b00      	ldr	r3, [sp, #0]
 800791c:	6163      	str	r3, [r4, #20]
 800791e:	9b01      	ldr	r3, [sp, #4]
 8007920:	6120      	str	r0, [r4, #16]
 8007922:	b15b      	cbz	r3, 800793c <__smakebuf_r+0x74>
 8007924:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007928:	4630      	mov	r0, r6
 800792a:	f000 f831 	bl	8007990 <_isatty_r>
 800792e:	b128      	cbz	r0, 800793c <__smakebuf_r+0x74>
 8007930:	89a3      	ldrh	r3, [r4, #12]
 8007932:	f023 0303 	bic.w	r3, r3, #3
 8007936:	f043 0301 	orr.w	r3, r3, #1
 800793a:	81a3      	strh	r3, [r4, #12]
 800793c:	89a3      	ldrh	r3, [r4, #12]
 800793e:	431d      	orrs	r5, r3
 8007940:	81a5      	strh	r5, [r4, #12]
 8007942:	e7cd      	b.n	80078e0 <__smakebuf_r+0x18>
 8007944:	08006dd1 	.word	0x08006dd1

08007948 <_read_r>:
 8007948:	b538      	push	{r3, r4, r5, lr}
 800794a:	4c07      	ldr	r4, [pc, #28]	; (8007968 <_read_r+0x20>)
 800794c:	4605      	mov	r5, r0
 800794e:	4608      	mov	r0, r1
 8007950:	4611      	mov	r1, r2
 8007952:	2200      	movs	r2, #0
 8007954:	6022      	str	r2, [r4, #0]
 8007956:	461a      	mov	r2, r3
 8007958:	f7f9 fb2c 	bl	8000fb4 <_read>
 800795c:	1c43      	adds	r3, r0, #1
 800795e:	d102      	bne.n	8007966 <_read_r+0x1e>
 8007960:	6823      	ldr	r3, [r4, #0]
 8007962:	b103      	cbz	r3, 8007966 <_read_r+0x1e>
 8007964:	602b      	str	r3, [r5, #0]
 8007966:	bd38      	pop	{r3, r4, r5, pc}
 8007968:	2000418c 	.word	0x2000418c

0800796c <_fstat_r>:
 800796c:	b538      	push	{r3, r4, r5, lr}
 800796e:	4c07      	ldr	r4, [pc, #28]	; (800798c <_fstat_r+0x20>)
 8007970:	2300      	movs	r3, #0
 8007972:	4605      	mov	r5, r0
 8007974:	4608      	mov	r0, r1
 8007976:	4611      	mov	r1, r2
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	f7f9 fb44 	bl	8001006 <_fstat>
 800797e:	1c43      	adds	r3, r0, #1
 8007980:	d102      	bne.n	8007988 <_fstat_r+0x1c>
 8007982:	6823      	ldr	r3, [r4, #0]
 8007984:	b103      	cbz	r3, 8007988 <_fstat_r+0x1c>
 8007986:	602b      	str	r3, [r5, #0]
 8007988:	bd38      	pop	{r3, r4, r5, pc}
 800798a:	bf00      	nop
 800798c:	2000418c 	.word	0x2000418c

08007990 <_isatty_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4c06      	ldr	r4, [pc, #24]	; (80079ac <_isatty_r+0x1c>)
 8007994:	2300      	movs	r3, #0
 8007996:	4605      	mov	r5, r0
 8007998:	4608      	mov	r0, r1
 800799a:	6023      	str	r3, [r4, #0]
 800799c:	f7f9 fb43 	bl	8001026 <_isatty>
 80079a0:	1c43      	adds	r3, r0, #1
 80079a2:	d102      	bne.n	80079aa <_isatty_r+0x1a>
 80079a4:	6823      	ldr	r3, [r4, #0]
 80079a6:	b103      	cbz	r3, 80079aa <_isatty_r+0x1a>
 80079a8:	602b      	str	r3, [r5, #0]
 80079aa:	bd38      	pop	{r3, r4, r5, pc}
 80079ac:	2000418c 	.word	0x2000418c

080079b0 <_init>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr

080079bc <_fini>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr
